
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003464  08003464  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003464  08003464  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003464  08003464  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800346c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003478  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003478  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c50e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225f  00000000  00000000  0002c543  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a45  00000000  00000000  0002fd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b188  00000000  00000000  00046785  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c360  00000000  00000000  0005190d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddc6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000ddce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003428 	.word	0x08003428

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003428 	.word	0x08003428

0800017c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <MX_ADC_Init+0xac>)
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <MX_ADC_Init+0xb0>)
 8000190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000192:	4b25      	ldr	r3, [pc, #148]	; (8000228 <MX_ADC_Init+0xac>)
 8000194:	2200      	movs	r2, #0
 8000196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000198:	4b23      	ldr	r3, [pc, #140]	; (8000228 <MX_ADC_Init+0xac>)
 800019a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800019e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_ADC_Init+0xac>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <MX_ADC_Init+0xac>)
 80001a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_ADC_Init+0xac>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80001b4:	4b1c      	ldr	r3, [pc, #112]	; (8000228 <MX_ADC_Init+0xac>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80001ba:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_ADC_Init+0xac>)
 80001bc:	2200      	movs	r2, #0
 80001be:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80001c0:	4b19      	ldr	r3, [pc, #100]	; (8000228 <MX_ADC_Init+0xac>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_ADC_Init+0xac>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <MX_ADC_Init+0xac>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <MX_ADC_Init+0xac>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_ADC_Init+0xac>)
 80001de:	2210      	movs	r2, #16
 80001e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_ADC_Init+0xac>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_ADC_Init+0xac>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <MX_ADC_Init+0xac>)
 80001f2:	f000 fdd7 	bl	8000da4 <HAL_ADC_Init>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80001fc:	f000 fa2e 	bl	800065c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000200:	2300      	movs	r3, #0
 8000202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000204:	2301      	movs	r3, #1
 8000206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <MX_ADC_Init+0xac>)
 8000212:	f001 f91d 	bl	8001450 <HAL_ADC_ConfigChannel>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800021c:	f000 fa1e 	bl	800065c <Error_Handler>
  }

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000002c 	.word	0x2000002c
 800022c:	40012400 	.word	0x40012400

08000230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <HAL_ADC_MspInit+0x84>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d12b      	bne.n	80002aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025c:	6213      	str	r3, [r2, #32]
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = FOTODETECTOR_Pin;
 8000282:	2301      	movs	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000286:	2303      	movs	r3, #3
 8000288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FOTODETECTOR_GPIO_Port, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <HAL_ADC_MspInit+0x8c>)
 8000296:	f001 fbf5 	bl	8001a84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	2012      	movs	r0, #18
 80002a0:	f001 fb79 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80002a4:	2012      	movs	r0, #18
 80002a6:	f001 fb92 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	; 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40012400 	.word	0x40012400
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <get_value_fotodetector>:
#include "fotodetector.h"


uint8_t get_value_fotodetector()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc);
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <get_value_fotodetector+0x2c>)
 80002c6:	f000 feb3 	bl	8001030 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002ca:	f04f 31ff 	mov.w	r1, #4294967295
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d0:	f000 ff0e 	bl	80010f0 <HAL_ADC_PollForConversion>
		fotodetector_value = HAL_ADC_GetValue(&hadc);
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d6:	f000 ff94 	bl	8001202 <HAL_ADC_GetValue>
 80002da:	4603      	mov	r3, r0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e0:	701a      	strb	r2, [r3, #0]

		 return fotodetector_value;
 80002e2:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e4:	781b      	ldrb	r3, [r3, #0]

}
 80002e6:	4618      	mov	r0, r3
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	20000080 	.word	0x20000080

080002f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <MX_GPIO_Init+0x14c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a4c      	ldr	r2, [pc, #304]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b4a      	ldr	r3, [pc, #296]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000322:	4b47      	ldr	r3, [pc, #284]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a46      	ldr	r2, [pc, #280]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000328:	f043 0320 	orr.w	r3, r3, #32
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <MX_GPIO_Init+0x14c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a40      	ldr	r2, [pc, #256]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	61d3      	str	r3, [r2, #28]
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b3b      	ldr	r3, [pc, #236]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a3a      	ldr	r2, [pc, #232]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	4835      	ldr	r0, [pc, #212]	; (8000444 <MX_GPIO_Init+0x150>)
 8000370:	f001 fd16 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	4833      	ldr	r0, [pc, #204]	; (8000448 <MX_GPIO_Init+0x154>)
 800037c:	f001 fd10 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000386:	4831      	ldr	r0, [pc, #196]	; (800044c <MX_GPIO_Init+0x158>)
 8000388:	f001 fd0a 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_GPIO_Init+0x15c>)
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	482a      	ldr	r0, [pc, #168]	; (800044c <MX_GPIO_Init+0x158>)
 80003a2:	f001 fb6f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a6:	2320      	movs	r3, #32
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <MX_GPIO_Init+0x150>)
 80003be:	f001 fb61 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80003c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	481b      	ldr	r0, [pc, #108]	; (8000448 <MX_GPIO_Init+0x154>)
 80003dc:	f001 fb52 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = END_DOWN_Pin|END_HIGH_Pin;
 80003e0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0x160>)
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <MX_GPIO_Init+0x158>)
 80003f6:	f001 fb45 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 80003fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_GPIO_Init+0x158>)
 8000414:	f001 fb36 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2017      	movs	r0, #23
 800041e:	f001 faba 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000422:	2017      	movs	r0, #23
 8000424:	f001 fad3 	bl	80019ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2028      	movs	r0, #40	; 0x28
 800042e:	f001 fab2 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f001 facb 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40023800 	.word	0x40023800
 8000444:	40020000 	.word	0x40020000
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	10110000 	.word	0x10110000
 8000454:	10210000 	.word	0x10210000

08000458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C1_Init+0x50>)
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <MX_I2C1_Init+0x54>)
 8000460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000464:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <MX_I2C1_Init+0x58>)
 8000466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800047a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MX_I2C1_Init+0x50>)
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <MX_I2C1_Init+0x50>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <MX_I2C1_Init+0x50>)
 8000496:	f001 fccd 	bl	8001e34 <HAL_I2C_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004a0:	f000 f8dc 	bl	800065c <Error_Handler>
  }

}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000084 	.word	0x20000084
 80004ac:	40005400 	.word	0x40005400
 80004b0:	000186a0 	.word	0x000186a0

080004b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <HAL_I2C_MspInit+0x7c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d127      	bne.n	8000526 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <HAL_I2C_MspInit+0x80>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a16      	ldr	r2, [pc, #88]	; (8000534 <HAL_I2C_MspInit+0x80>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b14      	ldr	r3, [pc, #80]	; (8000534 <HAL_I2C_MspInit+0x80>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ee:	23c0      	movs	r3, #192	; 0xc0
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f2:	2312      	movs	r3, #18
 80004f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004fe:	2304      	movs	r3, #4
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <HAL_I2C_MspInit+0x84>)
 800050a:	f001 fabb 	bl	8001a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_I2C_MspInit+0x80>)
 8000510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_I2C_MspInit+0x80>)
 8000514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000518:	6253      	str	r3, [r2, #36]	; 0x24
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_I2C_MspInit+0x80>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	; 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40005400 	.word	0x40005400
 8000534:	40023800 	.word	0x40023800
 8000538:	40020400 	.word	0x40020400

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb9f 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f822 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f7ff fed4 	bl	80002f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054c:	f000 fac6 	bl	8000adc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000550:	f000 fa9a 	bl	8000a88 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000554:	f7ff fe12 	bl	800017c <MX_ADC_Init>
  MX_I2C1_Init();
 8000558:	f7ff ff7e 	bl	8000458 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	4908      	ldr	r1, [pc, #32]	; (8000580 <main+0x44>)
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x48>)
 8000562:	f002 fb2a 	bl	8002bba <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0x4c>)
 8000568:	f000 fd62 	bl	8001030 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 auto_fotodetector(get_value_fotodetector());
 800056c:	f7ff fea8 	bl	80002c0 <get_value_fotodetector>
 8000570:	4603      	mov	r3, r0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f9a2 	bl	80008bc <auto_fotodetector>
	 move_motor();
 8000578:	f000 f904 	bl	8000784 <move_motor>
  {
 800057c:	e7f6      	b.n	800056c <main+0x30>
 800057e:	bf00      	nop
 8000580:	200000d8 	.word	0x200000d8
 8000584:	200000f4 	.word	0x200000f4
 8000588:	2000002c 	.word	0x2000002c

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b092      	sub	sp, #72	; 0x48
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 ff3c 	bl	8003418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <SystemClock_Config+0x98>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0x98>)
 80005b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005bc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2300      	movs	r3, #0
 80005d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fd4e 	bl	8002084 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ee:	f000 f835 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f86a 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000616:	f000 f821 	bl	800065c <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3748      	adds	r7, #72	; 0x48
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40007000 	.word	0x40007000

08000628 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(huart->Instance)
	{

	}

	new_data(data);
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_UART_RxCpltCallback+0x2c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f857 	bl	80006e8 <new_data>
	data = 0;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_UART_RxCpltCallback+0x2c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &data, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	4904      	ldr	r1, [pc, #16]	; (8000654 <HAL_UART_RxCpltCallback+0x2c>)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <HAL_UART_RxCpltCallback+0x30>)
 8000646:	f002 fab8 	bl	8002bba <HAL_UART_Receive_IT>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000d8 	.word	0x200000d8
 8000658:	200000f4 	.word	0x200000f4

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <HAL_GPIO_EXTI_Callback>:
#include "motor.h"



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_DOWN_Pin)
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	2b40      	cmp	r3, #64	; 0x40
 8000676:	d112      	bne.n	800069e <HAL_GPIO_EXTI_Callback+0x36>
	{

		set_position = position = 0;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x70>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 8000684:	701a      	strb	r2, [r3, #0]
		set_position = set_position + 5;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3305      	adds	r3, #5
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 8000690:	701a      	strb	r2, [r3, #0]
		auto_down = 1;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
		auto_up = 0;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]

	}
	if(GPIO_Pin == END_HIGH_Pin)
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a4:	d112      	bne.n	80006cc <HAL_GPIO_EXTI_Callback+0x64>
		{
			set_position = position = 255;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x70>)
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 80006b2:	701a      	strb	r2, [r3, #0]
			set_position = set_position - 5;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3b05      	subs	r3, #5
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_GPIO_EXTI_Callback+0x74>)
 80006be:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x78>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
			auto_up = 1;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
		}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000e4 	.word	0x200000e4
 80006dc:	200000f0 	.word	0x200000f0
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	200000e8 	.word	0x200000e8

080006e8 <new_data>:

void new_data(uint8_t new)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	set_position = position = 100;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <new_data+0x88>)
 80006f4:	2264      	movs	r2, #100	; 0x64
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <new_data+0x88>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <new_data+0x8c>)
 80006fe:	701a      	strb	r2, [r3, #0]
	if(new == '1')
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b31      	cmp	r3, #49	; 0x31
 8000704:	d106      	bne.n	8000714 <new_data+0x2c>
	{
		set_position += 5;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <new_data+0x8c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3305      	adds	r3, #5
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <new_data+0x8c>)
 8000710:	701a      	strb	r2, [r3, #0]

			control = 1;
			auto_down = 0;
			auto_up = 0;
		}
}
 8000712:	e028      	b.n	8000766 <new_data+0x7e>
	else if(new == '2')
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b32      	cmp	r3, #50	; 0x32
 8000718:	d106      	bne.n	8000728 <new_data+0x40>
		set_position -= 5;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <new_data+0x8c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3b05      	subs	r3, #5
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <new_data+0x8c>)
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	e01e      	b.n	8000766 <new_data+0x7e>
	else if(new == '3')
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b33      	cmp	r3, #51	; 0x33
 800072c:	d102      	bne.n	8000734 <new_data+0x4c>
			home_up();
 800072e:	f000 f895 	bl	800085c <home_up>
}
 8000732:	e018      	b.n	8000766 <new_data+0x7e>
	else if(new == '4')
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b34      	cmp	r3, #52	; 0x34
 8000738:	d102      	bne.n	8000740 <new_data+0x58>
			home_down();
 800073a:	f000 f8a7 	bl	800088c <home_down>
}
 800073e:	e012      	b.n	8000766 <new_data+0x7e>
	else if(new == '6')
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b36      	cmp	r3, #54	; 0x36
 8000744:	d103      	bne.n	800074e <new_data+0x66>
			control = 0;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <new_data+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	e00b      	b.n	8000766 <new_data+0x7e>
	else if(new == '5')
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b35      	cmp	r3, #53	; 0x35
 8000752:	d108      	bne.n	8000766 <new_data+0x7e>
			control = 1;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <new_data+0x90>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <new_data+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
			auto_up = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <new_data+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000e4 	.word	0x200000e4
 8000774:	200000f0 	.word	0x200000f0
 8000778:	200000dc 	.word	0x200000dc
 800077c:	200000e0 	.word	0x200000e0
 8000780:	200000e8 	.word	0x200000e8

08000784 <move_motor>:




void move_motor()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

	if(set_position > position)
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <move_motor+0xc4>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <move_motor+0xc8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d925      	bls.n	80007e0 <move_motor+0x5c>
	{

		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079a:	482d      	ldr	r0, [pc, #180]	; (8000850 <move_motor+0xcc>)
 800079c:	f001 fb00 	bl	8001da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <move_motor+0xd0>)
 80007a8:	f001 fafa 	bl	8001da0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <move_motor+0xd0>)
 80007b0:	f001 fb0e 	bl	8001dd0 <HAL_GPIO_TogglePin>
		HAL_Delay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 fad3 	bl	8000d60 <HAL_Delay>
		++count_position;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <move_motor+0xd4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <move_motor+0xd4>)
 80007c2:	6013      	str	r3, [r2, #0]
		if(count_position == 20)
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <move_motor+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b14      	cmp	r3, #20
 80007ca:	d13b      	bne.n	8000844 <move_motor+0xc0>
		{
			++position;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <move_motor+0xc8>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <move_motor+0xc8>)
 80007d6:	701a      	strb	r2, [r3, #0]
			count_position = 0;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <move_motor+0xd4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
	else
	{
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
	}

}
 80007de:	e031      	b.n	8000844 <move_motor+0xc0>
	 else if(set_position < position)
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <move_motor+0xc4>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <move_motor+0xc8>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d225      	bcs.n	8000838 <move_motor+0xb4>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <move_motor+0xcc>)
 80007f4:	f001 fad4 	bl	8001da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	4815      	ldr	r0, [pc, #84]	; (8000854 <move_motor+0xd0>)
 8000800:	f001 face 	bl	8001da0 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <move_motor+0xd0>)
 8000808:	f001 fae2 	bl	8001dd0 <HAL_GPIO_TogglePin>
		HAL_Delay(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 faa7 	bl	8000d60 <HAL_Delay>
		++count_position;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <move_motor+0xd4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <move_motor+0xd4>)
 800081a:	6013      	str	r3, [r2, #0]
		if(count_position == 20)
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <move_motor+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b14      	cmp	r3, #20
 8000822:	d10f      	bne.n	8000844 <move_motor+0xc0>
			--position;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <move_motor+0xc8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <move_motor+0xc8>)
 800082e:	701a      	strb	r2, [r3, #0]
			count_position = 0;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <move_motor+0xd4>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	e005      	b.n	8000844 <move_motor+0xc0>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <move_motor+0xcc>)
 8000840:	f001 faae 	bl	8001da0 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000f0 	.word	0x200000f0
 800084c:	200000e4 	.word	0x200000e4
 8000850:	40020400 	.word	0x40020400
 8000854:	40020800 	.word	0x40020800
 8000858:	20000028 	.word	0x20000028

0800085c <home_up>:


void home_up()
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	set_position = position = 0;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <home_up+0x28>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <home_up+0x28>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <home_up+0x2c>)
 800086c:	701a      	strb	r2, [r3, #0]
	set_position += 255;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <home_up+0x2c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <home_up+0x2c>)
 8000878:	701a      	strb	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000e4 	.word	0x200000e4
 8000888:	200000f0 	.word	0x200000f0

0800088c <home_down>:



void home_down()
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	set_position = position = 255;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <home_down+0x28>)
 8000892:	22ff      	movs	r2, #255	; 0xff
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <home_down+0x28>)
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <home_down+0x2c>)
 800089c:	701a      	strb	r2, [r3, #0]
	set_position -= 255;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <home_down+0x2c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <home_down+0x2c>)
 80008a8:	701a      	strb	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200000e4 	.word	0x200000e4
 80008b8:	200000f0 	.word	0x200000f0

080008bc <auto_fotodetector>:

void auto_fotodetector(uint8_t auto_foto)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

	if(control == 1)
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <auto_fotodetector+0x40>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d111      	bne.n	80008f2 <auto_fotodetector+0x36>
	{
		if(auto_down == 0)
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <auto_fotodetector+0x44>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <auto_fotodetector+0x24>
		{
			if(auto_foto < 190)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2bbd      	cmp	r3, #189	; 0xbd
 80008da:	d801      	bhi.n	80008e0 <auto_fotodetector+0x24>
			{
				home_down();
 80008dc:	f7ff ffd6 	bl	800088c <home_down>
			}
		}
		if(auto_up == 0)
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <auto_fotodetector+0x48>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d104      	bne.n	80008f2 <auto_fotodetector+0x36>
		{
			if(auto_foto > 220)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2bdc      	cmp	r3, #220	; 0xdc
 80008ec:	d901      	bls.n	80008f2 <auto_fotodetector+0x36>
			{
				home_up();
 80008ee:	f7ff ffb5 	bl	800085c <home_up>
			}
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000dc 	.word	0x200000dc
 8000900:	200000e0 	.word	0x200000e0
 8000904:	200000e8 	.word	0x200000e8

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_MspInit+0x5c>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <HAL_MspInit+0x5c>)
 8000914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000918:	6253      	str	r3, [r2, #36]	; 0x24
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_MspInit+0x5c>)
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x5c>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x5c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6213      	str	r3, [r2, #32]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x5c>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x5c>)
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x5c>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6253      	str	r3, [r2, #36]	; 0x24
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x5c>)
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000956:	2007      	movs	r0, #7
 8000958:	f001 f812 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <HardFault_Handler+0x4>

0800097a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <BusFault_Handler+0x4>

08000986 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f9b8 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <ADC1_IRQHandler+0x10>)
 80009c2:	f000 fc2a 	bl	800121a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80009d4:	2040      	movs	r0, #64	; 0x40
 80009d6:	f001 fa15 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80009da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009de:	f001 fa11 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USART1_IRQHandler+0x10>)
 80009ee:	f002 f939 	bl	8002c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000f4 	.word	0x200000f4

080009fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <USART2_IRQHandler+0x10>)
 8000a02:	f002 f92f 	bl	8002c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000134 	.word	0x20000134

08000a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a18:	f001 f9f4 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <SystemInit+0x5c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <SystemInit+0x5c>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <SystemInit+0x5c>)
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <SystemInit+0x5c>)
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <SystemInit+0x60>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <SystemInit+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <SystemInit+0x5c>)
 8000a42:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000a46:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000a4a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <SystemInit+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SystemInit+0x5c>)
 8000a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a56:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x5c>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x5c>)
 8000a5e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000a62:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SystemInit+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x64>)
 8000a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a70:	609a      	str	r2, [r3, #8]
#endif
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	88ffc00c 	.word	0x88ffc00c
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f002 f82e 	bl	8002b20 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f7ff fdc7 	bl	800065c <Error_Handler>
  }

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000f4 	.word	0x200000f4
 8000ad8:	40013800 	.word	0x40013800

08000adc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART2_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f002 f804 	bl	8002b20 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f7ff fd9d 	bl	800065c <Error_Handler>
  }

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000134 	.word	0x20000134
 8000b2c:	40004400 	.word	0x40004400

08000b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <HAL_UART_MspInit+0xf8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d131      	bne.n	8000bb6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	4a35      	ldr	r2, [pc, #212]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6213      	str	r3, [r2, #32]
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b94:	2307      	movs	r3, #7
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4824      	ldr	r0, [pc, #144]	; (8000c30 <HAL_UART_MspInit+0x100>)
 8000ba0:	f000 ff70 	bl	8001a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2025      	movs	r0, #37	; 0x25
 8000baa:	f000 fef4 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bae:	2025      	movs	r0, #37	; 0x25
 8000bb0:	f000 ff0d 	bl	80019ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb4:	e034      	b.n	8000c20 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x104>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d12f      	bne.n	8000c20 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bca:	6253      	str	r3, [r2, #36]	; 0x24
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	61d3      	str	r3, [r2, #28]
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c00:	2307      	movs	r3, #7
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_UART_MspInit+0x100>)
 8000c0c:	f000 ff3a 	bl	8001a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2026      	movs	r0, #38	; 0x26
 8000c16:	f000 febe 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c1a:	2026      	movs	r0, #38	; 0x26
 8000c1c:	f000 fed7 	bl	80019ce <HAL_NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40004400 	.word	0x40004400

08000c38 <Reset_Handler>:
 8000c38:	2100      	movs	r1, #0
 8000c3a:	e003      	b.n	8000c44 <LoopCopyDataInit>

08000c3c <CopyDataInit>:
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <LoopFillZerobss+0x14>)
 8000c3e:	585b      	ldr	r3, [r3, r1]
 8000c40:	5043      	str	r3, [r0, r1]
 8000c42:	3104      	adds	r1, #4

08000c44 <LoopCopyDataInit>:
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <LoopFillZerobss+0x18>)
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <LoopFillZerobss+0x1c>)
 8000c48:	1842      	adds	r2, r0, r1
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3f6      	bcc.n	8000c3c <CopyDataInit>
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopFillZerobss+0x20>)
 8000c50:	e002      	b.n	8000c58 <LoopFillZerobss>

08000c52 <FillZerobss>:
 8000c52:	2300      	movs	r3, #0
 8000c54:	f842 3b04 	str.w	r3, [r2], #4

08000c58 <LoopFillZerobss>:
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <LoopFillZerobss+0x24>)
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3f9      	bcc.n	8000c52 <FillZerobss>
 8000c5e:	f7ff fedf 	bl	8000a20 <SystemInit>
 8000c62:	f002 fbb5 	bl	80033d0 <__libc_init_array>
 8000c66:	f7ff fc69 	bl	800053c <main>
 8000c6a:	4770      	bx	lr
 8000c6c:	0800346c 	.word	0x0800346c
 8000c70:	20000000 	.word	0x20000000
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	20000178 	.word	0x20000178

08000c80 <COMP_ACQ_IRQHandler>:
 8000c80:	e7fe      	b.n	8000c80 <COMP_ACQ_IRQHandler>

08000c82 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 fe77 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe30 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_InitTick+0x68>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d022      	beq.n	8000d0e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_InitTick+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fe84 	bl	80019ea <HAL_SYSTICK_Config>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10f      	bne.n	8000d08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d809      	bhi.n	8000d02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf6:	f000 fe4e 	bl	8001996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_InitTick+0x70>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e004      	b.n	8000d12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e001      	b.n	8000d12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_IncTick+0x1c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x20>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <HAL_IncTick+0x1c>)
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000174 	.word	0x20000174
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <HAL_GetTick+0x10>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000174 	.word	0x20000174

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff fff0 	bl	8000d4c <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d004      	beq.n	8000d84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_Delay+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d84:	bf00      	nop
 8000d86:	f7ff ffe1 	bl	8000d4c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d8f7      	bhi.n	8000d86 <HAL_Delay+0x26>
  {
  }
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e127      	b.n	8001014 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d115      	bne.n	8000dfe <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	4b8e      	ldr	r3, [pc, #568]	; (800101c <HAL_ADC_Init+0x278>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a8d      	ldr	r2, [pc, #564]	; (800101c <HAL_ADC_Init+0x278>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6213      	str	r3, [r2, #32]
 8000dec:	4b8b      	ldr	r3, [pc, #556]	; (800101c <HAL_ADC_Init+0x278>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fa19 	bl	8000230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 80ff 	bne.w	800100a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e14:	f023 0302 	bic.w	r3, r3, #2
 8000e18:	f043 0202 	orr.w	r2, r3, #2
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000e20:	4b7f      	ldr	r3, [pc, #508]	; (8001020 <HAL_ADC_Init+0x27c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	497c      	ldr	r1, [pc, #496]	; (8001020 <HAL_ADC_Init+0x27c>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e3a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e42:	4619      	mov	r1, r3
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000e5e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	fab3 f383 	clz	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000e86:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d007      	beq.n	8000ea6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb0:	2b40      	cmp	r3, #64	; 0x40
 8000eb2:	d04f      	beq.n	8000f54 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ec6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6912      	ldr	r2, [r2, #16]
 8000ecc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000ed0:	d003      	beq.n	8000eda <HAL_ADC_Init+0x136>
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6912      	ldr	r2, [r2, #16]
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	d102      	bne.n	8000ee0 <HAL_ADC_Init+0x13c>
 8000eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ede:	e000      	b.n	8000ee2 <HAL_ADC_Init+0x13e>
 8000ee0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000ee2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d125      	bne.n	8000f40 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d114      	bne.n	8000f28 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	fa92 f2a2 	rbit	r2, r2
 8000f10:	617a      	str	r2, [r7, #20]
  return result;
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	fab2 f282 	clz	r2, r2
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f22:	4313      	orrs	r3, r2
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <HAL_ADC_Init+0x280>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_ADC_Init+0x284>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0x1d6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d119      	bne.n	8000fae <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	fa92 f2a2 	rbit	r2, r2
 8000f96:	60fa      	str	r2, [r7, #12]
  return result;
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	fa03 f202 	lsl.w	r2, r3, r2
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
 8000fac:	e007      	b.n	8000fbe <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_ADC_Init+0x288>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f023 0303 	bic.w	r3, r3, #3
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fe4:	e014      	b.n	8001010 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f023 0312 	bic.w	r3, r3, #18
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001008:	e002      	b.n	8001010 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001014:	4618      	mov	r0, r3
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40012700 	.word	0x40012700
 8001024:	fcfc16ff 	.word	0xfcfc16ff
 8001028:	c0fff189 	.word	0xc0fff189
 800102c:	bf80fffe 	.word	0xbf80fffe

08001030 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_ADC_Start+0x1a>
 8001046:	2302      	movs	r3, #2
 8001048:	e04e      	b.n	80010e8 <HAL_ADC_Start+0xb8>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fb68 	bl	8001728 <ADC_Enable>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d141      	bne.n	80010e6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010a0:	d106      	bne.n	80010b0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a6:	f023 0206 	bic.w	r2, r3, #6
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	651a      	str	r2, [r3, #80]	; 0x50
 80010ae:	e002      	b.n	80010b6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010c6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110c:	d113      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800111c:	d10b      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e061      	b.n	80011fa <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001136:	f7ff fe09 	bl	8000d4c <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800113c:	e01a      	b.n	8001174 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d016      	beq.n	8001174 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_ADC_PollForConversion+0x6c>
 800114c:	f7ff fdfe 	bl	8000d4c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d20b      	bcs.n	8001174 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f043 0204 	orr.w	r2, r3, #4
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e042      	b.n	80011fa <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0dd      	beq.n	800113e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f06f 0212 	mvn.w	r2, #18
 8001192:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d124      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11f      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b20      	cmp	r3, #32
 800122e:	d14e      	bne.n	80012ce <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b02      	cmp	r3, #2
 800123c:	d147      	bne.n	80012ce <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d12c      	bne.n	80012be <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d127      	bne.n	80012be <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001286:	2b00      	cmp	r3, #0
 8001288:	d119      	bne.n	80012be <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0220 	bic.w	r2, r2, #32
 8001298:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f8ab 	bl	800141a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0212 	mvn.w	r2, #18
 80012cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d8:	2b80      	cmp	r3, #128	; 0x80
 80012da:	d15c      	bne.n	8001396 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d155      	bne.n	8001396 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d13a      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001328:	2b00      	cmp	r3, #0
 800132a:	d12c      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	d125      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d11e      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d119      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa24 	bl	80017d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f06f 020c 	mvn.w	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a0:	2b40      	cmp	r3, #64	; 0x40
 80013a2:	d114      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10d      	bne.n	80013ce <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f834 	bl	800142c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f06f 0201 	mvn.w	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013dc:	d119      	bne.n	8001412 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	d112      	bne.n	8001412 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0220 	mvn.w	r2, #32
 8001400:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f81b 	bl	800143e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f06f 0220 	mvn.w	r2, #32
 8001410:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x20>
 800146c:	2302      	movs	r3, #2
 800146e:	e14f      	b.n	8001710 <HAL_ADC_ConfigChannel+0x2c0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b06      	cmp	r3, #6
 800147e:	d81c      	bhi.n	80014ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	3b05      	subs	r3, #5
 8001492:	221f      	movs	r2, #31
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b05      	subs	r3, #5
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
 80014b8:	e07e      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d81c      	bhi.n	80014fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b23      	subs	r3, #35	; 0x23
 80014d4:	221f      	movs	r2, #31
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	4019      	ands	r1, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b23      	subs	r3, #35	; 0x23
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014fa:	e05d      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b12      	cmp	r3, #18
 8001502:	d81c      	bhi.n	800153e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b41      	subs	r3, #65	; 0x41
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	4019      	ands	r1, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b41      	subs	r3, #65	; 0x41
 8001530:	fa00 f203 	lsl.w	r2, r0, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
 800153c:	e03c      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b18      	cmp	r3, #24
 8001544:	d81c      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b5f      	subs	r3, #95	; 0x5f
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	4019      	ands	r1, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b5f      	subs	r3, #95	; 0x5f
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
 800157e:	e01b      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b7d      	subs	r3, #125	; 0x7d
 8001592:	221f      	movs	r2, #31
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4019      	ands	r1, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b7d      	subs	r3, #125	; 0x7d
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d81a      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6959      	ldr	r1, [r3, #20]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	2207      	movs	r2, #7
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	4019      	ands	r1, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6898      	ldr	r0, [r3, #8]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	e05d      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b13      	cmp	r3, #19
 80015fc:	d81c      	bhi.n	8001638 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6919      	ldr	r1, [r3, #16]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	3b1e      	subs	r3, #30
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	4019      	ands	r1, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6898      	ldr	r0, [r3, #8]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1e      	subs	r3, #30
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	e03c      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b1d      	cmp	r3, #29
 800163e:	d81c      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b3c      	subs	r3, #60	; 0x3c
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6898      	ldr	r0, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	3b3c      	subs	r3, #60	; 0x3c
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e01b      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	3b5a      	subs	r3, #90	; 0x5a
 800168c:	2207      	movs	r2, #7
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	4019      	ands	r1, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6898      	ldr	r0, [r3, #8]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	3b5a      	subs	r3, #90	; 0x5a
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d003      	beq.n	80016c2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016be:	2b11      	cmp	r3, #17
 80016c0:	d121      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_ADC_ConfigChannel+0x2cc>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11b      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_ADC_ConfigChannel+0x2cc>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_ADC_ConfigChannel+0x2cc>)
 80016d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d8:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d111      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_ADC_ConfigChannel+0x2d0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_ADC_ConfigChannel+0x2d4>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	0c9a      	lsrs	r2, r3, #18
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80016f8:	e002      	b.n	8001700 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40012700 	.word	0x40012700
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83

08001728 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001742:	2b40      	cmp	r3, #64	; 0x40
 8001744:	d03c      	beq.n	80017c0 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <ADC_Enable+0xa4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <ADC_Enable+0xa8>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	0c9a      	lsrs	r2, r3, #18
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800176a:	e002      	b.n	8001772 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3b01      	subs	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001778:	f7ff fae8 	bl	8000d4c <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800177e:	e018      	b.n	80017b2 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001780:	f7ff fae4 	bl	8000d4c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d911      	bls.n	80017b2 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e007      	b.n	80017c2 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b40      	cmp	r3, #64	; 0x40
 80017be:	d1df      	bne.n	8001780 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83

080017d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d005      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e029      	b.n	8001a7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 020e 	bic.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 021c 	and.w	r2, r3, #28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
    }
  }
  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a9a:	e160      	b.n	8001d5e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8152 	beq.w	8001d58 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d00b      	beq.n	8001b60 <HAL_GPIO_Init+0xdc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d007      	beq.n	8001b60 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b54:	2b11      	cmp	r3, #17
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80ac 	beq.w	8001d58 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a5c      	ldr	r2, [pc, #368]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d025      	beq.n	8001c90 <HAL_GPIO_Init+0x20c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01f      	beq.n	8001c8c <HAL_GPIO_Init+0x208>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d019      	beq.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x308>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x200>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1fc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1f8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4a      	ldr	r2, [pc, #296]	; (8001d98 <HAL_GPIO_Init+0x314>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1f4>
 8001c74:	2306      	movs	r3, #6
 8001c76:	e00c      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c78:	2307      	movs	r3, #7
 8001c7a:	e00a      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	e008      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c84:	2303      	movs	r3, #3
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x20e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f ae97 	bne.w	8001a9c <HAL_GPIO_Init+0x18>
  } 
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40021400 	.word	0x40021400
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001dbc:	e003      	b.n	8001dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fc20 	bl	8000668 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e10f      	b.n	8002066 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fb2a 	bl	80004b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e78:	f000 fdca 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8001e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d807      	bhi.n	8001e98 <HAL_I2C_Init+0x64>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7a      	ldr	r2, [pc, #488]	; (8002074 <HAL_I2C_Init+0x240>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e006      	b.n	8001ea6 <HAL_I2C_Init+0x72>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a77      	ldr	r2, [pc, #476]	; (8002078 <HAL_I2C_Init+0x244>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	bf94      	ite	ls
 8001ea0:	2301      	movls	r3, #1
 8001ea2:	2300      	movhi	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0db      	b.n	8002066 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a72      	ldr	r2, [pc, #456]	; (800207c <HAL_I2C_Init+0x248>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0c9b      	lsrs	r3, r3, #18
 8001eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a64      	ldr	r2, [pc, #400]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_I2C_Init+0xb4>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	e009      	b.n	8001efc <HAL_I2C_Init+0xc8>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_I2C_Init+0x24c>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	3301      	adds	r3, #1
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4956      	ldr	r1, [pc, #344]	; (8002070 <HAL_I2C_Init+0x23c>)
 8001f18:	428b      	cmp	r3, r1
 8001f1a:	d80d      	bhi.n	8001f38 <HAL_I2C_Init+0x104>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e59      	subs	r1, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	bf38      	it	cc
 8001f34:	2304      	movcc	r3, #4
 8001f36:	e04f      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <HAL_I2C_Init+0x130>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e012      	b.n	8001f8a <HAL_I2C_Init+0x156>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x15e>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e022      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10e      	bne.n	8001fb8 <HAL_I2C_Init+0x184>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e58      	subs	r0, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	440b      	add	r3, r1
 8001fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Init+0x1a4>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	0099      	lsls	r1, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	6809      	ldr	r1, [r1, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6911      	ldr	r1, [r2, #16]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	000186a0 	.word	0x000186a0
 8002074:	001e847f 	.word	0x001e847f
 8002078:	003d08ff 	.word	0x003d08ff
 800207c:	431bde83 	.word	0x431bde83
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e31d      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a0:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07b      	beq.n	80021ae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d006      	beq.n	80020ca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d10f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5e>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d10b      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ca:	4b87      	ldr	r3, [pc, #540]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d06a      	beq.n	80021ac <HAL_RCC_OscConfig+0x128>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d166      	bne.n	80021ac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e2f7      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x74>
 80020ea:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7e      	ldr	r2, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e02d      	b.n	8002154 <HAL_RCC_OscConfig+0xd0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x96>
 8002100:	4b79      	ldr	r3, [pc, #484]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a78      	ldr	r2, [pc, #480]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0xd0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0xb8>
 8002122:	4b71      	ldr	r3, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a70      	ldr	r2, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6d      	ldr	r2, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xd0>
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fdf6 	bl	8000d4c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe fdf2 	bl	8000d4c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e2ad      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002176:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xe0>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fde2 	bl	8000d4c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fdde 	bl	8000d4c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e299      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800219e:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x108>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d05a      	beq.n	8002270 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d005      	beq.n	80021cc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d119      	bne.n	80021fa <HAL_RCC_OscConfig+0x176>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x160>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e276      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	493d      	ldr	r1, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f8:	e03a      	b.n	8002270 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d020      	beq.n	8002244 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x268>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fda0 	bl	8000d4c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe fd9c 	bl	8000d4c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e257      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	492a      	ldr	r1, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
 8002242:	e015      	b.n	8002270 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x268>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fd7f 	bl	8000d4c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe fd7b 	bl	8000d4c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e236      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b8 	beq.w	80023ee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d170      	bne.n	8002366 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x218>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e21a      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d921      	bls.n	80022f0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fbd5 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e208      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4906      	ldr	r1, [pc, #24]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	4901      	ldr	r1, [pc, #4]	; (80022e8 <HAL_RCC_OscConfig+0x264>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e020      	b.n	800232a <HAL_RCC_OscConfig+0x2a6>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4ba4      	ldr	r3, [pc, #656]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	49a1      	ldr	r1, [pc, #644]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	499c      	ldr	r1, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fba0 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1d3      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	0b5b      	lsrs	r3, r3, #13
 8002330:	3301      	adds	r3, #1
 8002332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800233a:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800233c:	6892      	ldr	r2, [r2, #8]
 800233e:	0912      	lsrs	r2, r2, #4
 8002340:	f002 020f 	and.w	r2, r2, #15
 8002344:	4990      	ldr	r1, [pc, #576]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002346:	5c8a      	ldrb	r2, [r1, r2]
 8002348:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800234a:	4a90      	ldr	r2, [pc, #576]	; (800258c <HAL_RCC_OscConfig+0x508>)
 800234c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234e:	4b90      	ldr	r3, [pc, #576]	; (8002590 <HAL_RCC_OscConfig+0x50c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fcae 	bl	8000cb4 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d045      	beq.n	80023ee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	e1b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d029      	beq.n	80023c2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_OscConfig+0x510>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fcea 	bl	8000d4c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237c:	f7fe fce6 	bl	8000d4c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1a1      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800238e:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4977      	ldr	r1, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ac:	4b75      	ldr	r3, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	4972      	ldr	r1, [pc, #456]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x510>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fcc0 	bl	8000d4c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d0:	f7fe fcbc 	bl	8000d4c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e177      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023e2:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x514>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fca0 	bl	8000d4c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fc9c 	bl	8000d4c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e157      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x38c>
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x514>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fc89 	bl	8000d4c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7fe fc85 	bl	8000d4c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e140      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80b5 	beq.w	80025d4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b45      	ldr	r3, [pc, #276]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	4a41      	ldr	r2, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6253      	str	r3, [r2, #36]	; 0x24
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x518>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_RCC_OscConfig+0x518>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3d      	ldr	r2, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x518>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fc4d 	bl	8000d4c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fc49 	bl	8000d4c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e104      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_OscConfig+0x518>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x466>
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6353      	str	r3, [r2, #52]	; 0x34
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x4c2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x488>
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	4a23      	ldr	r2, [pc, #140]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 80024f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024fc:	6353      	str	r3, [r2, #52]	; 0x34
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	4a20      	ldr	r2, [pc, #128]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002508:	6353      	str	r3, [r2, #52]	; 0x34
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x4c2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x4aa>
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6353      	str	r3, [r2, #52]	; 0x34
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6353      	str	r3, [r2, #52]	; 0x34
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x4c2>
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002538:	6353      	str	r3, [r2, #52]	; 0x34
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 8002540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002544:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe fbfd 	bl	8000d4c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fbf9 	bl	8000d4c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b2      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_OscConfig+0x500>)
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x4d2>
 8002578:	e023      	b.n	80025c2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fbe7 	bl	8000d4c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002580:	e019      	b.n	80025b6 <HAL_RCC_OscConfig+0x532>
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	0800344c 	.word	0x0800344c
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004
 8002594:	42470020 	.word	0x42470020
 8002598:	42470680 	.word	0x42470680
 800259c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe fbd4 	bl	8000d4c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e08d      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ee      	bne.n	80025a0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	4a43      	ldr	r2, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d079      	beq.n	80026d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d056      	beq.n	8002690 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d13b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_RCC_OscConfig+0x65c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fbac 	bl	8000d4c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fba8 	bl	8000d4c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e063      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4319      	orrs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	430b      	orrs	r3, r1
 800262e:	492b      	ldr	r1, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x65c>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fb87 	bl	8000d4c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fb83 	bl	8000d4c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03e      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x5be>
 8002660:	e036      	b.n	80026d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_OscConfig+0x65c>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fb70 	bl	8000d4c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fb6c 	bl	8000d4c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e027      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x5ec>
 800268e:	e01f      	b.n	80026d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCC_OscConfig+0x658>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10d      	bne.n	80026cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470060 	.word	0x42470060

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e11a      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d919      	bls.n	800273a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_ClockConfig+0x34>
 800270c:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a89      	ldr	r2, [pc, #548]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 0201 	bic.w	r2, r3, #1
 8002720:	4985      	ldr	r1, [pc, #532]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002728:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0f9      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	497a      	ldr	r1, [pc, #488]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 808e 	beq.w	8002882 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276e:	4b73      	ldr	r3, [pc, #460]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0d7      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002786:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0cb      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0bf      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0b7      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	495c      	ldr	r1, [pc, #368]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fabc 	bl	8000d4c <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe fab4 	bl	8000d4c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e09b      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f6:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xfc>
 8002802:	e03e      	b.n	8002882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d112      	bne.n	8002832 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280e:	f7fe fa9d 	bl	8000d4c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e084      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_ClockConfig+0x12a>
 8002830:	e027      	b.n	8002882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11d      	bne.n	8002876 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fa86 	bl	8000d4c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e06d      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b04      	cmp	r3, #4
 800285c:	d1ee      	bne.n	800283c <HAL_RCC_ClockConfig+0x158>
 800285e:	e010      	b.n	8002882 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fa74 	bl	8000d4c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e05b      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ee      	bne.n	8002860 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d219      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1be>
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 0201 	bic.w	r2, r3, #1
 80028aa:	4923      	ldr	r1, [pc, #140]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_ClockConfig+0x254>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e034      	b.n	800292e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4917      	ldr	r1, [pc, #92]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490f      	ldr	r1, [pc, #60]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002902:	f000 f823 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCC_ClockConfig+0x258>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	fa21 f303 	lsr.w	r3, r1, r3
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_ClockConfig+0x264>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f9c6 	bl	8000cb4 <HAL_InitTick>
 8002928:	4603      	mov	r3, r0
 800292a:	72fb      	strb	r3, [r7, #11]

  return status;
 800292c:	7afb      	ldrb	r3, [r7, #11]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	0800344c 	.word	0x0800344c
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d006      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x24>
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d007      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x2a>
 8002966:	2b04      	cmp	r3, #4
 8002968:	d12c      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800296c:	613b      	str	r3, [r7, #16]
      break;
 800296e:	e037      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002970:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002972:	613b      	str	r3, [r7, #16]
      break;
 8002974:	e034      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	0c9b      	lsrs	r3, r3, #18
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	0d9b      	lsrs	r3, r3, #22
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	3301      	adds	r3, #1
 800298e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80029a0:	fb02 f203 	mul.w	r2, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e007      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b2:	fb02 f203 	mul.w	r2, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	613b      	str	r3, [r7, #16]
      break;
 80029c2:	e00d      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0b5b      	lsrs	r3, r3, #13
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	613b      	str	r3, [r7, #16]
      break;
 80029de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e0:	693b      	ldr	r3, [r7, #16]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40023800 	.word	0x40023800
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	08003440 	.word	0x08003440

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	0800345c 	.word	0x0800345c

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a40:	4601      	mov	r1, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0adb      	lsrs	r3, r3, #11
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	0800345c 	.word	0x0800345c

08002a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d12c      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e016      	b.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6253      	str	r3, [r2, #36]	; 0x24
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ab0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ac4:	d105      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002acc:	d101      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 0201 	bic.w	r2, r3, #1
 8002aec:	490b      	ldr	r1, [pc, #44]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e03f      	b.n	8002bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fff2 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 faab 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d140      	bne.n	8002c56 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_Receive_IT+0x26>
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e039      	b.n	8002c58 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Receive_IT+0x38>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e032      	b.n	8002c58 <HAL_UART_Receive_IT+0x9e>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2222      	movs	r2, #34	; 0x22
 8002c16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c30:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x52>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f984 	bl	8002fbc <UART_Receive_IT>
      return;
 8002cb4:	e0cc      	b.n	8002e50 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80ab 	beq.w	8002e14 <HAL_UART_IRQHandler+0x1b0>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x70>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a0 	beq.w	8002e14 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x90>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_UART_IRQHandler+0xb0>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_UART_IRQHandler+0xd0>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_UART_IRQHandler+0xf0>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f043 0208 	orr.w	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d078      	beq.n	8002e4e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_UART_IRQHandler+0x112>
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f923 	bl	8002fbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_UART_IRQHandler+0x13a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d031      	beq.n	8002e02 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f86e 	bl	8002e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d123      	bne.n	8002dfa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_UART_IRQHandler+0x1f4>)
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fe13 	bl	8001a02 <HAL_DMA_Abort_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d016      	beq.n	8002e10 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dec:	4610      	mov	r0, r2
 8002dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	e00e      	b.n	8002e10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f83b 	bl	8002e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	e00a      	b.n	8002e10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f837 	bl	8002e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e006      	b.n	8002e10 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f833 	bl	8002e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e0e:	e01e      	b.n	8002e4e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	bf00      	nop
    return;
 8002e12:	e01c      	b.n	8002e4e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_UART_IRQHandler+0x1cc>
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f85a 	bl	8002ee2 <UART_Transmit_IT>
    return;
 8002e2e:	e00f      	b.n	8002e50 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_UART_IRQHandler+0x1ec>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8a1 	bl	8002f8c <UART_EndTransmit_IT>
    return;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e4e:	bf00      	nop
  }
}
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	08002ebb 	.word	0x08002ebb

08002e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff ffca 	bl	8002e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b21      	cmp	r3, #33	; 0x21
 8002ef4:	d144      	bne.n	8002f80 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d11a      	bne.n	8002f36 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f14:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	621a      	str	r2, [r3, #32]
 8002f28:	e00e      	b.n	8002f48 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e008      	b.n	8002f48 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6211      	str	r1, [r2, #32]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4619      	mov	r1, r3
 8002f56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff55 	bl	8002e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b22      	cmp	r3, #34	; 0x22
 8002fce:	d171      	bne.n	80030b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd8:	d123      	bne.n	8003022 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10e      	bne.n	8003006 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
 8003004:	e029      	b.n	800305a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	b29b      	uxth	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
 8003020:	e01b      	b.n	800305a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6858      	ldr	r0, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	1c59      	adds	r1, r3, #1
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6291      	str	r1, [r2, #40]	; 0x28
 800303a:	b2c2      	uxtb	r2, r0
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e00c      	b.n	800305a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	1c58      	adds	r0, r3, #1
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6288      	str	r0, [r1, #40]	; 0x28
 8003052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800306a:	2b00      	cmp	r3, #0
 800306c:	d120      	bne.n	80030b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0220 	bic.w	r2, r2, #32
 800307c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fabe 	bl	8000628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003100:	f023 030c 	bic.w	r3, r3, #12
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	430b      	orrs	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	f040 80a5 	bne.w	800327a <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4aa4      	ldr	r2, [pc, #656]	; (80033c8 <UART_SetConfig+0x308>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d14f      	bne.n	80031da <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800313a:	f7ff fc7d 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 800313e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009a      	lsls	r2, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4a9d      	ldr	r2, [pc, #628]	; (80033cc <UART_SetConfig+0x30c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	0119      	lsls	r1, r3, #4
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009a      	lsls	r2, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fbb2 f2f3 	udiv	r2, r2, r3
 8003176:	4b95      	ldr	r3, [pc, #596]	; (80033cc <UART_SetConfig+0x30c>)
 8003178:	fba3 0302 	umull	r0, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	2064      	movs	r0, #100	; 0x64
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3332      	adds	r3, #50	; 0x32
 800318a:	4a90      	ldr	r2, [pc, #576]	; (80033cc <UART_SetConfig+0x30c>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003198:	4419      	add	r1, r3
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b0:	4b86      	ldr	r3, [pc, #536]	; (80033cc <UART_SetConfig+0x30c>)
 80031b2:	fba3 0302 	umull	r0, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2064      	movs	r0, #100	; 0x64
 80031ba:	fb00 f303 	mul.w	r3, r0, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3332      	adds	r3, #50	; 0x32
 80031c4:	4a81      	ldr	r2, [pc, #516]	; (80033cc <UART_SetConfig+0x30c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	f003 0207 	and.w	r2, r3, #7
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	440a      	add	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031d8:	e0f1      	b.n	80033be <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031da:	f7ff fc19 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80031de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <UART_SetConfig+0x30c>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	0119      	lsls	r1, r3, #4
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009a      	lsls	r2, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fbb2 f2f3 	udiv	r2, r2, r3
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <UART_SetConfig+0x30c>)
 8003218:	fba3 0302 	umull	r0, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2064      	movs	r0, #100	; 0x64
 8003220:	fb00 f303 	mul.w	r3, r0, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a68      	ldr	r2, [pc, #416]	; (80033cc <UART_SetConfig+0x30c>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003238:	4419      	add	r1, r3
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <UART_SetConfig+0x30c>)
 8003252:	fba3 0302 	umull	r0, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2064      	movs	r0, #100	; 0x64
 800325a:	fb00 f303 	mul.w	r3, r0, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	3332      	adds	r3, #50	; 0x32
 8003264:	4a59      	ldr	r2, [pc, #356]	; (80033cc <UART_SetConfig+0x30c>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 0207 	and.w	r2, r3, #7
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	440a      	add	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	e0a1      	b.n	80033be <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <UART_SetConfig+0x308>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d14e      	bne.n	8003322 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fbd8 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003288:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <UART_SetConfig+0x30c>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	0119      	lsls	r1, r3, #4
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <UART_SetConfig+0x30c>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <UART_SetConfig+0x30c>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	4419      	add	r1, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b34      	ldr	r3, [pc, #208]	; (80033cc <UART_SetConfig+0x30c>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <UART_SetConfig+0x30c>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	440a      	add	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	e04d      	b.n	80033be <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7ff fb75 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8003326:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009a      	lsls	r2, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <UART_SetConfig+0x30c>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	0119      	lsls	r1, r3, #4
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fbb2 f2f3 	udiv	r2, r2, r3
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <UART_SetConfig+0x30c>)
 8003360:	fba3 0302 	umull	r0, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	fb00 f303 	mul.w	r3, r0, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <UART_SetConfig+0x30c>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337e:	4419      	add	r1, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	fbb2 f2f3 	udiv	r2, r2, r3
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x30c>)
 8003398:	fba3 0302 	umull	r0, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2064      	movs	r0, #100	; 0x64
 80033a0:	fb00 f303 	mul.w	r3, r0, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x30c>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	440a      	add	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40013800 	.word	0x40013800
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2500      	movs	r5, #0
 80033d4:	4e0c      	ldr	r6, [pc, #48]	; (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d8:	1ba4      	subs	r4, r4, r6
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a5      	cmp	r5, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	f000 f822 	bl	8003428 <_init>
 80033e4:	2500      	movs	r5, #0
 80033e6:	4e0a      	ldr	r6, [pc, #40]	; (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <__libc_init_array+0x44>)
 80033ea:	1ba4      	subs	r4, r4, r6
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a5      	cmp	r5, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f8:	4798      	blx	r3
 80033fa:	3501      	adds	r5, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003402:	4798      	blx	r3
 8003404:	3501      	adds	r5, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08003464 	.word	0x08003464
 800340c:	08003464 	.word	0x08003464
 8003410:	08003464 	.word	0x08003464
 8003414:	08003468 	.word	0x08003468

08003418 <memset>:
 8003418:	4603      	mov	r3, r0
 800341a:	4402      	add	r2, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	d100      	bne.n	8003422 <memset+0xa>
 8003420:	4770      	bx	lr
 8003422:	f803 1b01 	strb.w	r1, [r3], #1
 8003426:	e7f9      	b.n	800341c <memset+0x4>

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
