
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003148  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a8  080032a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080032a8  080032a8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a8  080032a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080032b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  080032c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080032c0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000989b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eec  00000000  00000000  000298d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002c070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016354  00000000  00000000  0002c808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f08  00000000  00000000  00042b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089d21  00000000  00000000  0004ba64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002070  00000000  00000000  000d5800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	0800326c 	.word	0x0800326c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	0800326c 	.word	0x0800326c

0800017c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <MX_ADC_Init+0xac>)
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <MX_ADC_Init+0xb0>)
 8000190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000192:	4b25      	ldr	r3, [pc, #148]	; (8000228 <MX_ADC_Init+0xac>)
 8000194:	2200      	movs	r2, #0
 8000196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000198:	4b23      	ldr	r3, [pc, #140]	; (8000228 <MX_ADC_Init+0xac>)
 800019a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800019e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_ADC_Init+0xac>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <MX_ADC_Init+0xac>)
 80001a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_ADC_Init+0xac>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80001b4:	4b1c      	ldr	r3, [pc, #112]	; (8000228 <MX_ADC_Init+0xac>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80001ba:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_ADC_Init+0xac>)
 80001bc:	2200      	movs	r2, #0
 80001be:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80001c0:	4b19      	ldr	r3, [pc, #100]	; (8000228 <MX_ADC_Init+0xac>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_ADC_Init+0xac>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <MX_ADC_Init+0xac>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <MX_ADC_Init+0xac>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_ADC_Init+0xac>)
 80001de:	2210      	movs	r2, #16
 80001e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_ADC_Init+0xac>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_ADC_Init+0xac>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <MX_ADC_Init+0xac>)
 80001f2:	f000 fe21 	bl	8000e38 <HAL_ADC_Init>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80001fc:	f000 f9e0 	bl	80005c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000200:	2300      	movs	r3, #0
 8000202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000204:	2301      	movs	r3, #1
 8000206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <MX_ADC_Init+0xac>)
 8000212:	f001 f967 	bl	80014e4 <HAL_ADC_ConfigChannel>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800021c:	f000 f9d0 	bl	80005c0 <Error_Handler>
  }

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000034 	.word	0x20000034
 800022c:	40012400 	.word	0x40012400

08000230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <HAL_ADC_MspInit+0x84>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d12b      	bne.n	80002aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025c:	6213      	str	r3, [r2, #32]
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = FOTODETECTOR_Pin;
 8000282:	2301      	movs	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000286:	2303      	movs	r3, #3
 8000288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FOTODETECTOR_GPIO_Port, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <HAL_ADC_MspInit+0x8c>)
 8000296:	f001 fc3f 	bl	8001b18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	2012      	movs	r0, #18
 80002a0:	f001 fbc3 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80002a4:	2012      	movs	r0, #18
 80002a6:	f001 fbdc 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	; 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40012400 	.word	0x40012400
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <get_value_fotodetector>:

#include "fotodetector.h"


uint8_t get_value_fotodetector()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc);
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <get_value_fotodetector+0x2c>)
 80002c6:	f000 fefd 	bl	80010c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002ca:	f04f 31ff 	mov.w	r1, #4294967295
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d0:	f000 ff58 	bl	8001184 <HAL_ADC_PollForConversion>
		fotodetector_value = HAL_ADC_GetValue(&hadc);
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d6:	f000 ffde 	bl	8001296 <HAL_ADC_GetValue>
 80002da:	4603      	mov	r3, r0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e0:	701a      	strb	r2, [r3, #0]

		 return fotodetector_value;
 80002e2:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e4:	781b      	ldrb	r3, [r3, #0]

}
 80002e6:	4618      	mov	r0, r3
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000034 	.word	0x20000034
 80002f0:	20000088 	.word	0x20000088

080002f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <MX_GPIO_Init+0x14c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a4c      	ldr	r2, [pc, #304]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b4a      	ldr	r3, [pc, #296]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000322:	4b47      	ldr	r3, [pc, #284]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a46      	ldr	r2, [pc, #280]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000328:	f043 0320 	orr.w	r3, r3, #32
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <MX_GPIO_Init+0x14c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a40      	ldr	r2, [pc, #256]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	61d3      	str	r3, [r2, #28]
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b3b      	ldr	r3, [pc, #236]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a3a      	ldr	r2, [pc, #232]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	4835      	ldr	r0, [pc, #212]	; (8000444 <MX_GPIO_Init+0x150>)
 8000370:	f001 fd60 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	4833      	ldr	r0, [pc, #204]	; (8000448 <MX_GPIO_Init+0x154>)
 800037c:	f001 fd5a 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000386:	4831      	ldr	r0, [pc, #196]	; (800044c <MX_GPIO_Init+0x158>)
 8000388:	f001 fd54 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_GPIO_Init+0x15c>)
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	482a      	ldr	r0, [pc, #168]	; (800044c <MX_GPIO_Init+0x158>)
 80003a2:	f001 fbb9 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a6:	2320      	movs	r3, #32
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <MX_GPIO_Init+0x150>)
 80003be:	f001 fbab 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80003c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	481b      	ldr	r0, [pc, #108]	; (8000448 <MX_GPIO_Init+0x154>)
 80003dc:	f001 fb9c 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = END_DOWN_Pin|END_HIGH_Pin;
 80003e0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0x160>)
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <MX_GPIO_Init+0x158>)
 80003f6:	f001 fb8f 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 80003fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_GPIO_Init+0x158>)
 8000414:	f001 fb80 	bl	8001b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2017      	movs	r0, #23
 800041e:	f001 fb04 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000422:	2017      	movs	r0, #23
 8000424:	f001 fb1d 	bl	8001a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2028      	movs	r0, #40	; 0x28
 800042e:	f001 fafc 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f001 fb15 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40023800 	.word	0x40023800
 8000444:	40020000 	.word	0x40020000
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	10110000 	.word	0x10110000
 8000454:	10210000 	.word	0x10210000

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f000 fc5b 	bl	8000d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000460:	f000 f82a 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000464:	f7ff ff46 	bl	80002f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000468:	f000 fb1c 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800046c:	f000 faf0 	bl	8000a50 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000470:	f7ff fe84 	bl	800017c <MX_ADC_Init>
  MX_USART3_UART_Init();
 8000474:	f000 fb40 	bl	8000af8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /**
   * wait for uart command from raspberry
   * huart1 is in exit mode
   */
  HAL_UART_Receive_IT(&huart1, &data, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	490a      	ldr	r1, [pc, #40]	; (80004a4 <main+0x4c>)
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <main+0x50>)
 800047e:	f002 fabe 	bl	80029fe <HAL_UART_Receive_IT>
  /**
   * start adc read
   */
  HAL_ADC_Start(&hadc);
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <main+0x54>)
 8000484:	f000 fe1e 	bl	80010c4 <HAL_ADC_Start>
  /**
   * wait for uart command from admin
   * huart2 is in exit mode
   */
  HAL_UART_Receive_IT(&huart3, &able, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	4909      	ldr	r1, [pc, #36]	; (80004b0 <main+0x58>)
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <main+0x5c>)
 800048e:	f002 fab6 	bl	80029fe <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 auto_fotodetector(get_value_fotodetector());
 8000492:	f7ff ff15 	bl	80002c0 <get_value_fotodetector>
 8000496:	4603      	mov	r3, r0
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f9e9 	bl	8000870 <auto_fotodetector>
	 move_motor();
 800049e:	f000 f945 	bl	800072c <move_motor>
  {
 80004a2:	e7f6      	b.n	8000492 <main+0x3a>
 80004a4:	20000031 	.word	0x20000031
 80004a8:	200000e4 	.word	0x200000e4
 80004ac:	20000034 	.word	0x20000034
 80004b0:	20000030 	.word	0x20000030
 80004b4:	200000a4 	.word	0x200000a4

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b092      	sub	sp, #72	; 0x48
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fec8 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <SystemClock_Config+0x98>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <SystemClock_Config+0x98>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2310      	movs	r3, #16
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000508:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fcda 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800051a:	f000 f851 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	230f      	movs	r3, #15
 8000520:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fff6 	bl	8002528 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000542:	f000 f83d 	bl	80005c0 <Error_Handler>
  }
}
 8000546:	bf00      	nop
 8000548:	3748      	adds	r7, #72	; 0x48
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40007000 	.word	0x40007000

08000554 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * uart take command
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	/**
	 * raspberry uart
	 */
	if(huart->Instance == USART1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <HAL_UART_RxCpltCallback+0x54>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d10c      	bne.n	8000580 <HAL_UART_RxCpltCallback+0x2c>
	{
		new_data(data);
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_UART_RxCpltCallback+0x58>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f86e 	bl	800064c <new_data>
		data = 0;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_UART_RxCpltCallback+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &data, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	490c      	ldr	r1, [pc, #48]	; (80005ac <HAL_UART_RxCpltCallback+0x58>)
 800057a:	480d      	ldr	r0, [pc, #52]	; (80005b0 <HAL_UART_RxCpltCallback+0x5c>)
 800057c:	f002 fa3f 	bl	80029fe <HAL_UART_Receive_IT>
	}
	/**
	 * admin uart
	*/
	if(huart->Instance == USART3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <HAL_UART_RxCpltCallback+0x60>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d109      	bne.n	800059e <HAL_UART_RxCpltCallback+0x4a>
	{
		admin_pc(able);
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_UART_RxCpltCallback+0x64>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f8aa 	bl	80006e8 <admin_pc>
		HAL_UART_Receive_IT(&huart3, &able, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	4908      	ldr	r1, [pc, #32]	; (80005b8 <HAL_UART_RxCpltCallback+0x64>)
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <HAL_UART_RxCpltCallback+0x68>)
 800059a:	f002 fa30 	bl	80029fe <HAL_UART_Receive_IT>
	}

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40013800 	.word	0x40013800
 80005ac:	20000031 	.word	0x20000031
 80005b0:	200000e4 	.word	0x200000e4
 80005b4:	40004800 	.word	0x40004800
 80005b8:	20000030 	.word	0x20000030
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <HAL_GPIO_EXTI_Callback>:

/**
 * function for execute end command
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_DOWN_Pin)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	2b40      	cmp	r3, #64	; 0x40
 80005da:	d112      	bne.n	8000602 <HAL_GPIO_EXTI_Callback+0x36>
	{

		set_position = position = 0;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 80005e8:	701a      	strb	r2, [r3, #0]
		set_position = set_position + 5;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3305      	adds	r3, #5
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 80005f4:	701a      	strb	r2, [r3, #0]
		auto_down = 1;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_GPIO_EXTI_Callback+0x78>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
		auto_up = 0;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]

	}
	if(GPIO_Pin == END_HIGH_Pin)
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000608:	d112      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x64>
		{
			set_position = position = 255;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 800060c:	22ff      	movs	r2, #255	; 0xff
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_GPIO_EXTI_Callback+0x70>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 8000616:	701a      	strb	r2, [r3, #0]
			set_position = set_position - 5;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3b05      	subs	r3, #5
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_GPIO_EXTI_Callback+0x74>)
 8000622:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_GPIO_EXTI_Callback+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
			auto_up = 1;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_GPIO_EXTI_Callback+0x7c>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
		}
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000094 	.word	0x20000094
 8000640:	200000a0 	.word	0x200000a0
 8000644:	20000090 	.word	0x20000090
 8000648:	20000098 	.word	0x20000098

0800064c <new_data>:

void new_data(uint8_t new)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	set_position = position = 100;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <new_data+0x88>)
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <new_data+0x88>)
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <new_data+0x8c>)
 8000662:	701a      	strb	r2, [r3, #0]
	if(new == '1')
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b31      	cmp	r3, #49	; 0x31
 8000668:	d106      	bne.n	8000678 <new_data+0x2c>
	{
		set_position += 5;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <new_data+0x8c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3305      	adds	r3, #5
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <new_data+0x8c>)
 8000674:	701a      	strb	r2, [r3, #0]

			control = 1;
			auto_down = 0;
			auto_up = 0;
		}
}
 8000676:	e028      	b.n	80006ca <new_data+0x7e>
	else if(new == '2')
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b32      	cmp	r3, #50	; 0x32
 800067c:	d106      	bne.n	800068c <new_data+0x40>
		set_position -= 5;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <new_data+0x8c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3b05      	subs	r3, #5
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <new_data+0x8c>)
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	e01e      	b.n	80006ca <new_data+0x7e>
	else if(new == '3')
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b33      	cmp	r3, #51	; 0x33
 8000690:	d102      	bne.n	8000698 <new_data+0x4c>
			home_up();
 8000692:	f000 f8bd 	bl	8000810 <home_up>
}
 8000696:	e018      	b.n	80006ca <new_data+0x7e>
	else if(new == '4')
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b34      	cmp	r3, #52	; 0x34
 800069c:	d102      	bne.n	80006a4 <new_data+0x58>
			home_down();
 800069e:	f000 f8cf 	bl	8000840 <home_down>
}
 80006a2:	e012      	b.n	80006ca <new_data+0x7e>
	else if(new == '6')
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b36      	cmp	r3, #54	; 0x36
 80006a8:	d103      	bne.n	80006b2 <new_data+0x66>
			control = 0;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <new_data+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
}
 80006b0:	e00b      	b.n	80006ca <new_data+0x7e>
	else if(new == '5')
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b35      	cmp	r3, #53	; 0x35
 80006b6:	d108      	bne.n	80006ca <new_data+0x7e>
			control = 1;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <new_data+0x90>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <new_data+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
			auto_up = 0;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <new_data+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000094 	.word	0x20000094
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	20000090 	.word	0x20000090
 80006e4:	20000098 	.word	0x20000098

080006e8 <admin_pc>:


void admin_pc(uint8_t able)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]

	if(able == '0')
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b30      	cmp	r3, #48	; 0x30
 80006f6:	d107      	bne.n	8000708 <admin_pc+0x20>
	{
		set_position = position;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <admin_pc+0x38>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <admin_pc+0x3c>)
 80006fe:	701a      	strb	r2, [r3, #0]
		admin = 1;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <admin_pc+0x40>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	else if(able == '1')
	{
		admin = 0;

	}
}
 8000706:	e005      	b.n	8000714 <admin_pc+0x2c>
	else if(able == '1')
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b31      	cmp	r3, #49	; 0x31
 800070c:	d102      	bne.n	8000714 <admin_pc+0x2c>
		admin = 0;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <admin_pc+0x40>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000094 	.word	0x20000094
 8000724:	200000a0 	.word	0x200000a0
 8000728:	20000000 	.word	0x20000000

0800072c <move_motor>:

void move_motor()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	if(admin == 1)
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <move_motor+0xcc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d15d      	bne.n	80007f4 <move_motor+0xc8>
	{
		if(set_position > position)
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <move_motor+0xd0>)
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <move_motor+0xd4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d925      	bls.n	8000790 <move_motor+0x64>
		{

			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	482e      	ldr	r0, [pc, #184]	; (8000804 <move_motor+0xd8>)
 800074c:	f001 fb72 	bl	8001e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	482c      	ldr	r0, [pc, #176]	; (8000808 <move_motor+0xdc>)
 8000758:	f001 fb6c 	bl	8001e34 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	482a      	ldr	r0, [pc, #168]	; (8000808 <move_motor+0xdc>)
 8000760:	f001 fb80 	bl	8001e64 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fb45 	bl	8000df4 <HAL_Delay>
			++count_position;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <move_motor+0xe0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <move_motor+0xe0>)
 8000772:	6013      	str	r3, [r2, #0]
			if(count_position == 20)
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <move_motor+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b14      	cmp	r3, #20
 800077a:	d13b      	bne.n	80007f4 <move_motor+0xc8>
			{
				++position;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <move_motor+0xd4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <move_motor+0xd4>)
 8000786:	701a      	strb	r2, [r3, #0]
				count_position = 0;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <move_motor+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
		else
		{
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
		}
	}
}
 800078e:	e031      	b.n	80007f4 <move_motor+0xc8>
		 else if(set_position < position)
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <move_motor+0xd0>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <move_motor+0xd4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d225      	bcs.n	80007e8 <move_motor+0xbc>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <move_motor+0xd8>)
 80007a4:	f001 fb46 	bl	8001e34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <move_motor+0xdc>)
 80007b0:	f001 fb40 	bl	8001e34 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <move_motor+0xdc>)
 80007b8:	f001 fb54 	bl	8001e64 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 fb19 	bl	8000df4 <HAL_Delay>
			++count_position;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <move_motor+0xe0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <move_motor+0xe0>)
 80007ca:	6013      	str	r3, [r2, #0]
			if(count_position == 20)
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <move_motor+0xe0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d10f      	bne.n	80007f4 <move_motor+0xc8>
				--position;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <move_motor+0xd4>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <move_motor+0xd4>)
 80007de:	701a      	strb	r2, [r3, #0]
				count_position = 0;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <move_motor+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	e005      	b.n	80007f4 <move_motor+0xc8>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <move_motor+0xd8>)
 80007f0:	f001 fb20 	bl	8001e34 <HAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	200000a0 	.word	0x200000a0
 8000800:	20000094 	.word	0x20000094
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	2000002c 	.word	0x2000002c

08000810 <home_up>:


void home_up()
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
	set_position = position = 0;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <home_up+0x28>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <home_up+0x28>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <home_up+0x2c>)
 8000820:	701a      	strb	r2, [r3, #0]
	set_position += 255;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <home_up+0x2c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <home_up+0x2c>)
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000094 	.word	0x20000094
 800083c:	200000a0 	.word	0x200000a0

08000840 <home_down>:



void home_down()
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	set_position = position = 255;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <home_down+0x28>)
 8000846:	22ff      	movs	r2, #255	; 0xff
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <home_down+0x28>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <home_down+0x2c>)
 8000850:	701a      	strb	r2, [r3, #0]
	set_position -= 255;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <home_down+0x2c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <home_down+0x2c>)
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094
 800086c:	200000a0 	.word	0x200000a0

08000870 <auto_fotodetector>:

void auto_fotodetector(uint8_t auto_foto)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]

	if(control == 1)
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <auto_fotodetector+0x40>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d111      	bne.n	80008a6 <auto_fotodetector+0x36>
	{
		if(auto_down == 0)
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <auto_fotodetector+0x44>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d104      	bne.n	8000894 <auto_fotodetector+0x24>
		{
			if(auto_foto < 190)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2bbd      	cmp	r3, #189	; 0xbd
 800088e:	d801      	bhi.n	8000894 <auto_fotodetector+0x24>
			{
				home_down();
 8000890:	f7ff ffd6 	bl	8000840 <home_down>
			}
		}
		if(auto_up == 0)
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <auto_fotodetector+0x48>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d104      	bne.n	80008a6 <auto_fotodetector+0x36>
		{
			if(auto_foto > 220)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2bdc      	cmp	r3, #220	; 0xdc
 80008a0:	d901      	bls.n	80008a6 <auto_fotodetector+0x36>
			{
				home_up();
 80008a2:	f7ff ffb5 	bl	8000810 <home_up>
			}
		}
	}
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	20000090 	.word	0x20000090
 80008b8:	20000098 	.word	0x20000098

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_MspInit+0x5c>)
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_MspInit+0x5c>)
 80008c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008cc:	6253      	str	r3, [r2, #36]	; 0x24
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_MspInit+0x5c>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x5c>)
 80008dc:	6a1b      	ldr	r3, [r3, #32]
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_MspInit+0x5c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6213      	str	r3, [r2, #32]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_MspInit+0x5c>)
 80008e8:	6a1b      	ldr	r3, [r3, #32]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x5c>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x5c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x5c>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090a:	2007      	movs	r0, #7
 800090c:	f001 f882 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <HardFault_Handler+0x4>

0800092e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <BusFault_Handler+0x4>

0800093a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <UsageFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 fa28 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <ADC1_IRQHandler+0x10>)
 8000976:	f000 fc9a 	bl	80012ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000034 	.word	0x20000034

08000984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	f001 fa85 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800098e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000992:	f001 fa81 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <USART1_IRQHandler+0x10>)
 80009a2:	f002 f881 	bl	8002aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000e4 	.word	0x200000e4

080009b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <USART2_IRQHandler+0x10>)
 80009b6:	f002 f877 	bl	8002aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000124 	.word	0x20000124

080009c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART3_IRQHandler+0x10>)
 80009ca:	f002 f86d 	bl	8002aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000a4 	.word	0x200000a4

080009d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e0:	f001 fa5a 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <SystemInit+0x5c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <SystemInit+0x5c>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <SystemInit+0x5c>)
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	4911      	ldr	r1, [pc, #68]	; (8000a44 <SystemInit+0x5c>)
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <SystemInit+0x60>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <SystemInit+0x5c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <SystemInit+0x5c>)
 8000a0a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000a0e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000a12:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <SystemInit+0x5c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SystemInit+0x5c>)
 8000a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <SystemInit+0x5c>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <SystemInit+0x5c>)
 8000a26:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000a2a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SystemInit+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x64>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	88ffc00c 	.word	0x88ffc00c
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART1_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a88:	f001 ff6c 	bl	8002964 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f7ff fd95 	bl	80005c0 <Error_Handler>
  }

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e4 	.word	0x200000e4
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f001 ff42 	bl	8002964 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f7ff fd6b 	bl	80005c0 <Error_Handler>
  }

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000124 	.word	0x20000124
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART3_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f001 ff18 	bl	8002964 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f7ff fd41 	bl	80005c0 <Error_Handler>
  }

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000a4 	.word	0x200000a4
 8000b48:	40004800 	.word	0x40004800

08000b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a52      	ldr	r2, [pc, #328]	; (8000cb4 <HAL_UART_MspInit+0x168>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d131      	bne.n	8000bd2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6e:	4b52      	ldr	r3, [pc, #328]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4a51      	ldr	r2, [pc, #324]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6213      	str	r3, [r2, #32]
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b4c      	ldr	r3, [pc, #304]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4840      	ldr	r0, [pc, #256]	; (8000cbc <HAL_UART_MspInit+0x170>)
 8000bbc:	f000 ffac 	bl	8001b18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2025      	movs	r0, #37	; 0x25
 8000bc6:	f000 ff30 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bca:	2025      	movs	r0, #37	; 0x25
 8000bcc:	f000 ff49 	bl	8001a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bd0:	e06b      	b.n	8000caa <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a3a      	ldr	r2, [pc, #232]	; (8000cc0 <HAL_UART_MspInit+0x174>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d130      	bne.n	8000c3e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be0:	4a35      	ldr	r2, [pc, #212]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6253      	str	r3, [r2, #36]	; 0x24
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	61d3      	str	r3, [r2, #28]
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4825      	ldr	r0, [pc, #148]	; (8000cbc <HAL_UART_MspInit+0x170>)
 8000c28:	f000 ff76 	bl	8001b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2026      	movs	r0, #38	; 0x26
 8000c32:	f000 fefa 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c36:	2026      	movs	r0, #38	; 0x26
 8000c38:	f000 ff13 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 8000c3c:	e035      	b.n	8000caa <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a20      	ldr	r2, [pc, #128]	; (8000cc4 <HAL_UART_MspInit+0x178>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d130      	bne.n	8000caa <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c52:	6253      	str	r3, [r2, #36]	; 0x24
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	61d3      	str	r3, [r2, #28]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0x16c>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <HAL_UART_MspInit+0x17c>)
 8000c96:	f000 ff3f 	bl	8001b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2027      	movs	r0, #39	; 0x27
 8000ca0:	f000 fec3 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ca4:	2027      	movs	r0, #39	; 0x27
 8000ca6:	f000 fedc 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	; 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <Reset_Handler>:
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopFillZerobss+0x14>)
 8000cd2:	585b      	ldr	r3, [r3, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <LoopFillZerobss+0x18>)
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopFillZerobss+0x1c>)
 8000cdc:	1842      	adds	r2, r0, r1
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x20>)
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LoopFillZerobss+0x24>)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>
 8000cf2:	f7ff fe79 	bl	80009e8 <SystemInit>
 8000cf6:	f002 fa8d 	bl	8003214 <__libc_init_array>
 8000cfa:	f7ff fbad 	bl	8000458 <main>
 8000cfe:	4770      	bx	lr
 8000d00:	080032b0 	.word	0x080032b0
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	20000168 	.word	0x20000168

08000d14 <COMP_ACQ_IRQHandler>:
 8000d14:	e7fe      	b.n	8000d14 <COMP_ACQ_IRQHandler>

08000d16 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fe77 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f80e 	bl	8000d48 <HAL_InitTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e001      	b.n	8000d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d38:	f7ff fdc0 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_InitTick+0x68>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d022      	beq.n	8000da2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_InitTick+0x68>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fe84 	bl	8001a7e <HAL_SYSTICK_Config>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10f      	bne.n	8000d9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	d809      	bhi.n	8000d96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d82:	2200      	movs	r2, #0
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8a:	f000 fe4e 	bl	8001a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_InitTick+0x70>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e004      	b.n	8000da6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e001      	b.n	8000da6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000004 	.word	0x20000004
 8000db8:	20000008 	.word	0x20000008

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x1c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_IncTick+0x1c>)
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000164 	.word	0x20000164
 8000ddc:	2000000c 	.word	0x2000000c

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <HAL_GetTick+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000164 	.word	0x20000164

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff0 	bl	8000de0 <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d004      	beq.n	8000e18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e18:	bf00      	nop
 8000e1a:	f7ff ffe1 	bl	8000de0 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d8f7      	bhi.n	8000e1a <HAL_Delay+0x26>
  {
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e127      	b.n	80010a8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d115      	bne.n	8000e92 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <HAL_ADC_Init+0x278>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a8d      	ldr	r2, [pc, #564]	; (80010b0 <HAL_ADC_Init+0x278>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	4b8b      	ldr	r3, [pc, #556]	; (80010b0 <HAL_ADC_Init+0x278>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff f9cf 	bl	8000230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 80ff 	bne.w	800109e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea8:	f023 0302 	bic.w	r3, r3, #2
 8000eac:	f043 0202 	orr.w	r2, r3, #2
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000eb4:	4b7f      	ldr	r3, [pc, #508]	; (80010b4 <HAL_ADC_Init+0x27c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	497c      	ldr	r1, [pc, #496]	; (80010b4 <HAL_ADC_Init+0x27c>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ece:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000ef2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ef8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000f1a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	d007      	beq.n	8000f3a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f32:	4313      	orrs	r3, r2
 8000f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f36:	4313      	orrs	r3, r2
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f44:	2b40      	cmp	r3, #64	; 0x40
 8000f46:	d04f      	beq.n	8000fe8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000f5a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6912      	ldr	r2, [r2, #16]
 8000f60:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000f64:	d003      	beq.n	8000f6e <HAL_ADC_Init+0x136>
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6912      	ldr	r2, [r2, #16]
 8000f6a:	2a01      	cmp	r2, #1
 8000f6c:	d102      	bne.n	8000f74 <HAL_ADC_Init+0x13c>
 8000f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f72:	e000      	b.n	8000f76 <HAL_ADC_Init+0x13e>
 8000f74:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000f76:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d125      	bne.n	8000fd4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d114      	bne.n	8000fbc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	fa92 f2a2 	rbit	r2, r2
 8000fa4:	617a      	str	r2, [r7, #20]
  return result;
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8000fba:	e00b      	b.n	8000fd4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f043 0220 	orr.w	r2, r3, #32
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_ADC_Init+0x280>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_ADC_Init+0x284>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001004:	d003      	beq.n	800100e <HAL_ADC_Init+0x1d6>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d119      	bne.n	8001042 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	3b01      	subs	r3, #1
 800101e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001022:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	fa92 f2a2 	rbit	r2, r2
 800102a:	60fa      	str	r2, [r7, #12]
  return result;
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	fab2 f282 	clz	r2, r2
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	fa03 f202 	lsl.w	r2, r3, r2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
 8001040:	e007      	b.n	8001052 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_Init+0x288>)
 800105a:	4013      	ands	r3, r2
 800105c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105e:	429a      	cmp	r2, r3
 8001060:	d10b      	bne.n	800107a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	f023 0303 	bic.w	r3, r3, #3
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	64da      	str	r2, [r3, #76]	; 0x4c
 8001078:	e014      	b.n	80010a4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f023 0312 	bic.w	r3, r3, #18
 8001082:	f043 0210 	orr.w	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800109c:	e002      	b.n	80010a4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40012700 	.word	0x40012700
 80010b8:	fcfc16ff 	.word	0xfcfc16ff
 80010bc:	c0fff189 	.word	0xc0fff189
 80010c0:	bf80fffe 	.word	0xbf80fffe

080010c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Start+0x1a>
 80010da:	2302      	movs	r3, #2
 80010dc:	e04e      	b.n	800117c <HAL_ADC_Start+0xb8>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fb68 	bl	80017bc <ADC_Enable>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d141      	bne.n	800117a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001120:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001134:	d106      	bne.n	8001144 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113a:	f023 0206 	bic.w	r2, r3, #6
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	651a      	str	r2, [r3, #80]	; 0x50
 8001142:	e002      	b.n	800114a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800115a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001178:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a0:	d113      	bne.n	80011ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f043 0220 	orr.w	r2, r3, #32
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e061      	b.n	800128e <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80011ca:	f7ff fe09 	bl	8000de0 <HAL_GetTick>
 80011ce:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011d0:	e01a      	b.n	8001208 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d016      	beq.n	8001208 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_PollForConversion+0x6c>
 80011e0:	f7ff fdfe 	bl	8000de0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d20b      	bcs.n	8001208 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f043 0204 	orr.w	r2, r3, #4
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e042      	b.n	800128e <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0dd      	beq.n	80011d2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f06f 0212 	mvn.w	r2, #18
 8001226:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d124      	bne.n	800128c <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11f      	bne.n	800128c <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001264:	2b00      	cmp	r3, #0
 8001266:	d111      	bne.n	800128c <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d14e      	bne.n	8001362 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d147      	bne.n	8001362 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12c      	bne.n	8001352 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d127      	bne.n	8001352 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800131a:	2b00      	cmp	r3, #0
 800131c:	d119      	bne.n	8001352 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0220 	bic.w	r2, r2, #32
 800132c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f8ab 	bl	80014ae <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f06f 0212 	mvn.w	r2, #18
 8001360:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136c:	2b80      	cmp	r3, #128	; 0x80
 800136e:	d15c      	bne.n	800142a <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b04      	cmp	r3, #4
 800137c:	d155      	bne.n	800142a <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d13a      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d12c      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d125      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11e      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d119      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa24 	bl	8001868 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f06f 020c 	mvn.w	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b40      	cmp	r3, #64	; 0x40
 8001436:	d114      	bne.n	8001462 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d10d      	bne.n	8001462 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f834 	bl	80014c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0201 	mvn.w	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001470:	d119      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	2b20      	cmp	r3, #32
 800147e:	d112      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001484:	f043 0202 	orr.w	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f06f 0220 	mvn.w	r2, #32
 8001494:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f81b 	bl	80014d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0220 	mvn.w	r2, #32
 80014a4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x20>
 8001500:	2302      	movs	r3, #2
 8001502:	e14f      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x2c0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b06      	cmp	r3, #6
 8001512:	d81c      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	221f      	movs	r2, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b05      	subs	r3, #5
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
 800154c:	e07e      	b.n	800164c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d81c      	bhi.n	8001590 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b23      	subs	r3, #35	; 0x23
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	4019      	ands	r1, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b23      	subs	r3, #35	; 0x23
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	63da      	str	r2, [r3, #60]	; 0x3c
 800158e:	e05d      	b.n	800164c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d81c      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b41      	subs	r3, #65	; 0x41
 80015aa:	221f      	movs	r2, #31
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4019      	ands	r1, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b41      	subs	r3, #65	; 0x41
 80015c4:	fa00 f203 	lsl.w	r2, r0, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
 80015d0:	e03c      	b.n	800164c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b18      	cmp	r3, #24
 80015d8:	d81c      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b5f      	subs	r3, #95	; 0x5f
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4019      	ands	r1, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b5f      	subs	r3, #95	; 0x5f
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	e01b      	b.n	800164c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b7d      	subs	r3, #125	; 0x7d
 8001626:	221f      	movs	r2, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4019      	ands	r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b7d      	subs	r3, #125	; 0x7d
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d81a      	bhi.n	800168a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6959      	ldr	r1, [r3, #20]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	2207      	movs	r2, #7
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	4019      	ands	r1, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6898      	ldr	r0, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	615a      	str	r2, [r3, #20]
 8001688:	e05d      	b.n	8001746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b13      	cmp	r3, #19
 8001690:	d81c      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6919      	ldr	r1, [r3, #16]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	3b1e      	subs	r3, #30
 80016a4:	2207      	movs	r2, #7
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4019      	ands	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6898      	ldr	r0, [r3, #8]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	e03c      	b.n	8001746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b1d      	cmp	r3, #29
 80016d2:	d81c      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68d9      	ldr	r1, [r3, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	3b3c      	subs	r3, #60	; 0x3c
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6898      	ldr	r0, [r3, #8]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	3b3c      	subs	r3, #60	; 0x3c
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	e01b      	b.n	8001746 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b5a      	subs	r3, #90	; 0x5a
 8001720:	2207      	movs	r2, #7
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	4019      	ands	r1, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6898      	ldr	r0, [r3, #8]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	3b5a      	subs	r3, #90	; 0x5a
 800173a:	fa00 f203 	lsl.w	r2, r0, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d003      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001752:	2b11      	cmp	r3, #17
 8001754:	d121      	bne.n	800179a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11b      	bne.n	800179a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800176c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d111      	bne.n	800179a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_ADC_ConfigChannel+0x2d4>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9a      	lsrs	r2, r3, #18
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800178c:	e002      	b.n	8001794 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40012700 	.word	0x40012700
 80017b4:	20000004 	.word	0x20000004
 80017b8:	431bde83 	.word	0x431bde83

080017bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	2b40      	cmp	r3, #64	; 0x40
 80017d8:	d03c      	beq.n	8001854 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <ADC_Enable+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <ADC_Enable+0xa8>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9a      	lsrs	r2, r3, #18
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80017fe:	e002      	b.n	8001806 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	3b01      	subs	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f9      	bne.n	8001800 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800180c:	f7ff fae8 	bl	8000de0 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001812:	e018      	b.n	8001846 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001814:	f7ff fae4 	bl	8000de0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d911      	bls.n	8001846 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f043 0210 	orr.w	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e007      	b.n	8001856 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d1df      	bne.n	8001814 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000004 	.word	0x20000004
 8001864:	431bde83 	.word	0x431bde83

08001868 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <__NVIC_EnableIRQ+0x34>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff90 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff2d 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff42 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff90 	bl	800196c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff35 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d005      	beq.n	8001aba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e029      	b.n	8001b0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 020e 	bic.w	r2, r2, #14
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 021c 	and.w	r2, r3, #28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
    }
  }
  return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b2e:	e160      	b.n	8001df2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8152 	beq.w	8001dec <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x40>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	6939      	ldr	r1, [r7, #16]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d00b      	beq.n	8001bf4 <HAL_GPIO_Init+0xdc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	2b11      	cmp	r3, #17
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b12      	cmp	r3, #18
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80ac 	beq.w	8001dec <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_GPIO_Init+0x2f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_GPIO_Init+0x2f4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_GPIO_Init+0x2f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x2fc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d025      	beq.n	8001d24 <HAL_GPIO_Init+0x20c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01f      	beq.n	8001d20 <HAL_GPIO_Init+0x208>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d019      	beq.n	8001d1c <HAL_GPIO_Init+0x204>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_GPIO_Init+0x200>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00d      	beq.n	8001d14 <HAL_GPIO_Init+0x1fc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x310>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x314>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_GPIO_Init+0x1f4>
 8001d08:	2306      	movs	r3, #6
 8001d0a:	e00c      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	e00a      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d10:	2305      	movs	r3, #5
 8001d12:	e008      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d24:	2300      	movs	r3, #0
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d36:	4936      	ldr	r1, [pc, #216]	; (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d68:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f ae97 	bne.w	8001b30 <HAL_GPIO_Init+0x18>
  } 
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40021400 	.word	0x40021400
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001e50:	e003      	b.n	8001e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb88 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e31d      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b94      	ldr	r3, [pc, #592]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b91      	ldr	r3, [pc, #580]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d07b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d006      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d10f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06a      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x128>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d166      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e2f7      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x74>
 8001f2e:	4b7f      	ldr	r3, [pc, #508]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7e      	ldr	r2, [pc, #504]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e02d      	b.n	8001f98 <HAL_RCC_OscConfig+0xd0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x96>
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a78      	ldr	r2, [pc, #480]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a75      	ldr	r2, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0xd0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xb8>
 8001f66:	4b71      	ldr	r3, [pc, #452]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a70      	ldr	r2, [pc, #448]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6d      	ldr	r2, [pc, #436]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xd0>
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a66      	ldr	r2, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff1e 	bl	8000de0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ff1a 	bl	8000de0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2ad      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff0a 	bl	8000de0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff06 	bl	8000de0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e299      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fe2:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x108>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d05a      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d119      	bne.n	800203e <HAL_RCC_OscConfig+0x176>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x160>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e276      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x264>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	493d      	ldr	r1, [pc, #244]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203c:	e03a      	b.n	80020b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_OscConfig+0x268>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fec8 	bl	8000de0 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002054:	f7fe fec4 	bl	8000de0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e257      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	492a      	ldr	r1, [pc, #168]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e015      	b.n	80020b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_OscConfig+0x268>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fea7 	bl	8000de0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7fe fea3 	bl	8000de0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e236      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_OscConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80b8 	beq.w	8002232 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d170      	bne.n	80021aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_OscConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_OscConfig+0x218>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e21a      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x264>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d921      	bls.n	8002134 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fbd5 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e208      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	4901      	ldr	r1, [pc, #4]	; (800212c <HAL_RCC_OscConfig+0x264>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
 800212a:	e020      	b.n	800216e <HAL_RCC_OscConfig+0x2a6>
 800212c:	40023800 	.word	0x40023800
 8002130:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002134:	4ba4      	ldr	r3, [pc, #656]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	49a1      	ldr	r1, [pc, #644]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002146:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	499c      	ldr	r1, [pc, #624]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fba0 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1d3      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	0b5b      	lsrs	r3, r3, #13
 8002174:	3301      	adds	r3, #1
 8002176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800217e:	4a92      	ldr	r2, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	0912      	lsrs	r2, r2, #4
 8002184:	f002 020f 	and.w	r2, r2, #15
 8002188:	4990      	ldr	r1, [pc, #576]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800218a:	5c8a      	ldrb	r2, [r1, r2]
 800218c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800218e:	4a90      	ldr	r2, [pc, #576]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 8002190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002192:	4b90      	ldr	r3, [pc, #576]	; (80023d4 <HAL_RCC_OscConfig+0x50c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fdd6 	bl	8000d48 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d045      	beq.n	8002232 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	e1b5      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d029      	beq.n	8002206 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_OscConfig+0x510>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe12 	bl	8000de0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c0:	f7fe fe0e 	bl	8000de0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1a1      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021d2:	4b7d      	ldr	r3, [pc, #500]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021de:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4977      	ldr	r1, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f0:	4b75      	ldr	r3, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4972      	ldr	r1, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <HAL_RCC_OscConfig+0x510>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fde8 	bl	8000de0 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002214:	f7fe fde4 	bl	8000de0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e177      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002226:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d030      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x514>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7fe fdc8 	bl	8000de0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7fe fdc4 	bl	8000de0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e157      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002266:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x38c>
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_OscConfig+0x514>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe fdb1 	bl	8000de0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002282:	f7fe fdad 	bl	8000de0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e140      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80b5 	beq.w	8002418 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	4a41      	ldr	r2, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6253      	str	r3, [r2, #36]	; 0x24
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_OscConfig+0x518>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_RCC_OscConfig+0x518>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a3d      	ldr	r2, [pc, #244]	; (80023e0 <HAL_RCC_OscConfig+0x518>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fd75 	bl	8000de0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fd71 	bl	8000de0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	; 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e104      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x518>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x466>
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6353      	str	r3, [r2, #52]	; 0x34
 800232c:	e02d      	b.n	800238a <HAL_RCC_OscConfig+0x4c2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x488>
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 800233c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002340:	6353      	str	r3, [r2, #52]	; 0x34
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800234c:	6353      	str	r3, [r2, #52]	; 0x34
 800234e:	e01c      	b.n	800238a <HAL_RCC_OscConfig+0x4c2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x4aa>
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002362:	6353      	str	r3, [r2, #52]	; 0x34
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6353      	str	r3, [r2, #52]	; 0x34
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0x4c2>
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800237c:	6353      	str	r3, [r2, #52]	; 0x34
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 8002384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002388:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d015      	beq.n	80023be <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe fd25 	bl	8000de0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fd21 	bl	8000de0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0b2      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_OscConfig+0x500>)
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ee      	beq.n	800239a <HAL_RCC_OscConfig+0x4d2>
 80023bc:	e023      	b.n	8002406 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7fe fd0f 	bl	8000de0 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c4:	e019      	b.n	80023fa <HAL_RCC_OscConfig+0x532>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08003290 	.word	0x08003290
 80023d0:	20000004 	.word	0x20000004
 80023d4:	20000008 	.word	0x20000008
 80023d8:	42470020 	.word	0x42470020
 80023dc:	42470680 	.word	0x42470680
 80023e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe fcfc 	bl	8000de0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e08d      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d079      	beq.n	8002514 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d056      	beq.n	80024d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b02      	cmp	r3, #2
 800242c:	d13b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_OscConfig+0x65c>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fcd4 	bl	8000de0 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fcd0 	bl	8000de0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e063      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	4319      	orrs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	430b      	orrs	r3, r1
 8002472:	492b      	ldr	r1, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_OscConfig+0x65c>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fcaf 	bl	8000de0 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fcab 	bl	8000de0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e03e      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x5be>
 80024a4:	e036      	b.n	8002514 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HAL_RCC_OscConfig+0x65c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fc98 	bl	8000de0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fc94 	bl	8000de0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e027      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5ec>
 80024d2:	e01f      	b.n	8002514 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e01a      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_OscConfig+0x658>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	42470060 	.word	0x42470060

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e11a      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b8f      	ldr	r3, [pc, #572]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d919      	bls.n	800257e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_RCC_ClockConfig+0x34>
 8002550:	4b8a      	ldr	r3, [pc, #552]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a89      	ldr	r2, [pc, #548]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b87      	ldr	r3, [pc, #540]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 0201 	bic.w	r2, r3, #1
 8002564:	4985      	ldr	r1, [pc, #532]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256c:	4b83      	ldr	r3, [pc, #524]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0f9      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	497a      	ldr	r1, [pc, #488]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 808e 	beq.w	80026c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0d7      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0cb      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0bf      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0b7      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	495c      	ldr	r1, [pc, #368]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7fe fbe4 	bl	8000de0 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d112      	bne.n	8002648 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fbdc 	bl	8000de0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e09b      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d1ee      	bne.n	8002624 <HAL_RCC_ClockConfig+0xfc>
 8002646:	e03e      	b.n	80026c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d112      	bne.n	8002676 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7fe fbc5 	bl	8000de0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e084      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d1ee      	bne.n	8002652 <HAL_RCC_ClockConfig+0x12a>
 8002674:	e027      	b.n	80026c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d11d      	bne.n	80026ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fbae 	bl	8000de0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e06d      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d1ee      	bne.n	8002680 <HAL_RCC_ClockConfig+0x158>
 80026a2:	e010      	b.n	80026c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fe fb9c 	bl	8000de0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e05b      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ee      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d219      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x1be>
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0201 	bic.w	r2, r3, #1
 80026ee:	4923      	ldr	r1, [pc, #140]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCC_ClockConfig+0x254>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e034      	b.n	8002772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4917      	ldr	r1, [pc, #92]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490f      	ldr	r1, [pc, #60]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f823 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274a:	4601      	mov	r1, r0
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCC_ClockConfig+0x258>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	fa21 f303 	lsr.w	r3, r1, r3
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe faee 	bl	8000d48 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002770:	7afb      	ldrb	r3, [r7, #11]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023c00 	.word	0x40023c00
 8002780:	40023800 	.word	0x40023800
 8002784:	08003290 	.word	0x08003290
 8002788:	20000004 	.word	0x20000004
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d006      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x24>
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d007      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x2a>
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d12c      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b0:	613b      	str	r3, [r7, #16]
      break;
 80027b2:	e037      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCC_GetSysClockFreq+0xa8>)
 80027b6:	613b      	str	r3, [r7, #16]
      break;
 80027b8:	e034      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_RCC_GetSysClockFreq+0xac>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	0d9b      	lsrs	r3, r3, #22
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	3301      	adds	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <HAL_RCC_GetSysClockFreq+0xa8>)
 80027e4:	fb02 f203 	mul.w	r2, r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e007      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f6:	fb02 f203 	mul.w	r2, r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
      break;
 8002806:	e00d      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_GetSysClockFreq+0xa0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0b5b      	lsrs	r3, r3, #13
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	613b      	str	r3, [r7, #16]
      break;
 8002822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002824:	693b      	ldr	r3, [r7, #16]
}
 8002826:	4618      	mov	r0, r3
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200
 800283c:	08003284 	.word	0x08003284

08002840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <HAL_RCC_GetHCLKFreq+0x10>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff2 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 800285c:	4601      	mov	r1, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4a03      	ldr	r2, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	080032a0 	.word	0x080032a0

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffde 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002884:	4601      	mov	r1, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0adb      	lsrs	r3, r3, #11
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	080032a0 	.word	0x080032a0

080028a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12c      	bne.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e016      	b.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6253      	str	r3, [r2, #36]	; 0x24
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002900:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002908:	d105      	bne.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002910:	d101      	bne.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0201 	bic.w	r2, r3, #1
 8002930:	490b      	ldr	r1, [pc, #44]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40007000 	.word	0x40007000
 8002960:	40023c00 	.word	0x40023c00

08002964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e03f      	b.n	80029f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f8de 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	; 0x24
 8002994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 faab 	bl	8002f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d140      	bne.n	8002a9a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Receive_IT+0x26>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e039      	b.n	8002a9c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Receive_IT+0x38>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e032      	b.n	8002a9c <HAL_UART_Receive_IT+0x9e>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2222      	movs	r2, #34	; 0x22
 8002a5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a74:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_UART_IRQHandler+0x52>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f984 	bl	8002e00 <UART_Receive_IT>
      return;
 8002af8:	e0cc      	b.n	8002c94 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80ab 	beq.w	8002c58 <HAL_UART_IRQHandler+0x1b0>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_UART_IRQHandler+0x70>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80a0 	beq.w	8002c58 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_UART_IRQHandler+0x90>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_UART_IRQHandler+0xb0>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	f043 0202 	orr.w	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_UART_IRQHandler+0xd0>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_UART_IRQHandler+0xf0>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f043 0208 	orr.w	r2, r3, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d078      	beq.n	8002c92 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_UART_IRQHandler+0x112>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f923 	bl	8002e00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_UART_IRQHandler+0x13a>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d031      	beq.n	8002c46 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f86e 	bl	8002cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d123      	bne.n	8002c3e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <HAL_UART_IRQHandler+0x1f4>)
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff3b 	bl	8001a96 <HAL_DMA_Abort_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c30:	4610      	mov	r0, r2
 8002c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e00e      	b.n	8002c54 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f83b 	bl	8002cb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e00a      	b.n	8002c54 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f837 	bl	8002cb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	e006      	b.n	8002c54 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f833 	bl	8002cb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c52:	e01e      	b.n	8002c92 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	bf00      	nop
    return;
 8002c56:	e01c      	b.n	8002c92 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_UART_IRQHandler+0x1cc>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f85a 	bl	8002d26 <UART_Transmit_IT>
    return;
 8002c72:	e00f      	b.n	8002c94 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_UART_IRQHandler+0x1ec>
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f8a1 	bl	8002dd0 <UART_EndTransmit_IT>
    return;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002c92:	bf00      	nop
  }
}
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	08002cff 	.word	0x08002cff

08002ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ffca 	bl	8002cb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b21      	cmp	r3, #33	; 0x21
 8002d38:	d144      	bne.n	8002dc4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d11a      	bne.n	8002d7a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]
 8002d6c:	e00e      	b.n	8002d8c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	e008      	b.n	8002d8c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6211      	str	r1, [r2, #32]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ff55 	bl	8002ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b22      	cmp	r3, #34	; 0x22
 8002e12:	d171      	bne.n	8002ef8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d123      	bne.n	8002e66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10e      	bne.n	8002e4a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	1c9a      	adds	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
 8002e48:	e029      	b.n	8002e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
 8002e64:	e01b      	b.n	8002e9e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6858      	ldr	r0, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6291      	str	r1, [r2, #40]	; 0x28
 8002e7e:	b2c2      	uxtb	r2, r0
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e00c      	b.n	8002e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	1c58      	adds	r0, r3, #1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	6288      	str	r0, [r1, #40]	; 0x28
 8002e96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d120      	bne.n	8002ef4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0220 	bic.w	r2, r2, #32
 8002ec0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fb32 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e002      	b.n	8002efa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f44:	f023 030c 	bic.w	r3, r3, #12
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	f040 80a5 	bne.w	80030be <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4aa4      	ldr	r2, [pc, #656]	; (800320c <UART_SetConfig+0x308>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d14f      	bne.n	800301e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7e:	f7ff fc7d 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8002f82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009a      	lsls	r2, r3, #2
 8002f8e:	441a      	add	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4a9d      	ldr	r2, [pc, #628]	; (8003210 <UART_SetConfig+0x30c>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	0119      	lsls	r1, r3, #4
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009a      	lsls	r2, r3, #2
 8002fae:	441a      	add	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fba:	4b95      	ldr	r3, [pc, #596]	; (8003210 <UART_SetConfig+0x30c>)
 8002fbc:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	2064      	movs	r0, #100	; 0x64
 8002fc4:	fb00 f303 	mul.w	r3, r0, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3332      	adds	r3, #50	; 0x32
 8002fce:	4a90      	ldr	r2, [pc, #576]	; (8003210 <UART_SetConfig+0x30c>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fdc:	4419      	add	r1, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff4:	4b86      	ldr	r3, [pc, #536]	; (8003210 <UART_SetConfig+0x30c>)
 8002ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2064      	movs	r0, #100	; 0x64
 8002ffe:	fb00 f303 	mul.w	r3, r0, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	3332      	adds	r3, #50	; 0x32
 8003008:	4a81      	ldr	r2, [pc, #516]	; (8003210 <UART_SetConfig+0x30c>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	440a      	add	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800301c:	e0f1      	b.n	8003202 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800301e:	f7ff fc19 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8003022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009a      	lsls	r2, r3, #2
 800302e:	441a      	add	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <UART_SetConfig+0x30c>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	0119      	lsls	r1, r3, #4
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009a      	lsls	r2, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fbb2 f2f3 	udiv	r2, r2, r3
 800305a:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <UART_SetConfig+0x30c>)
 800305c:	fba3 0302 	umull	r0, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2064      	movs	r0, #100	; 0x64
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3332      	adds	r3, #50	; 0x32
 800306e:	4a68      	ldr	r2, [pc, #416]	; (8003210 <UART_SetConfig+0x30c>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800307c:	4419      	add	r1, r3
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fbb2 f2f3 	udiv	r2, r2, r3
 8003094:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <UART_SetConfig+0x30c>)
 8003096:	fba3 0302 	umull	r0, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a59      	ldr	r2, [pc, #356]	; (8003210 <UART_SetConfig+0x30c>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 0207 	and.w	r2, r3, #7
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	440a      	add	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	e0a1      	b.n	8003202 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a52      	ldr	r2, [pc, #328]	; (800320c <UART_SetConfig+0x308>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d14e      	bne.n	8003166 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7ff fbd8 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80030cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <UART_SetConfig+0x30c>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	0119      	lsls	r1, r3, #4
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fbb2 f2f3 	udiv	r2, r2, r3
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <UART_SetConfig+0x30c>)
 8003106:	fba3 0302 	umull	r0, r3, r3, r2
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2064      	movs	r0, #100	; 0x64
 800310e:	fb00 f303 	mul.w	r3, r0, r3
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	3332      	adds	r3, #50	; 0x32
 8003118:	4a3d      	ldr	r2, [pc, #244]	; (8003210 <UART_SetConfig+0x30c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003124:	4419      	add	r1, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fbb2 f2f3 	udiv	r2, r2, r3
 800313c:	4b34      	ldr	r3, [pc, #208]	; (8003210 <UART_SetConfig+0x30c>)
 800313e:	fba3 0302 	umull	r0, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2064      	movs	r0, #100	; 0x64
 8003146:	fb00 f303 	mul.w	r3, r0, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	3332      	adds	r3, #50	; 0x32
 8003150:	4a2f      	ldr	r2, [pc, #188]	; (8003210 <UART_SetConfig+0x30c>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	440a      	add	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	e04d      	b.n	8003202 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003166:	f7ff fb75 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 800316a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <UART_SetConfig+0x30c>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	0119      	lsls	r1, r3, #4
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <UART_SetConfig+0x30c>)
 80031a4:	fba3 0302 	umull	r0, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2064      	movs	r0, #100	; 0x64
 80031ac:	fb00 f303 	mul.w	r3, r0, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <UART_SetConfig+0x30c>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c2:	4419      	add	r1, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009a      	lsls	r2, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <UART_SetConfig+0x30c>)
 80031dc:	fba3 0302 	umull	r0, r3, r3, r2
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	2064      	movs	r0, #100	; 0x64
 80031e4:	fb00 f303 	mul.w	r3, r0, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	3332      	adds	r3, #50	; 0x32
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <UART_SetConfig+0x30c>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	440a      	add	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40013800 	.word	0x40013800
 8003210:	51eb851f 	.word	0x51eb851f

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	2500      	movs	r5, #0
 8003218:	4e0c      	ldr	r6, [pc, #48]	; (800324c <__libc_init_array+0x38>)
 800321a:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321c:	1ba4      	subs	r4, r4, r6
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	42a5      	cmp	r5, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	f000 f822 	bl	800326c <_init>
 8003228:	2500      	movs	r5, #0
 800322a:	4e0a      	ldr	r6, [pc, #40]	; (8003254 <__libc_init_array+0x40>)
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__libc_init_array+0x44>)
 800322e:	1ba4      	subs	r4, r4, r6
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	42a5      	cmp	r5, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323c:	4798      	blx	r3
 800323e:	3501      	adds	r5, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003246:	4798      	blx	r3
 8003248:	3501      	adds	r5, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	080032a8 	.word	0x080032a8
 8003250:	080032a8 	.word	0x080032a8
 8003254:	080032a8 	.word	0x080032a8
 8003258:	080032ac 	.word	0x080032ac

0800325c <memset>:
 800325c:	4603      	mov	r3, r0
 800325e:	4402      	add	r2, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <_init>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr

08003278 <_fini>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr
