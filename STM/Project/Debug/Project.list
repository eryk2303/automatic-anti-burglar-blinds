
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080048d0  080048d0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d0  080048d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  08004ab8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004ab8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b09c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000231b  00000000  00000000  0002b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b4e  00000000  00000000  0002e778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bb0  00000000  00000000  000462c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ef7a  00000000  00000000  0004fe76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dedf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d34  00000000  00000000  000dee6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	080046f8 	.word	0x080046f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	080046f8 	.word	0x080046f8

0800017c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <MX_ADC_Init+0xac>)
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <MX_ADC_Init+0xb0>)
 8000190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000192:	4b25      	ldr	r3, [pc, #148]	; (8000228 <MX_ADC_Init+0xac>)
 8000194:	2200      	movs	r2, #0
 8000196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000198:	4b23      	ldr	r3, [pc, #140]	; (8000228 <MX_ADC_Init+0xac>)
 800019a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800019e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_ADC_Init+0xac>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <MX_ADC_Init+0xac>)
 80001a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_ADC_Init+0xac>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80001b4:	4b1c      	ldr	r3, [pc, #112]	; (8000228 <MX_ADC_Init+0xac>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80001ba:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_ADC_Init+0xac>)
 80001bc:	2200      	movs	r2, #0
 80001be:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80001c0:	4b19      	ldr	r3, [pc, #100]	; (8000228 <MX_ADC_Init+0xac>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_ADC_Init+0xac>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <MX_ADC_Init+0xac>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <MX_ADC_Init+0xac>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_ADC_Init+0xac>)
 80001de:	2210      	movs	r2, #16
 80001e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_ADC_Init+0xac>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_ADC_Init+0xac>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <MX_ADC_Init+0xac>)
 80001f2:	f000 fec1 	bl	8000f78 <HAL_ADC_Init>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80001fc:	f000 f9ea 	bl	80005d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000200:	2300      	movs	r3, #0
 8000202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000204:	2301      	movs	r3, #1
 8000206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <MX_ADC_Init+0xac>)
 8000212:	f001 fa07 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800021c:	f000 f9da 	bl	80005d4 <Error_Handler>
  }

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000210 	.word	0x20000210
 800022c:	40012400 	.word	0x40012400

08000230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <HAL_ADC_MspInit+0x84>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d12b      	bne.n	80002aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025c:	6213      	str	r3, [r2, #32]
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <HAL_ADC_MspInit+0x88>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = FOTODETECTOR_Pin;
 8000282:	2301      	movs	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000286:	2303      	movs	r3, #3
 8000288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FOTODETECTOR_GPIO_Port, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <HAL_ADC_MspInit+0x8c>)
 8000296:	f001 fcdf 	bl	8001c58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	2012      	movs	r0, #18
 80002a0:	f001 fc63 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80002a4:	2012      	movs	r0, #18
 80002a6:	f001 fc7c 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	; 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40012400 	.word	0x40012400
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <get_value_fotodetector>:
#include "fotodetector.h"


uint8_t get_value_fotodetector()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc);
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <get_value_fotodetector+0x2c>)
 80002c6:	f000 ff9d 	bl	8001204 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002ca:	f04f 31ff 	mov.w	r1, #4294967295
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d0:	f000 fff8 	bl	80012c4 <HAL_ADC_PollForConversion>
		fotodetector_value = HAL_ADC_GetValue(&hadc);
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <get_value_fotodetector+0x2c>)
 80002d6:	f001 f87e 	bl	80013d6 <HAL_ADC_GetValue>
 80002da:	4603      	mov	r3, r0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e0:	701a      	strb	r2, [r3, #0]

		 return fotodetector_value;
 80002e2:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <get_value_fotodetector+0x30>)
 80002e4:	781b      	ldrb	r3, [r3, #0]

}
 80002e6:	4618      	mov	r0, r3
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000210 	.word	0x20000210
 80002f0:	20000264 	.word	0x20000264

080002f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08a      	sub	sp, #40	; 0x28
 80002f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <MX_GPIO_Init+0x14c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a4c      	ldr	r2, [pc, #304]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b4a      	ldr	r3, [pc, #296]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000322:	4b47      	ldr	r3, [pc, #284]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a46      	ldr	r2, [pc, #280]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000328:	f043 0320 	orr.w	r3, r3, #32
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <MX_GPIO_Init+0x14c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a40      	ldr	r2, [pc, #256]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	61d3      	str	r3, [r2, #28]
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	4b3b      	ldr	r3, [pc, #236]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a3a      	ldr	r2, [pc, #232]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <MX_GPIO_Init+0x14c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	4835      	ldr	r0, [pc, #212]	; (8000444 <MX_GPIO_Init+0x150>)
 8000370:	f001 fe00 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	4833      	ldr	r0, [pc, #204]	; (8000448 <MX_GPIO_Init+0x154>)
 800037c:	f001 fdfa 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000386:	4831      	ldr	r0, [pc, #196]	; (800044c <MX_GPIO_Init+0x158>)
 8000388:	f001 fdf4 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <MX_GPIO_Init+0x15c>)
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	482a      	ldr	r0, [pc, #168]	; (800044c <MX_GPIO_Init+0x158>)
 80003a2:	f001 fc59 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a6:	2320      	movs	r3, #32
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	4821      	ldr	r0, [pc, #132]	; (8000444 <MX_GPIO_Init+0x150>)
 80003be:	f001 fc4b 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80003c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	481b      	ldr	r0, [pc, #108]	; (8000448 <MX_GPIO_Init+0x154>)
 80003dc:	f001 fc3c 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = END_DOWN_Pin|END_HIGH_Pin;
 80003e0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0x160>)
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <MX_GPIO_Init+0x158>)
 80003f6:	f001 fc2f 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 80003fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_GPIO_Init+0x158>)
 8000414:	f001 fc20 	bl	8001c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2017      	movs	r0, #23
 800041e:	f001 fba4 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000422:	2017      	movs	r0, #23
 8000424:	f001 fbbd 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2028      	movs	r0, #40	; 0x28
 800042e:	f001 fb9c 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f001 fbb5 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40023800 	.word	0x40023800
 8000444:	40020000 	.word	0x40020000
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	10110000 	.word	0x10110000
 8000454:	10210000 	.word	0x10210000

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f000 fcfb 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000460:	f000 f82a 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000464:	f7ff ff46 	bl	80002f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000468:	f000 fbbc 	bl	8000be4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800046c:	f000 fb90 	bl	8000b90 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000470:	f7ff fe84 	bl	800017c <MX_ADC_Init>
  MX_USART3_UART_Init();
 8000474:	f000 fbe0 	bl	8000c38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	490a      	ldr	r1, [pc, #40]	; (80004a4 <main+0x4c>)
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <main+0x50>)
 800047e:	f002 fba2 	bl	8002bc6 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <main+0x54>)
 8000484:	f000 febe 	bl	8001204 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart3, &able, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	4909      	ldr	r1, [pc, #36]	; (80004b0 <main+0x58>)
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <main+0x5c>)
 800048e:	f002 fb9a 	bl	8002bc6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 auto_fotodetector(get_value_fotodetector());
 8000492:	f7ff ff15 	bl	80002c0 <get_value_fotodetector>
 8000496:	4603      	mov	r3, r0
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f9f3 	bl	8000884 <auto_fotodetector>
	 move_motor();
 800049e:	f000 f94f 	bl	8000740 <move_motor>
  {
 80004a2:	e7f6      	b.n	8000492 <main+0x3a>
 80004a4:	2000020d 	.word	0x2000020d
 80004a8:	200002c0 	.word	0x200002c0
 80004ac:	20000210 	.word	0x20000210
 80004b0:	2000020c 	.word	0x2000020c
 80004b4:	20000280 	.word	0x20000280

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b092      	sub	sp, #72	; 0x48
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2234      	movs	r2, #52	; 0x34
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 ffb2 	bl	8003430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	463b      	mov	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <SystemClock_Config+0x98>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <SystemClock_Config+0x98>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2310      	movs	r3, #16
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000508:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fd7a 	bl	8002008 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800051a:	f000 f85b 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	230f      	movs	r3, #15
 8000520:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f002 f896 	bl	8002668 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000542:	f000 f847 	bl	80005d4 <Error_Handler>
  }
}
 8000546:	bf00      	nop
 8000548:	3748      	adds	r7, #72	; 0x48
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40007000 	.word	0x40007000

08000554 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <HAL_UART_RxCpltCallback+0x68>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d10c      	bne.n	8000580 <HAL_UART_RxCpltCallback+0x2c>
	{
		new_data(data);
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <HAL_UART_RxCpltCallback+0x6c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f878 	bl	8000660 <new_data>
		data = 0;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_UART_RxCpltCallback+0x6c>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &data, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	4911      	ldr	r1, [pc, #68]	; (80005c0 <HAL_UART_RxCpltCallback+0x6c>)
 800057a:	4812      	ldr	r0, [pc, #72]	; (80005c4 <HAL_UART_RxCpltCallback+0x70>)
 800057c:	f002 fb23 	bl	8002bc6 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <HAL_UART_RxCpltCallback+0x74>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d114      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0x60>
	{
		admin_pc(able);
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <HAL_UART_RxCpltCallback+0x78>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f8b4 	bl	80006fc <admin_pc>
		scanf(&able, able);
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <HAL_UART_RxCpltCallback+0x78>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <HAL_UART_RxCpltCallback+0x78>)
 800059c:	f002 ff50 	bl	8003440 <iscanf>
		HAL_UART_Transmit_IT(&huart3, &able, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	490a      	ldr	r1, [pc, #40]	; (80005cc <HAL_UART_RxCpltCallback+0x78>)
 80005a4:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x7c>)
 80005a6:	f002 faca 	bl	8002b3e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, &able, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <HAL_UART_RxCpltCallback+0x78>)
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <HAL_UART_RxCpltCallback+0x7c>)
 80005b0:	f002 fb09 	bl	8002bc6 <HAL_UART_Receive_IT>
	}

}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40013800 	.word	0x40013800
 80005c0:	2000020d 	.word	0x2000020d
 80005c4:	200002c0 	.word	0x200002c0
 80005c8:	40004800 	.word	0x40004800
 80005cc:	2000020c 	.word	0x2000020c
 80005d0:	20000280 	.word	0x20000280

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <HAL_GPIO_EXTI_Callback>:
#include "motor.h"



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_DOWN_Pin)
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	2b40      	cmp	r3, #64	; 0x40
 80005ee:	d112      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x36>
	{

		set_position = position = 0;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_GPIO_EXTI_Callback+0x70>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <HAL_GPIO_EXTI_Callback+0x70>)
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 80005fc:	701a      	strb	r2, [r3, #0]
		set_position = set_position + 5;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3305      	adds	r3, #5
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 8000608:	701a      	strb	r2, [r3, #0]
		auto_down = 1;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <HAL_GPIO_EXTI_Callback+0x78>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
		auto_up = 0;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]

	}
	if(GPIO_Pin == END_HIGH_Pin)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800061c:	d112      	bne.n	8000644 <HAL_GPIO_EXTI_Callback+0x64>
		{
			set_position = position = 255;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_GPIO_EXTI_Callback+0x70>)
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_GPIO_EXTI_Callback+0x70>)
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 800062a:	701a      	strb	r2, [r3, #0]
			set_position = set_position - 5;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3b05      	subs	r3, #5
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_GPIO_EXTI_Callback+0x74>)
 8000636:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_GPIO_EXTI_Callback+0x78>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
			auto_up = 1;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
		}
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000270 	.word	0x20000270
 8000654:	2000027c 	.word	0x2000027c
 8000658:	2000026c 	.word	0x2000026c
 800065c:	20000274 	.word	0x20000274

08000660 <new_data>:

void new_data(uint8_t new)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	set_position = position = 100;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <new_data+0x88>)
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <new_data+0x88>)
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <new_data+0x8c>)
 8000676:	701a      	strb	r2, [r3, #0]
	if(new == '1')
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b31      	cmp	r3, #49	; 0x31
 800067c:	d106      	bne.n	800068c <new_data+0x2c>
	{
		set_position += 5;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <new_data+0x8c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3305      	adds	r3, #5
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <new_data+0x8c>)
 8000688:	701a      	strb	r2, [r3, #0]

			control = 1;
			auto_down = 0;
			auto_up = 0;
		}
}
 800068a:	e028      	b.n	80006de <new_data+0x7e>
	else if(new == '2')
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b32      	cmp	r3, #50	; 0x32
 8000690:	d106      	bne.n	80006a0 <new_data+0x40>
		set_position -= 5;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <new_data+0x8c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b05      	subs	r3, #5
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <new_data+0x8c>)
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	e01e      	b.n	80006de <new_data+0x7e>
	else if(new == '3')
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b33      	cmp	r3, #51	; 0x33
 80006a4:	d102      	bne.n	80006ac <new_data+0x4c>
			home_up();
 80006a6:	f000 f8bd 	bl	8000824 <home_up>
}
 80006aa:	e018      	b.n	80006de <new_data+0x7e>
	else if(new == '4')
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b34      	cmp	r3, #52	; 0x34
 80006b0:	d102      	bne.n	80006b8 <new_data+0x58>
			home_down();
 80006b2:	f000 f8cf 	bl	8000854 <home_down>
}
 80006b6:	e012      	b.n	80006de <new_data+0x7e>
	else if(new == '6')
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b36      	cmp	r3, #54	; 0x36
 80006bc:	d103      	bne.n	80006c6 <new_data+0x66>
			control = 0;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <new_data+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
}
 80006c4:	e00b      	b.n	80006de <new_data+0x7e>
	else if(new == '5')
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b35      	cmp	r3, #53	; 0x35
 80006ca:	d108      	bne.n	80006de <new_data+0x7e>
			control = 1;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <new_data+0x90>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <new_data+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			auto_up = 0;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <new_data+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000270 	.word	0x20000270
 80006ec:	2000027c 	.word	0x2000027c
 80006f0:	20000268 	.word	0x20000268
 80006f4:	2000026c 	.word	0x2000026c
 80006f8:	20000274 	.word	0x20000274

080006fc <admin_pc>:


void admin_pc(uint8_t able)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]

	if(able == '0')
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b30      	cmp	r3, #48	; 0x30
 800070a:	d107      	bne.n	800071c <admin_pc+0x20>
	{
		set_position = position;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <admin_pc+0x38>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <admin_pc+0x3c>)
 8000712:	701a      	strb	r2, [r3, #0]
		admin = 1;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <admin_pc+0x40>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	else if(able == '1')
	{
		admin = 0;

	}
}
 800071a:	e005      	b.n	8000728 <admin_pc+0x2c>
	else if(able == '1')
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b31      	cmp	r3, #49	; 0x31
 8000720:	d102      	bne.n	8000728 <admin_pc+0x2c>
		admin = 0;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <admin_pc+0x40>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000270 	.word	0x20000270
 8000738:	2000027c 	.word	0x2000027c
 800073c:	20000000 	.word	0x20000000

08000740 <move_motor>:

void move_motor()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

	if(admin == 1)
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <move_motor+0xcc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d15d      	bne.n	8000808 <move_motor+0xc8>
	{
		if(set_position > position)
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <move_motor+0xd0>)
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	4b30      	ldr	r3, [pc, #192]	; (8000814 <move_motor+0xd4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d925      	bls.n	80007a4 <move_motor+0x64>
		{

			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	482e      	ldr	r0, [pc, #184]	; (8000818 <move_motor+0xd8>)
 8000760:	f001 fc08 	bl	8001f74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	482c      	ldr	r0, [pc, #176]	; (800081c <move_motor+0xdc>)
 800076c:	f001 fc02 	bl	8001f74 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	482a      	ldr	r0, [pc, #168]	; (800081c <move_motor+0xdc>)
 8000774:	f001 fc16 	bl	8001fa4 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 fbdb 	bl	8000f34 <HAL_Delay>
			++count_position;
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <move_motor+0xe0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <move_motor+0xe0>)
 8000786:	6013      	str	r3, [r2, #0]
			if(count_position == 20)
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <move_motor+0xe0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b14      	cmp	r3, #20
 800078e:	d13b      	bne.n	8000808 <move_motor+0xc8>
			{
				++position;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <move_motor+0xd4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <move_motor+0xd4>)
 800079a:	701a      	strb	r2, [r3, #0]
				count_position = 0;
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <move_motor+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
		else
		{
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
		}
	}
}
 80007a2:	e031      	b.n	8000808 <move_motor+0xc8>
		 else if(set_position < position)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <move_motor+0xd0>)
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <move_motor+0xd4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d225      	bcs.n	80007fc <move_motor+0xbc>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <move_motor+0xd8>)
 80007b8:	f001 fbdc 	bl	8001f74 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <move_motor+0xdc>)
 80007c4:	f001 fbd6 	bl	8001f74 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <move_motor+0xdc>)
 80007cc:	f001 fbea 	bl	8001fa4 <HAL_GPIO_TogglePin>
			HAL_Delay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 fbaf 	bl	8000f34 <HAL_Delay>
			++count_position;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <move_motor+0xe0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <move_motor+0xe0>)
 80007de:	6013      	str	r3, [r2, #0]
			if(count_position == 20)
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <move_motor+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b14      	cmp	r3, #20
 80007e6:	d10f      	bne.n	8000808 <move_motor+0xc8>
				--position;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <move_motor+0xd4>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <move_motor+0xd4>)
 80007f2:	701a      	strb	r2, [r3, #0]
				count_position = 0;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <move_motor+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	e005      	b.n	8000808 <move_motor+0xc8>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <move_motor+0xd8>)
 8000804:	f001 fbb6 	bl	8001f74 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	2000027c 	.word	0x2000027c
 8000814:	20000270 	.word	0x20000270
 8000818:	40020400 	.word	0x40020400
 800081c:	40020800 	.word	0x40020800
 8000820:	200001fc 	.word	0x200001fc

08000824 <home_up>:


void home_up()
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	set_position = position = 0;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <home_up+0x28>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <home_up+0x28>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <home_up+0x2c>)
 8000834:	701a      	strb	r2, [r3, #0]
	set_position += 255;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <home_up+0x2c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <home_up+0x2c>)
 8000840:	701a      	strb	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000270 	.word	0x20000270
 8000850:	2000027c 	.word	0x2000027c

08000854 <home_down>:



void home_down()
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	set_position = position = 255;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <home_down+0x28>)
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <home_down+0x28>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <home_down+0x2c>)
 8000864:	701a      	strb	r2, [r3, #0]
	set_position -= 255;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <home_down+0x2c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <home_down+0x2c>)
 8000870:	701a      	strb	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000270 	.word	0x20000270
 8000880:	2000027c 	.word	0x2000027c

08000884 <auto_fotodetector>:

void auto_fotodetector(uint8_t auto_foto)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]

	if(control == 1)
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <auto_fotodetector+0x40>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d111      	bne.n	80008ba <auto_fotodetector+0x36>
	{
		if(auto_down == 0)
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <auto_fotodetector+0x44>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d104      	bne.n	80008a8 <auto_fotodetector+0x24>
		{
			if(auto_foto < 190)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2bbd      	cmp	r3, #189	; 0xbd
 80008a2:	d801      	bhi.n	80008a8 <auto_fotodetector+0x24>
			{
				home_down();
 80008a4:	f7ff ffd6 	bl	8000854 <home_down>
			}
		}
		if(auto_up == 0)
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <auto_fotodetector+0x48>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <auto_fotodetector+0x36>
		{
			if(auto_foto > 220)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2bdc      	cmp	r3, #220	; 0xdc
 80008b4:	d901      	bls.n	80008ba <auto_fotodetector+0x36>
			{
				home_up();
 80008b6:	f7ff ffb5 	bl	8000824 <home_up>
			}
		}
	}
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000268 	.word	0x20000268
 80008c8:	2000026c 	.word	0x2000026c
 80008cc:	20000274 	.word	0x20000274

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_MspInit+0x5c>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_MspInit+0x5c>)
 80008dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e0:	6253      	str	r3, [r2, #36]	; 0x24
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x5c>)
 80008e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x5c>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x5c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6213      	str	r3, [r2, #32]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x5c>)
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x5c>)
 8000908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x5c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6253      	str	r3, [r2, #36]	; 0x24
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x5c>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091e:	2007      	movs	r0, #7
 8000920:	f001 f918 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <HardFault_Handler+0x4>

08000942 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <BusFault_Handler+0x4>

0800094e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 fabe 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <ADC1_IRQHandler+0x10>)
 800098a:	f000 fd30 	bl	80013ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000210 	.word	0x20000210

08000998 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800099c:	2040      	movs	r0, #64	; 0x40
 800099e:	f001 fb1b 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80009a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009a6:	f001 fb17 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <USART1_IRQHandler+0x10>)
 80009b6:	f002 f95b 	bl	8002c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200002c0 	.word	0x200002c0

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f002 f951 	bl	8002c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000300 	.word	0x20000300

080009d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USART3_IRQHandler+0x10>)
 80009de:	f002 f947 	bl	8002c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000280 	.word	0x20000280

080009ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f4:	f001 faf0 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_read>:
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f3af 8000 	nop.w
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <_fstat>:
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	2300      	movs	r3, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <_lseek>:
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x16>
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <_sbrk+0x50>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <_sbrk+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <_sbrk+0x50>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_sbrk+0x50>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	466a      	mov	r2, sp
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d907      	bls.n	8000b0a <_sbrk+0x3a>
 8000afa:	f002 fc6f 	bl	80033dc <__errno>
 8000afe:	4602      	mov	r2, r0
 8000b00:	230c      	movs	r3, #12
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	e006      	b.n	8000b18 <_sbrk+0x48>
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <_sbrk+0x50>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <_sbrk+0x50>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000200 	.word	0x20000200
 8000b24:	20000348 	.word	0x20000348

08000b28 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <SystemInit+0x5c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <SystemInit+0x5c>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b36:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <SystemInit+0x5c>)
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	4911      	ldr	r1, [pc, #68]	; (8000b84 <SystemInit+0x5c>)
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <SystemInit+0x60>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <SystemInit+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <SystemInit+0x5c>)
 8000b4a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000b4e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000b52:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <SystemInit+0x5c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SystemInit+0x5c>)
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <SystemInit+0x5c>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <SystemInit+0x5c>)
 8000b66:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b6a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SystemInit+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x64>)
 8000b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b78:	609a      	str	r2, [r3, #8]
#endif
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	88ffc00c 	.word	0x88ffc00c
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART1_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART1_UART_Init+0x4c>)
 8000bc8:	f001 ff6c 	bl	8002aa4 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f7ff fcff 	bl	80005d4 <Error_Handler>
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002c0 	.word	0x200002c0
 8000be0:	40013800 	.word	0x40013800

08000be4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f001 ff42 	bl	8002aa4 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f7ff fcd5 	bl	80005d4 <Error_Handler>
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000300 	.word	0x20000300
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_USART3_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c70:	f001 ff18 	bl	8002aa4 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f7ff fcab 	bl	80005d4 <Error_Handler>
  }

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000280 	.word	0x20000280
 8000c88:	40004800 	.word	0x40004800

08000c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a52      	ldr	r2, [pc, #328]	; (8000df4 <HAL_UART_MspInit+0x168>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d131      	bne.n	8000d12 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4a51      	ldr	r2, [pc, #324]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6213      	str	r3, [r2, #32]
 8000cba:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	623b      	str	r3, [r7, #32]
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4840      	ldr	r0, [pc, #256]	; (8000dfc <HAL_UART_MspInit+0x170>)
 8000cfc:	f000 ffac 	bl	8001c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2025      	movs	r0, #37	; 0x25
 8000d06:	f000 ff30 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d0a:	2025      	movs	r0, #37	; 0x25
 8000d0c:	f000 ff49 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d10:	e06b      	b.n	8000dea <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a3a      	ldr	r2, [pc, #232]	; (8000e00 <HAL_UART_MspInit+0x174>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d130      	bne.n	8000d7e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	4a35      	ldr	r2, [pc, #212]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d26:	6253      	str	r3, [r2, #36]	; 0x24
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4825      	ldr	r0, [pc, #148]	; (8000dfc <HAL_UART_MspInit+0x170>)
 8000d68:	f000 ff76 	bl	8001c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f000 fefa 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f000 ff13 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8000d7c:	e035      	b.n	8000dea <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HAL_UART_MspInit+0x178>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d130      	bne.n	8000dea <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d92:	6253      	str	r3, [r2, #36]	; 0x24
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	61d3      	str	r3, [r2, #28]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_UART_MspInit+0x16c>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000db8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_UART_MspInit+0x17c>)
 8000dd6:	f000 ff3f 	bl	8001c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2027      	movs	r0, #39	; 0x27
 8000de0:	f000 fec3 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000de4:	2027      	movs	r0, #39	; 0x27
 8000de6:	f000 fedc 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	; 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40004400 	.word	0x40004400
 8000e04:	40004800 	.word	0x40004800
 8000e08:	40020400 	.word	0x40020400

08000e0c <Reset_Handler>:
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LoopFillZerobss+0x14>)
 8000e12:	585b      	ldr	r3, [r3, r1]
 8000e14:	5043      	str	r3, [r0, r1]
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <LoopFillZerobss+0x18>)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <LoopFillZerobss+0x1c>)
 8000e1c:	1842      	adds	r2, r0, r1
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopFillZerobss+0x20>)
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
 8000e26:	2300      	movs	r3, #0
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LoopFillZerobss+0x24>)
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>
 8000e32:	f7ff fe79 	bl	8000b28 <SystemInit>
 8000e36:	f002 fad7 	bl	80033e8 <__libc_init_array>
 8000e3a:	f7ff fb0d 	bl	8000458 <main>
 8000e3e:	4770      	bx	lr
 8000e40:	080048d8 	.word	0x080048d8
 8000e44:	20000000 	.word	0x20000000
 8000e48:	200001e0 	.word	0x200001e0
 8000e4c:	200001e0 	.word	0x200001e0
 8000e50:	20000348 	.word	0x20000348

08000e54 <COMP_ACQ_IRQHandler>:
 8000e54:	e7fe      	b.n	8000e54 <COMP_ACQ_IRQHandler>

08000e56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 fe77 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f80e 	bl	8000e88 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	e001      	b.n	8000e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e78:	f7ff fd2a 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_InitTick+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d022      	beq.n	8000ee2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_InitTick+0x68>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fe84 	bl	8001bbe <HAL_SYSTICK_Config>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10f      	bne.n	8000edc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	d809      	bhi.n	8000ed6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eca:	f000 fe4e 	bl	8001b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_InitTick+0x70>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e004      	b.n	8000ee6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x20>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000340 	.word	0x20000340
 8000f1c:	2000000c 	.word	0x2000000c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000340 	.word	0x20000340

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff fff0 	bl	8000f20 <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d004      	beq.n	8000f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_Delay+0x40>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f58:	bf00      	nop
 8000f5a:	f7ff ffe1 	bl	8000f20 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d8f7      	bhi.n	8000f5a <HAL_Delay+0x26>
  {
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000000c 	.word	0x2000000c

08000f78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e127      	b.n	80011e8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d115      	bne.n	8000fd2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb4:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <HAL_ADC_Init+0x278>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a8d      	ldr	r2, [pc, #564]	; (80011f0 <HAL_ADC_Init+0x278>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <HAL_ADC_Init+0x278>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff f92f 	bl	8000230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 80ff 	bne.w	80011de <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe8:	f023 0302 	bic.w	r3, r3, #2
 8000fec:	f043 0202 	orr.w	r2, r3, #2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000ff4:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <HAL_ADC_Init+0x27c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	497c      	ldr	r1, [pc, #496]	; (80011f4 <HAL_ADC_Init+0x27c>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800100e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001016:	4619      	mov	r1, r3
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fab3 f383 	clz	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001032:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001038:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800105a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800105c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105e:	4313      	orrs	r3, r2
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	2b10      	cmp	r3, #16
 8001068:	d007      	beq.n	800107a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001072:	4313      	orrs	r3, r2
 8001074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001076:	4313      	orrs	r3, r2
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	d04f      	beq.n	8001128 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800108e:	4313      	orrs	r3, r2
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800109a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6912      	ldr	r2, [r2, #16]
 80010a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80010a4:	d003      	beq.n	80010ae <HAL_ADC_Init+0x136>
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6912      	ldr	r2, [r2, #16]
 80010aa:	2a01      	cmp	r2, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_ADC_Init+0x13c>
 80010ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b2:	e000      	b.n	80010b6 <HAL_ADC_Init+0x13e>
 80010b4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80010b6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ba:	4313      	orrs	r3, r2
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d125      	bne.n	8001114 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d114      	bne.n	80010fc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80010dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	617a      	str	r2, [r7, #20]
  return result;
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f6:	4313      	orrs	r3, r2
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
 80010fa:	e00b      	b.n	8001114 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f043 0220 	orr.w	r2, r3, #32
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HAL_ADC_Init+0x280>)
 800111c:	4013      	ands	r3, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001124:	430b      	orrs	r3, r1
 8001126:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_ADC_Init+0x284>)
 8001130:	4013      	ands	r3, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001138:	430b      	orrs	r3, r1
 800113a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001144:	d003      	beq.n	800114e <HAL_ADC_Init+0x1d6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d119      	bne.n	8001182 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	3b01      	subs	r3, #1
 800115e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001162:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	fa92 f2a2 	rbit	r2, r2
 800116a:	60fa      	str	r2, [r7, #12]
  return result;
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	fab2 f282 	clz	r2, r2
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	fa03 f202 	lsl.w	r2, r3, r2
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
 8001180:	e007      	b.n	8001192 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_ADC_Init+0x288>)
 800119a:	4013      	ands	r3, r2
 800119c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800119e:	429a      	cmp	r2, r3
 80011a0:	d10b      	bne.n	80011ba <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	e014      	b.n	80011e4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f023 0312 	bic.w	r3, r3, #18
 80011c2:	f043 0210 	orr.w	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40012700 	.word	0x40012700
 80011f8:	fcfc16ff 	.word	0xfcfc16ff
 80011fc:	c0fff189 	.word	0xc0fff189
 8001200:	bf80fffe 	.word	0xbf80fffe

08001204 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_ADC_Start+0x1a>
 800121a:	2302      	movs	r3, #2
 800121c:	e04e      	b.n	80012bc <HAL_ADC_Start+0xb8>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fb68 	bl	80018fc <ADC_Enable>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d141      	bne.n	80012ba <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001274:	d106      	bne.n	8001284 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127a:	f023 0206 	bic.w	r2, r3, #6
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
 8001282:	e002      	b.n	800128a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800129a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d113      	bne.n	800130a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f0:	d10b      	bne.n	800130a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e061      	b.n	80013ce <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800130a:	f7ff fe09 	bl	8000f20 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001310:	e01a      	b.n	8001348 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d016      	beq.n	8001348 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_ADC_PollForConversion+0x6c>
 8001320:	f7ff fdfe 	bl	8000f20 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d20b      	bcs.n	8001348 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	f043 0204 	orr.w	r2, r3, #4
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e042      	b.n	80013ce <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0dd      	beq.n	8001312 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f06f 0212 	mvn.w	r2, #18
 8001366:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d124      	bne.n	80013cc <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d11f      	bne.n	80013cc <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	2b20      	cmp	r3, #32
 8001402:	d14e      	bne.n	80014a2 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b02      	cmp	r3, #2
 8001410:	d147      	bne.n	80014a2 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d12c      	bne.n	8001492 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d127      	bne.n	8001492 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800145a:	2b00      	cmp	r3, #0
 800145c:	d119      	bne.n	8001492 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0220 	bic.w	r2, r2, #32
 800146c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f8ab 	bl	80015ee <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f06f 0212 	mvn.w	r2, #18
 80014a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d15c      	bne.n	800156a <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d155      	bne.n	800156a <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d105      	bne.n	80014d6 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d13a      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12c      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d125      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11e      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001534:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d105      	bne.n	800155a <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fa24 	bl	80019a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 020c 	mvn.w	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001574:	2b40      	cmp	r3, #64	; 0x40
 8001576:	d114      	bne.n	80015a2 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10d      	bne.n	80015a2 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f834 	bl	8001600 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015b0:	d119      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d112      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0220 	mvn.w	r2, #32
 80015d4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f81b 	bl	8001612 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 0220 	mvn.w	r2, #32
 80015e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x20>
 8001640:	2302      	movs	r3, #2
 8001642:	e14f      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x2c0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b06      	cmp	r3, #6
 8001652:	d81c      	bhi.n	800168e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b05      	subs	r3, #5
 8001666:	221f      	movs	r2, #31
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	4019      	ands	r1, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b05      	subs	r3, #5
 8001680:	fa00 f203 	lsl.w	r2, r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
 800168c:	e07e      	b.n	800178c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d81c      	bhi.n	80016d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b23      	subs	r3, #35	; 0x23
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4019      	ands	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	fa00 f203 	lsl.w	r2, r0, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ce:	e05d      	b.n	800178c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d81c      	bhi.n	8001712 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b41      	subs	r3, #65	; 0x41
 80016ea:	221f      	movs	r2, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b41      	subs	r3, #65	; 0x41
 8001704:	fa00 f203 	lsl.w	r2, r0, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
 8001710:	e03c      	b.n	800178c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b18      	cmp	r3, #24
 8001718:	d81c      	bhi.n	8001754 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b5f      	subs	r3, #95	; 0x5f
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	4019      	ands	r1, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b5f      	subs	r3, #95	; 0x5f
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
 8001752:	e01b      	b.n	800178c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b7d      	subs	r3, #125	; 0x7d
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b7d      	subs	r3, #125	; 0x7d
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	d81a      	bhi.n	80017ca <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6959      	ldr	r1, [r3, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	2207      	movs	r2, #7
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4019      	ands	r1, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6898      	ldr	r0, [r3, #8]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	e05d      	b.n	8001886 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b13      	cmp	r3, #19
 80017d0:	d81c      	bhi.n	800180c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	2207      	movs	r2, #7
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4019      	ands	r1, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6898      	ldr	r0, [r3, #8]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1e      	subs	r3, #30
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	e03c      	b.n	8001886 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b1d      	cmp	r3, #29
 8001812:	d81c      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	3b3c      	subs	r3, #60	; 0x3c
 8001826:	2207      	movs	r2, #7
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	4019      	ands	r1, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6898      	ldr	r0, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	3b3c      	subs	r3, #60	; 0x3c
 8001840:	fa00 f203 	lsl.w	r2, r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	e01b      	b.n	8001886 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	3b5a      	subs	r3, #90	; 0x5a
 8001860:	2207      	movs	r2, #7
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	4019      	ands	r1, r3
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6898      	ldr	r0, [r3, #8]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	3b5a      	subs	r3, #90	; 0x5a
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d003      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001892:	2b11      	cmp	r3, #17
 8001894:	d121      	bne.n	80018da <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_ADC_ConfigChannel+0x2cc>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11b      	bne.n	80018da <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_ConfigChannel+0x2cc>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_ConfigChannel+0x2cc>)
 80018a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ac:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d111      	bne.n	80018da <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_ADC_ConfigChannel+0x2d0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_ADC_ConfigChannel+0x2d4>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	0c9a      	lsrs	r2, r3, #18
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f9      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40012700 	.word	0x40012700
 80018f4:	20000004 	.word	0x20000004
 80018f8:	431bde83 	.word	0x431bde83

080018fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d03c      	beq.n	8001994 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <ADC_Enable+0xa4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <ADC_Enable+0xa8>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	0c9a      	lsrs	r2, r3, #18
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800193e:	e002      	b.n	8001946 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3b01      	subs	r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800194c:	f7ff fae8 	bl	8000f20 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001952:	e018      	b.n	8001986 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001954:	f7ff fae4 	bl	8000f20 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d911      	bls.n	8001986 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e007      	b.n	8001996 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d1df      	bne.n	8001954 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000004 	.word	0x20000004
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4906      	ldr	r1, [pc, #24]	; (8001a54 <__NVIC_EnableIRQ+0x34>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff90 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff2d 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff42 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff90 	bl	8001aac <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5f 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff35 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d005      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e029      	b.n	8001c4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020e 	bic.w	r2, r2, #14
 8001c08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 021c 	and.w	r2, r3, #28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
    }
  }
  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c6e:	e160      	b.n	8001f32 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8152 	beq.w	8001f2c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x40>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	6939      	ldr	r1, [r7, #16]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d00b      	beq.n	8001d34 <HAL_GPIO_Init+0xdc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0201 	and.w	r2, r3, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80ac 	beq.w	8001f2c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_GPIO_Init+0x2f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	; (8001f4c <HAL_GPIO_Init+0x2f4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_GPIO_Init+0x2f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_GPIO_Init+0x2f8>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_GPIO_Init+0x2fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d025      	beq.n	8001e64 <HAL_GPIO_Init+0x20c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_GPIO_Init+0x300>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_Init+0x208>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_GPIO_Init+0x304>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d019      	beq.n	8001e5c <HAL_GPIO_Init+0x204>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_Init+0x200>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x30c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_Init+0x1fc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_GPIO_Init+0x310>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_Init+0x1f8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_GPIO_Init+0x314>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_Init+0x1f4>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e00c      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	e00a      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e50:	2305      	movs	r3, #5
 8001e52:	e008      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e64:	2300      	movs	r3, #0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e76:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_GPIO_Init+0x2f8>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ea8:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed2:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f ae97 	bne.w	8001c70 <HAL_GPIO_Init+0x18>
  } 
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	041a      	lsls	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe faf2 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e31d      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x264>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b91      	ldr	r3, [pc, #580]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d07b      	beq.n	8002132 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d006      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d10f      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06a      	beq.n	8002130 <HAL_RCC_OscConfig+0x128>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d166      	bne.n	8002130 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2f7      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x74>
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7e      	ldr	r2, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e02d      	b.n	80020d8 <HAL_RCC_OscConfig+0xd0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x96>
 8002084:	4b79      	ldr	r3, [pc, #484]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a78      	ldr	r2, [pc, #480]	; (800226c <HAL_RCC_OscConfig+0x264>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a75      	ldr	r2, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0xd0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0xb8>
 80020a6:	4b71      	ldr	r3, [pc, #452]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a70      	ldr	r2, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6e      	ldr	r3, [pc, #440]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6d      	ldr	r2, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xd0>
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a69      	ldr	r2, [pc, #420]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ff1e 	bl	8000f20 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ff1a 	bl	8000f20 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e2ad      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe ff0a 	bl	8000f20 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe ff06 	bl	8000f20 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e299      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002122:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x108>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d05a      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d119      	bne.n	800217e <HAL_RCC_OscConfig+0x176>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x160>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e276      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <HAL_RCC_OscConfig+0x264>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	493d      	ldr	r1, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217c:	e03a      	b.n	80021f4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCC_OscConfig+0x268>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fec8 	bl	8000f20 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe fec4 	bl	8000f20 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e257      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	492a      	ldr	r1, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
 80021c6:	e015      	b.n	80021f4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_RCC_OscConfig+0x268>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7fe fea7 	bl	8000f20 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d6:	f7fe fea3 	bl	8000f20 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e236      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_OscConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80b8 	beq.w	8002372 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d170      	bne.n	80022ea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_OscConfig+0x218>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e21a      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800222c:	429a      	cmp	r2, r3
 800222e:	d921      	bls.n	8002274 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fbd5 	bl	80029e4 <RCC_SetFlashLatencyFromMSIRange>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e208      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4906      	ldr	r1, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	061b      	lsls	r3, r3, #24
 8002264:	4901      	ldr	r1, [pc, #4]	; (800226c <HAL_RCC_OscConfig+0x264>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
 800226a:	e020      	b.n	80022ae <HAL_RCC_OscConfig+0x2a6>
 800226c:	40023800 	.word	0x40023800
 8002270:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002274:	4ba4      	ldr	r3, [pc, #656]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	49a1      	ldr	r1, [pc, #644]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002286:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	499c      	ldr	r1, [pc, #624]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fba0 	bl	80029e4 <RCC_SetFlashLatencyFromMSIRange>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1d3      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	0b5b      	lsrs	r3, r3, #13
 80022b4:	3301      	adds	r3, #1
 80022b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022be:	4a92      	ldr	r2, [pc, #584]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	0912      	lsrs	r2, r2, #4
 80022c4:	f002 020f 	and.w	r2, r2, #15
 80022c8:	4990      	ldr	r1, [pc, #576]	; (800250c <HAL_RCC_OscConfig+0x504>)
 80022ca:	5c8a      	ldrb	r2, [r1, r2]
 80022cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ce:	4a90      	ldr	r2, [pc, #576]	; (8002510 <HAL_RCC_OscConfig+0x508>)
 80022d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022d2:	4b90      	ldr	r3, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x50c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fdd6 	bl	8000e88 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d045      	beq.n	8002372 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	e1b5      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d029      	beq.n	8002346 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022f2:	4b89      	ldr	r3, [pc, #548]	; (8002518 <HAL_RCC_OscConfig+0x510>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe12 	bl	8000f20 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002300:	f7fe fe0e 	bl	8000f20 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1a1      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4977      	ldr	r1, [pc, #476]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	4972      	ldr	r1, [pc, #456]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x510>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fde8 	bl	8000f20 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002354:	f7fe fde4 	bl	8000f20 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e177      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002366:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d030      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x514>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7fe fdc8 	bl	8000f20 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe fdc4 	bl	8000f20 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e157      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023a6:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x38c>
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_OscConfig+0x514>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fdb1 	bl	8000f20 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fdad 	bl	8000f20 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e140      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80b5 	beq.w	8002558 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	4a41      	ldr	r2, [pc, #260]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6253      	str	r3, [r2, #36]	; 0x24
 800240a:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x518>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCC_OscConfig+0x518>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3d      	ldr	r2, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x518>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe fd75 	bl	8000f20 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fd71 	bl	8000f20 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e104      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_OscConfig+0x518>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x466>
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6353      	str	r3, [r2, #52]	; 0x34
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x4c2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x488>
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 800247c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002480:	6353      	str	r3, [r2, #52]	; 0x34
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 8002488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248c:	6353      	str	r3, [r2, #52]	; 0x34
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x4c2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6353      	str	r3, [r2, #52]	; 0x34
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6353      	str	r3, [r2, #52]	; 0x34
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x4c2>
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024bc:	6353      	str	r3, [r2, #52]	; 0x34
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024c8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fd25 	bl	8000f20 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fd21 	bl	8000f20 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0b2      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x4d2>
 80024fc:	e023      	b.n	8002546 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fd0f 	bl	8000f20 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002504:	e019      	b.n	800253a <HAL_RCC_OscConfig+0x532>
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	08004728 	.word	0x08004728
 8002510:	20000004 	.word	0x20000004
 8002514:	20000008 	.word	0x20000008
 8002518:	42470020 	.word	0x42470020
 800251c:	42470680 	.word	0x42470680
 8002520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe fcfc 	bl	8000f20 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e08d      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	4a43      	ldr	r2, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002556:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d079      	beq.n	8002654 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d056      	beq.n	8002614 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2b02      	cmp	r3, #2
 800256c:	d13b      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_RCC_OscConfig+0x65c>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fcd4 	bl	8000f20 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fcd0 	bl	8000f20 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e063      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	4319      	orrs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	430b      	orrs	r3, r1
 80025b2:	492b      	ldr	r1, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <HAL_RCC_OscConfig+0x65c>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fcaf 	bl	8000f20 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fcab 	bl	8000f20 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e03e      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x5be>
 80025e4:	e036      	b.n	8002654 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x65c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc98 	bl	8000f20 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fc94 	bl	8000f20 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e027      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5ec>
 8002612:	e01f      	b.n	8002654 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e01a      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_OscConfig+0x658>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	429a      	cmp	r2, r3
 8002632:	d10d      	bne.n	8002650 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	42470060 	.word	0x42470060

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e11a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b8f      	ldr	r3, [pc, #572]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d919      	bls.n	80026be <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_ClockConfig+0x34>
 8002690:	4b8a      	ldr	r3, [pc, #552]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a89      	ldr	r2, [pc, #548]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0201 	bic.w	r2, r3, #1
 80026a4:	4985      	ldr	r1, [pc, #532]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ac:	4b83      	ldr	r3, [pc, #524]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f9      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b7d      	ldr	r3, [pc, #500]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	497a      	ldr	r1, [pc, #488]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 808e 	beq.w	8002806 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f2:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d121      	bne.n	8002742 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0d7      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d115      	bne.n	8002742 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0bf      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0b7      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fe fbe4 	bl	8000f20 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d112      	bne.n	8002788 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fbdc 	bl	8000f20 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e09b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d1ee      	bne.n	8002764 <HAL_RCC_ClockConfig+0xfc>
 8002786:	e03e      	b.n	8002806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d112      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7fe fbc5 	bl	8000f20 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e084      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_ClockConfig+0x12a>
 80027b4:	e027      	b.n	8002806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d11d      	bne.n	80027fa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fbae 	bl	8000f20 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e06d      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x158>
 80027e2:	e010      	b.n	8002806 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7fe fb9c 	bl	8000f20 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e05b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d219      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCC_ClockConfig+0x1be>
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0201 	bic.w	r2, r3, #1
 800282e:	4923      	ldr	r1, [pc, #140]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCC_ClockConfig+0x254>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e034      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4917      	ldr	r1, [pc, #92]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490f      	ldr	r1, [pc, #60]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f823 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288a:	4601      	mov	r1, r0
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_ClockConfig+0x258>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x25c>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	fa21 f303 	lsr.w	r3, r1, r3
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x264>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe faee 	bl	8000e88 <HAL_InitTick>
 80028ac:	4603      	mov	r3, r0
 80028ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80028b0:	7afb      	ldrb	r3, [r7, #11]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08004728 	.word	0x08004728
 80028c8:	20000004 	.word	0x20000004
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d006      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x24>
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d007      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x2a>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d12c      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	613b      	str	r3, [r7, #16]
      break;
 80028f2:	e037      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_GetSysClockFreq+0xa8>)
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	e034      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_RCC_GetSysClockFreq+0xac>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0d9b      	lsrs	r3, r3, #22
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	3301      	adds	r3, #1
 8002912:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002924:	fb02 f203 	mul.w	r2, r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e007      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002936:	fb02 f203 	mul.w	r2, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	613b      	str	r3, [r7, #16]
      break;
 8002946:	e00d      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0b5b      	lsrs	r3, r3, #13
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	613b      	str	r3, [r7, #16]
      break;
 8002962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002964:	693b      	ldr	r3, [r7, #16]
}
 8002966:	4618      	mov	r0, r3
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40023800 	.word	0x40023800
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200
 800297c:	0800471c 	.word	0x0800471c

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <HAL_RCC_GetHCLKFreq+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002998:	f7ff fff2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800299c:	4601      	mov	r1, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08004738 	.word	0x08004738

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c0:	f7ff ffde 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c4:	4601      	mov	r1, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08004738 	.word	0x08004738

080029e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d12c      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e016      	b.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6253      	str	r3, [r2, #36]	; 0x24
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a34:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002a48:	d105      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a50:	d101      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a52:	2301      	movs	r3, #1
 8002a54:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0201 	bic.w	r2, r3, #1
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e03f      	b.n	8002b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f8de 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 faef 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d130      	bne.n	8002bba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Transmit_IT+0x26>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e029      	b.n	8002bbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Transmit_IT+0x38>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e022      	b.n	8002bbc <HAL_UART_Transmit_IT+0x7e>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2221      	movs	r2, #33	; 0x21
 8002b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d140      	bne.n	8002c62 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_UART_Receive_IT+0x26>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e039      	b.n	8002c64 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Receive_IT+0x38>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e032      	b.n	8002c64 <HAL_UART_Receive_IT+0x9e>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2222      	movs	r2, #34	; 0x22
 8002c22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x52>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f984 	bl	8002fc8 <UART_Receive_IT>
      return;
 8002cc0:	e0cc      	b.n	8002e5c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80ab 	beq.w	8002e20 <HAL_UART_IRQHandler+0x1b0>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x70>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a0 	beq.w	8002e20 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_UART_IRQHandler+0x90>
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_UART_IRQHandler+0xb0>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	f043 0202 	orr.w	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_UART_IRQHandler+0xd0>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_UART_IRQHandler+0xf0>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	f043 0208 	orr.w	r2, r3, #8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d078      	beq.n	8002e5a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_UART_IRQHandler+0x112>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f923 	bl	8002fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_UART_IRQHandler+0x13a>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d031      	beq.n	8002e0e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f86e 	bl	8002e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d123      	bne.n	8002e06 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d013      	beq.n	8002dfe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <HAL_UART_IRQHandler+0x1f4>)
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fef7 	bl	8001bd6 <HAL_DMA_Abort_IT>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00e      	b.n	8002e1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f83b 	bl	8002e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00a      	b.n	8002e1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f837 	bl	8002e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e006      	b.n	8002e1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f833 	bl	8002e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e1a:	e01e      	b.n	8002e5a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	bf00      	nop
    return;
 8002e1e:	e01c      	b.n	8002e5a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_UART_IRQHandler+0x1cc>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f85a 	bl	8002eee <UART_Transmit_IT>
    return;
 8002e3a:	e00f      	b.n	8002e5c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_UART_IRQHandler+0x1ec>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8a1 	bl	8002f98 <UART_EndTransmit_IT>
    return;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e5a:	bf00      	nop
  }
}
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08002ec7 	.word	0x08002ec7

08002e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ea2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff ffca 	bl	8002e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b21      	cmp	r3, #33	; 0x21
 8002f00:	d144      	bne.n	8002f8c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d11a      	bne.n	8002f42 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e00e      	b.n	8002f54 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	621a      	str	r2, [r3, #32]
 8002f40:	e008      	b.n	8002f54 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6211      	str	r1, [r2, #32]
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4619      	mov	r1, r3
 8002f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff55 	bl	8002e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b22      	cmp	r3, #34	; 0x22
 8002fda:	d171      	bne.n	80030c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe4:	d123      	bne.n	800302e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10e      	bne.n	8003012 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	e029      	b.n	8003066 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29b      	uxth	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
 800302c:	e01b      	b.n	8003066 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6858      	ldr	r0, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6291      	str	r1, [r2, #40]	; 0x28
 8003046:	b2c2      	uxtb	r2, r0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e00c      	b.n	8003066 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	1c58      	adds	r0, r3, #1
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	6288      	str	r0, [r1, #40]	; 0x28
 800305e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4619      	mov	r1, r3
 8003074:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003076:	2b00      	cmp	r3, #0
 8003078:	d120      	bne.n	80030bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0220 	bic.w	r2, r2, #32
 8003088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fa4e 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e002      	b.n	80030c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800310c:	f023 030c 	bic.w	r3, r3, #12
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	f040 80a5 	bne.w	8003286 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4aa4      	ldr	r2, [pc, #656]	; (80033d4 <UART_SetConfig+0x308>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d14f      	bne.n	80031e6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003146:	f7ff fc39 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 800314a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009a      	lsls	r2, r3, #2
 8003156:	441a      	add	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	4a9d      	ldr	r2, [pc, #628]	; (80033d8 <UART_SetConfig+0x30c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	0119      	lsls	r1, r3, #4
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <UART_SetConfig+0x30c>)
 8003184:	fba3 0302 	umull	r0, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2064      	movs	r0, #100	; 0x64
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a90      	ldr	r2, [pc, #576]	; (80033d8 <UART_SetConfig+0x30c>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a4:	4419      	add	r1, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <UART_SetConfig+0x30c>)
 80031be:	fba3 0302 	umull	r0, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2064      	movs	r0, #100	; 0x64
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a81      	ldr	r2, [pc, #516]	; (80033d8 <UART_SetConfig+0x30c>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 0207 	and.w	r2, r3, #7
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	440a      	add	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031e4:	e0f1      	b.n	80033ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e6:	f7ff fbd5 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 80031ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <UART_SetConfig+0x30c>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	0119      	lsls	r1, r3, #4
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003222:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <UART_SetConfig+0x30c>)
 8003224:	fba3 0302 	umull	r0, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2064      	movs	r0, #100	; 0x64
 800322c:	fb00 f303 	mul.w	r3, r0, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <UART_SetConfig+0x30c>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003244:	4419      	add	r1, r3
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <UART_SetConfig+0x30c>)
 800325e:	fba3 0302 	umull	r0, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2064      	movs	r0, #100	; 0x64
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <UART_SetConfig+0x30c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 0207 	and.w	r2, r3, #7
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	440a      	add	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	e0a1      	b.n	80033ca <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <UART_SetConfig+0x308>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d14e      	bne.n	800332e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff fb94 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8003294:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <UART_SetConfig+0x30c>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	0119      	lsls	r1, r3, #4
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <UART_SetConfig+0x30c>)
 80032ce:	fba3 0302 	umull	r0, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2064      	movs	r0, #100	; 0x64
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <UART_SetConfig+0x30c>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	4419      	add	r1, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <UART_SetConfig+0x30c>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <UART_SetConfig+0x30c>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	440a      	add	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	e04d      	b.n	80033ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800332e:	f7ff fb31 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003332:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <UART_SetConfig+0x30c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	0119      	lsls	r1, r3, #4
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	fbb2 f2f3 	udiv	r2, r2, r3
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <UART_SetConfig+0x30c>)
 800336c:	fba3 0302 	umull	r0, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2064      	movs	r0, #100	; 0x64
 8003374:	fb00 f303 	mul.w	r3, r0, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <UART_SetConfig+0x30c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338a:	4419      	add	r1, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <UART_SetConfig+0x30c>)
 80033a4:	fba3 0302 	umull	r0, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2064      	movs	r0, #100	; 0x64
 80033ac:	fb00 f303 	mul.w	r3, r0, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <UART_SetConfig+0x30c>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	440a      	add	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40013800 	.word	0x40013800
 80033d8:	51eb851f 	.word	0x51eb851f

080033dc <__errno>:
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <__errno+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000010 	.word	0x20000010

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	2500      	movs	r5, #0
 80033ec:	4e0c      	ldr	r6, [pc, #48]	; (8003420 <__libc_init_array+0x38>)
 80033ee:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033f0:	1ba4      	subs	r4, r4, r6
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	42a5      	cmp	r5, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	f001 f97e 	bl	80046f8 <_init>
 80033fc:	2500      	movs	r5, #0
 80033fe:	4e0a      	ldr	r6, [pc, #40]	; (8003428 <__libc_init_array+0x40>)
 8003400:	4c0a      	ldr	r4, [pc, #40]	; (800342c <__libc_init_array+0x44>)
 8003402:	1ba4      	subs	r4, r4, r6
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	42a5      	cmp	r5, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003410:	4798      	blx	r3
 8003412:	3501      	adds	r5, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341a:	4798      	blx	r3
 800341c:	3501      	adds	r5, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	080048d0 	.word	0x080048d0
 8003424:	080048d0 	.word	0x080048d0
 8003428:	080048d0 	.word	0x080048d0
 800342c:	080048d4 	.word	0x080048d4

08003430 <memset>:
 8003430:	4603      	mov	r3, r0
 8003432:	4402      	add	r2, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <iscanf>:
 8003440:	b40f      	push	{r0, r1, r2, r3}
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <iscanf+0x2c>)
 8003444:	b513      	push	{r0, r1, r4, lr}
 8003446:	681c      	ldr	r4, [r3, #0]
 8003448:	b124      	cbz	r4, 8003454 <iscanf+0x14>
 800344a:	69a3      	ldr	r3, [r4, #24]
 800344c:	b913      	cbnz	r3, 8003454 <iscanf+0x14>
 800344e:	4620      	mov	r0, r4
 8003450:	f000 f84e 	bl	80034f0 <__sinit>
 8003454:	ab05      	add	r3, sp, #20
 8003456:	9a04      	ldr	r2, [sp, #16]
 8003458:	6861      	ldr	r1, [r4, #4]
 800345a:	4620      	mov	r0, r4
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	f000 fa97 	bl	8003990 <_vfiscanf_r>
 8003462:	b002      	add	sp, #8
 8003464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003468:	b004      	add	sp, #16
 800346a:	4770      	bx	lr
 800346c:	20000010 	.word	0x20000010

08003470 <std>:
 8003470:	2300      	movs	r3, #0
 8003472:	b510      	push	{r4, lr}
 8003474:	4604      	mov	r4, r0
 8003476:	e9c0 3300 	strd	r3, r3, [r0]
 800347a:	6083      	str	r3, [r0, #8]
 800347c:	8181      	strh	r1, [r0, #12]
 800347e:	6643      	str	r3, [r0, #100]	; 0x64
 8003480:	81c2      	strh	r2, [r0, #14]
 8003482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003486:	6183      	str	r3, [r0, #24]
 8003488:	4619      	mov	r1, r3
 800348a:	2208      	movs	r2, #8
 800348c:	305c      	adds	r0, #92	; 0x5c
 800348e:	f7ff ffcf 	bl	8003430 <memset>
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <std+0x38>)
 8003494:	6224      	str	r4, [r4, #32]
 8003496:	6263      	str	r3, [r4, #36]	; 0x24
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <std+0x3c>)
 800349a:	62a3      	str	r3, [r4, #40]	; 0x28
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <std+0x40>)
 800349e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <std+0x44>)
 80034a2:	6323      	str	r3, [r4, #48]	; 0x30
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	bf00      	nop
 80034a8:	08003e3f 	.word	0x08003e3f
 80034ac:	08003e61 	.word	0x08003e61
 80034b0:	08003e99 	.word	0x08003e99
 80034b4:	08003ebd 	.word	0x08003ebd

080034b8 <_cleanup_r>:
 80034b8:	4901      	ldr	r1, [pc, #4]	; (80034c0 <_cleanup_r+0x8>)
 80034ba:	f000 b8a1 	b.w	8003600 <_fwalk_reent>
 80034be:	bf00      	nop
 80034c0:	0800439d 	.word	0x0800439d

080034c4 <__sfmoreglue>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2568      	movs	r5, #104	; 0x68
 80034c8:	1e4a      	subs	r2, r1, #1
 80034ca:	4355      	muls	r5, r2
 80034cc:	460e      	mov	r6, r1
 80034ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034d2:	f000 f8b3 	bl	800363c <_malloc_r>
 80034d6:	4604      	mov	r4, r0
 80034d8:	b140      	cbz	r0, 80034ec <__sfmoreglue+0x28>
 80034da:	2100      	movs	r1, #0
 80034dc:	e9c0 1600 	strd	r1, r6, [r0]
 80034e0:	300c      	adds	r0, #12
 80034e2:	60a0      	str	r0, [r4, #8]
 80034e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034e8:	f7ff ffa2 	bl	8003430 <memset>
 80034ec:	4620      	mov	r0, r4
 80034ee:	bd70      	pop	{r4, r5, r6, pc}

080034f0 <__sinit>:
 80034f0:	6983      	ldr	r3, [r0, #24]
 80034f2:	b510      	push	{r4, lr}
 80034f4:	4604      	mov	r4, r0
 80034f6:	bb33      	cbnz	r3, 8003546 <__sinit+0x56>
 80034f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80034fc:	6503      	str	r3, [r0, #80]	; 0x50
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <__sinit+0x58>)
 8003500:	4a12      	ldr	r2, [pc, #72]	; (800354c <__sinit+0x5c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6282      	str	r2, [r0, #40]	; 0x28
 8003506:	4298      	cmp	r0, r3
 8003508:	bf04      	itt	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	6183      	streq	r3, [r0, #24]
 800350e:	f000 f81f 	bl	8003550 <__sfp>
 8003512:	6060      	str	r0, [r4, #4]
 8003514:	4620      	mov	r0, r4
 8003516:	f000 f81b 	bl	8003550 <__sfp>
 800351a:	60a0      	str	r0, [r4, #8]
 800351c:	4620      	mov	r0, r4
 800351e:	f000 f817 	bl	8003550 <__sfp>
 8003522:	2200      	movs	r2, #0
 8003524:	60e0      	str	r0, [r4, #12]
 8003526:	2104      	movs	r1, #4
 8003528:	6860      	ldr	r0, [r4, #4]
 800352a:	f7ff ffa1 	bl	8003470 <std>
 800352e:	2201      	movs	r2, #1
 8003530:	2109      	movs	r1, #9
 8003532:	68a0      	ldr	r0, [r4, #8]
 8003534:	f7ff ff9c 	bl	8003470 <std>
 8003538:	2202      	movs	r2, #2
 800353a:	2112      	movs	r1, #18
 800353c:	68e0      	ldr	r0, [r4, #12]
 800353e:	f7ff ff97 	bl	8003470 <std>
 8003542:	2301      	movs	r3, #1
 8003544:	61a3      	str	r3, [r4, #24]
 8003546:	bd10      	pop	{r4, pc}
 8003548:	08004740 	.word	0x08004740
 800354c:	080034b9 	.word	0x080034b9

08003550 <__sfp>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <__sfp+0x70>)
 8003554:	4607      	mov	r7, r0
 8003556:	681e      	ldr	r6, [r3, #0]
 8003558:	69b3      	ldr	r3, [r6, #24]
 800355a:	b913      	cbnz	r3, 8003562 <__sfp+0x12>
 800355c:	4630      	mov	r0, r6
 800355e:	f7ff ffc7 	bl	80034f0 <__sinit>
 8003562:	3648      	adds	r6, #72	; 0x48
 8003564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	d503      	bpl.n	8003574 <__sfp+0x24>
 800356c:	6833      	ldr	r3, [r6, #0]
 800356e:	b133      	cbz	r3, 800357e <__sfp+0x2e>
 8003570:	6836      	ldr	r6, [r6, #0]
 8003572:	e7f7      	b.n	8003564 <__sfp+0x14>
 8003574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003578:	b16d      	cbz	r5, 8003596 <__sfp+0x46>
 800357a:	3468      	adds	r4, #104	; 0x68
 800357c:	e7f4      	b.n	8003568 <__sfp+0x18>
 800357e:	2104      	movs	r1, #4
 8003580:	4638      	mov	r0, r7
 8003582:	f7ff ff9f 	bl	80034c4 <__sfmoreglue>
 8003586:	6030      	str	r0, [r6, #0]
 8003588:	2800      	cmp	r0, #0
 800358a:	d1f1      	bne.n	8003570 <__sfp+0x20>
 800358c:	230c      	movs	r3, #12
 800358e:	4604      	mov	r4, r0
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4620      	mov	r0, r4
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <__sfp+0x74>)
 8003598:	6665      	str	r5, [r4, #100]	; 0x64
 800359a:	e9c4 5500 	strd	r5, r5, [r4]
 800359e:	60a5      	str	r5, [r4, #8]
 80035a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035a8:	2208      	movs	r2, #8
 80035aa:	4629      	mov	r1, r5
 80035ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035b0:	f7ff ff3e 	bl	8003430 <memset>
 80035b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035bc:	e7e9      	b.n	8003592 <__sfp+0x42>
 80035be:	bf00      	nop
 80035c0:	08004740 	.word	0x08004740
 80035c4:	ffff0001 	.word	0xffff0001

080035c8 <_fwalk>:
 80035c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035cc:	4688      	mov	r8, r1
 80035ce:	2600      	movs	r6, #0
 80035d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035d4:	b914      	cbnz	r4, 80035dc <_fwalk+0x14>
 80035d6:	4630      	mov	r0, r6
 80035d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035dc:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80035e0:	3f01      	subs	r7, #1
 80035e2:	d501      	bpl.n	80035e8 <_fwalk+0x20>
 80035e4:	6824      	ldr	r4, [r4, #0]
 80035e6:	e7f5      	b.n	80035d4 <_fwalk+0xc>
 80035e8:	89ab      	ldrh	r3, [r5, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d906      	bls.n	80035fc <_fwalk+0x34>
 80035ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035f2:	3301      	adds	r3, #1
 80035f4:	d002      	beq.n	80035fc <_fwalk+0x34>
 80035f6:	4628      	mov	r0, r5
 80035f8:	47c0      	blx	r8
 80035fa:	4306      	orrs	r6, r0
 80035fc:	3568      	adds	r5, #104	; 0x68
 80035fe:	e7ef      	b.n	80035e0 <_fwalk+0x18>

08003600 <_fwalk_reent>:
 8003600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003604:	4680      	mov	r8, r0
 8003606:	4689      	mov	r9, r1
 8003608:	2600      	movs	r6, #0
 800360a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800360e:	b914      	cbnz	r4, 8003616 <_fwalk_reent+0x16>
 8003610:	4630      	mov	r0, r6
 8003612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003616:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800361a:	3f01      	subs	r7, #1
 800361c:	d501      	bpl.n	8003622 <_fwalk_reent+0x22>
 800361e:	6824      	ldr	r4, [r4, #0]
 8003620:	e7f5      	b.n	800360e <_fwalk_reent+0xe>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d907      	bls.n	8003638 <_fwalk_reent+0x38>
 8003628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800362c:	3301      	adds	r3, #1
 800362e:	d003      	beq.n	8003638 <_fwalk_reent+0x38>
 8003630:	4629      	mov	r1, r5
 8003632:	4640      	mov	r0, r8
 8003634:	47c8      	blx	r9
 8003636:	4306      	orrs	r6, r0
 8003638:	3568      	adds	r5, #104	; 0x68
 800363a:	e7ee      	b.n	800361a <_fwalk_reent+0x1a>

0800363c <_malloc_r>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	1ccd      	adds	r5, r1, #3
 8003640:	f025 0503 	bic.w	r5, r5, #3
 8003644:	3508      	adds	r5, #8
 8003646:	2d0c      	cmp	r5, #12
 8003648:	bf38      	it	cc
 800364a:	250c      	movcc	r5, #12
 800364c:	2d00      	cmp	r5, #0
 800364e:	4606      	mov	r6, r0
 8003650:	db01      	blt.n	8003656 <_malloc_r+0x1a>
 8003652:	42a9      	cmp	r1, r5
 8003654:	d903      	bls.n	800365e <_malloc_r+0x22>
 8003656:	230c      	movs	r3, #12
 8003658:	6033      	str	r3, [r6, #0]
 800365a:	2000      	movs	r0, #0
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	f000 ff8c 	bl	800457a <__malloc_lock>
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <_malloc_r+0xac>)
 8003664:	6814      	ldr	r4, [r2, #0]
 8003666:	4621      	mov	r1, r4
 8003668:	b991      	cbnz	r1, 8003690 <_malloc_r+0x54>
 800366a:	4c20      	ldr	r4, [pc, #128]	; (80036ec <_malloc_r+0xb0>)
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	b91b      	cbnz	r3, 8003678 <_malloc_r+0x3c>
 8003670:	4630      	mov	r0, r6
 8003672:	f000 fba3 	bl	8003dbc <_sbrk_r>
 8003676:	6020      	str	r0, [r4, #0]
 8003678:	4629      	mov	r1, r5
 800367a:	4630      	mov	r0, r6
 800367c:	f000 fb9e 	bl	8003dbc <_sbrk_r>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d124      	bne.n	80036ce <_malloc_r+0x92>
 8003684:	230c      	movs	r3, #12
 8003686:	4630      	mov	r0, r6
 8003688:	6033      	str	r3, [r6, #0]
 800368a:	f000 ff77 	bl	800457c <__malloc_unlock>
 800368e:	e7e4      	b.n	800365a <_malloc_r+0x1e>
 8003690:	680b      	ldr	r3, [r1, #0]
 8003692:	1b5b      	subs	r3, r3, r5
 8003694:	d418      	bmi.n	80036c8 <_malloc_r+0x8c>
 8003696:	2b0b      	cmp	r3, #11
 8003698:	d90f      	bls.n	80036ba <_malloc_r+0x7e>
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	18cc      	adds	r4, r1, r3
 800369e:	50cd      	str	r5, [r1, r3]
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 ff6b 	bl	800457c <__malloc_unlock>
 80036a6:	f104 000b 	add.w	r0, r4, #11
 80036aa:	1d23      	adds	r3, r4, #4
 80036ac:	f020 0007 	bic.w	r0, r0, #7
 80036b0:	1ac3      	subs	r3, r0, r3
 80036b2:	d0d3      	beq.n	800365c <_malloc_r+0x20>
 80036b4:	425a      	negs	r2, r3
 80036b6:	50e2      	str	r2, [r4, r3]
 80036b8:	e7d0      	b.n	800365c <_malloc_r+0x20>
 80036ba:	684b      	ldr	r3, [r1, #4]
 80036bc:	428c      	cmp	r4, r1
 80036be:	bf16      	itet	ne
 80036c0:	6063      	strne	r3, [r4, #4]
 80036c2:	6013      	streq	r3, [r2, #0]
 80036c4:	460c      	movne	r4, r1
 80036c6:	e7eb      	b.n	80036a0 <_malloc_r+0x64>
 80036c8:	460c      	mov	r4, r1
 80036ca:	6849      	ldr	r1, [r1, #4]
 80036cc:	e7cc      	b.n	8003668 <_malloc_r+0x2c>
 80036ce:	1cc4      	adds	r4, r0, #3
 80036d0:	f024 0403 	bic.w	r4, r4, #3
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d005      	beq.n	80036e4 <_malloc_r+0xa8>
 80036d8:	1a21      	subs	r1, r4, r0
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 fb6e 	bl	8003dbc <_sbrk_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d0cf      	beq.n	8003684 <_malloc_r+0x48>
 80036e4:	6025      	str	r5, [r4, #0]
 80036e6:	e7db      	b.n	80036a0 <_malloc_r+0x64>
 80036e8:	20000204 	.word	0x20000204
 80036ec:	20000208 	.word	0x20000208

080036f0 <__svfiscanf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460c      	mov	r4, r1
 80036f6:	2100      	movs	r1, #0
 80036f8:	4606      	mov	r6, r0
 80036fa:	4692      	mov	sl, r2
 80036fc:	270a      	movs	r7, #10
 80036fe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003702:	9144      	str	r1, [sp, #272]	; 0x110
 8003704:	9145      	str	r1, [sp, #276]	; 0x114
 8003706:	499e      	ldr	r1, [pc, #632]	; (8003980 <__svfiscanf_r+0x290>)
 8003708:	f10d 0804 	add.w	r8, sp, #4
 800370c:	91a0      	str	r1, [sp, #640]	; 0x280
 800370e:	499d      	ldr	r1, [pc, #628]	; (8003984 <__svfiscanf_r+0x294>)
 8003710:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8003988 <__svfiscanf_r+0x298>
 8003714:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003718:	91a1      	str	r1, [sp, #644]	; 0x284
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	f89a 3000 	ldrb.w	r3, [sl]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 812a 	beq.w	800397a <__svfiscanf_r+0x28a>
 8003726:	4655      	mov	r5, sl
 8003728:	f000 fe78 	bl	800441c <__locale_ctype_ptr>
 800372c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8003730:	4458      	add	r0, fp
 8003732:	7843      	ldrb	r3, [r0, #1]
 8003734:	f013 0308 	ands.w	r3, r3, #8
 8003738:	d01c      	beq.n	8003774 <__svfiscanf_r+0x84>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	dd12      	ble.n	8003766 <__svfiscanf_r+0x76>
 8003740:	f000 fe6c 	bl	800441c <__locale_ctype_ptr>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	4410      	add	r0, r2
 800374a:	7842      	ldrb	r2, [r0, #1]
 800374c:	0712      	lsls	r2, r2, #28
 800374e:	d401      	bmi.n	8003754 <__svfiscanf_r+0x64>
 8003750:	46aa      	mov	sl, r5
 8003752:	e7e3      	b.n	800371c <__svfiscanf_r+0x2c>
 8003754:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003756:	3301      	adds	r3, #1
 8003758:	3201      	adds	r2, #1
 800375a:	9245      	str	r2, [sp, #276]	; 0x114
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	6023      	str	r3, [r4, #0]
 8003760:	3a01      	subs	r2, #1
 8003762:	6062      	str	r2, [r4, #4]
 8003764:	e7e9      	b.n	800373a <__svfiscanf_r+0x4a>
 8003766:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003768:	4621      	mov	r1, r4
 800376a:	4630      	mov	r0, r6
 800376c:	4798      	blx	r3
 800376e:	2800      	cmp	r0, #0
 8003770:	d0e6      	beq.n	8003740 <__svfiscanf_r+0x50>
 8003772:	e7ed      	b.n	8003750 <__svfiscanf_r+0x60>
 8003774:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003778:	f040 8082 	bne.w	8003880 <__svfiscanf_r+0x190>
 800377c:	9343      	str	r3, [sp, #268]	; 0x10c
 800377e:	9341      	str	r3, [sp, #260]	; 0x104
 8003780:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003784:	2b2a      	cmp	r3, #42	; 0x2a
 8003786:	d103      	bne.n	8003790 <__svfiscanf_r+0xa0>
 8003788:	2310      	movs	r3, #16
 800378a:	f10a 0502 	add.w	r5, sl, #2
 800378e:	9341      	str	r3, [sp, #260]	; 0x104
 8003790:	46aa      	mov	sl, r5
 8003792:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003796:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800379a:	2a09      	cmp	r2, #9
 800379c:	d922      	bls.n	80037e4 <__svfiscanf_r+0xf4>
 800379e:	2203      	movs	r2, #3
 80037a0:	4879      	ldr	r0, [pc, #484]	; (8003988 <__svfiscanf_r+0x298>)
 80037a2:	f000 fed1 	bl	8004548 <memchr>
 80037a6:	b138      	cbz	r0, 80037b8 <__svfiscanf_r+0xc8>
 80037a8:	eba0 0309 	sub.w	r3, r0, r9
 80037ac:	2001      	movs	r0, #1
 80037ae:	46aa      	mov	sl, r5
 80037b0:	4098      	lsls	r0, r3
 80037b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80037b4:	4318      	orrs	r0, r3
 80037b6:	9041      	str	r0, [sp, #260]	; 0x104
 80037b8:	f89a 3000 	ldrb.w	r3, [sl]
 80037bc:	f10a 0501 	add.w	r5, sl, #1
 80037c0:	2b67      	cmp	r3, #103	; 0x67
 80037c2:	d82b      	bhi.n	800381c <__svfiscanf_r+0x12c>
 80037c4:	2b65      	cmp	r3, #101	; 0x65
 80037c6:	f080 809f 	bcs.w	8003908 <__svfiscanf_r+0x218>
 80037ca:	2b47      	cmp	r3, #71	; 0x47
 80037cc:	d810      	bhi.n	80037f0 <__svfiscanf_r+0x100>
 80037ce:	2b45      	cmp	r3, #69	; 0x45
 80037d0:	f080 809a 	bcs.w	8003908 <__svfiscanf_r+0x218>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06c      	beq.n	80038b2 <__svfiscanf_r+0x1c2>
 80037d8:	2b25      	cmp	r3, #37	; 0x25
 80037da:	d051      	beq.n	8003880 <__svfiscanf_r+0x190>
 80037dc:	2303      	movs	r3, #3
 80037de:	9742      	str	r7, [sp, #264]	; 0x108
 80037e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80037e2:	e027      	b.n	8003834 <__svfiscanf_r+0x144>
 80037e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80037e6:	fb07 1303 	mla	r3, r7, r3, r1
 80037ea:	3b30      	subs	r3, #48	; 0x30
 80037ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80037ee:	e7cf      	b.n	8003790 <__svfiscanf_r+0xa0>
 80037f0:	2b5b      	cmp	r3, #91	; 0x5b
 80037f2:	d06a      	beq.n	80038ca <__svfiscanf_r+0x1da>
 80037f4:	d80c      	bhi.n	8003810 <__svfiscanf_r+0x120>
 80037f6:	2b58      	cmp	r3, #88	; 0x58
 80037f8:	d1f0      	bne.n	80037dc <__svfiscanf_r+0xec>
 80037fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	9241      	str	r2, [sp, #260]	; 0x104
 8003802:	2210      	movs	r2, #16
 8003804:	9242      	str	r2, [sp, #264]	; 0x108
 8003806:	2b6e      	cmp	r3, #110	; 0x6e
 8003808:	bf8c      	ite	hi
 800380a:	2304      	movhi	r3, #4
 800380c:	2303      	movls	r3, #3
 800380e:	e010      	b.n	8003832 <__svfiscanf_r+0x142>
 8003810:	2b63      	cmp	r3, #99	; 0x63
 8003812:	d065      	beq.n	80038e0 <__svfiscanf_r+0x1f0>
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d1e1      	bne.n	80037dc <__svfiscanf_r+0xec>
 8003818:	9742      	str	r7, [sp, #264]	; 0x108
 800381a:	e7f4      	b.n	8003806 <__svfiscanf_r+0x116>
 800381c:	2b70      	cmp	r3, #112	; 0x70
 800381e:	d04b      	beq.n	80038b8 <__svfiscanf_r+0x1c8>
 8003820:	d826      	bhi.n	8003870 <__svfiscanf_r+0x180>
 8003822:	2b6e      	cmp	r3, #110	; 0x6e
 8003824:	d062      	beq.n	80038ec <__svfiscanf_r+0x1fc>
 8003826:	d84c      	bhi.n	80038c2 <__svfiscanf_r+0x1d2>
 8003828:	2b69      	cmp	r3, #105	; 0x69
 800382a:	d1d7      	bne.n	80037dc <__svfiscanf_r+0xec>
 800382c:	2300      	movs	r3, #0
 800382e:	9342      	str	r3, [sp, #264]	; 0x108
 8003830:	2303      	movs	r3, #3
 8003832:	9347      	str	r3, [sp, #284]	; 0x11c
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd68      	ble.n	800390c <__svfiscanf_r+0x21c>
 800383a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800383c:	0659      	lsls	r1, r3, #25
 800383e:	d407      	bmi.n	8003850 <__svfiscanf_r+0x160>
 8003840:	f000 fdec 	bl	800441c <__locale_ctype_ptr>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	4410      	add	r0, r2
 800384a:	7842      	ldrb	r2, [r0, #1]
 800384c:	0712      	lsls	r2, r2, #28
 800384e:	d464      	bmi.n	800391a <__svfiscanf_r+0x22a>
 8003850:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003852:	2b02      	cmp	r3, #2
 8003854:	dc73      	bgt.n	800393e <__svfiscanf_r+0x24e>
 8003856:	466b      	mov	r3, sp
 8003858:	4622      	mov	r2, r4
 800385a:	a941      	add	r1, sp, #260	; 0x104
 800385c:	4630      	mov	r0, r6
 800385e:	f000 f8bf 	bl	80039e0 <_scanf_chars>
 8003862:	2801      	cmp	r0, #1
 8003864:	f000 8089 	beq.w	800397a <__svfiscanf_r+0x28a>
 8003868:	2802      	cmp	r0, #2
 800386a:	f47f af71 	bne.w	8003750 <__svfiscanf_r+0x60>
 800386e:	e01d      	b.n	80038ac <__svfiscanf_r+0x1bc>
 8003870:	2b75      	cmp	r3, #117	; 0x75
 8003872:	d0d1      	beq.n	8003818 <__svfiscanf_r+0x128>
 8003874:	2b78      	cmp	r3, #120	; 0x78
 8003876:	d0c0      	beq.n	80037fa <__svfiscanf_r+0x10a>
 8003878:	2b73      	cmp	r3, #115	; 0x73
 800387a:	d1af      	bne.n	80037dc <__svfiscanf_r+0xec>
 800387c:	2302      	movs	r3, #2
 800387e:	e7d8      	b.n	8003832 <__svfiscanf_r+0x142>
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	dd0c      	ble.n	80038a0 <__svfiscanf_r+0x1b0>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	455a      	cmp	r2, fp
 800388c:	d175      	bne.n	800397a <__svfiscanf_r+0x28a>
 800388e:	3301      	adds	r3, #1
 8003890:	6862      	ldr	r2, [r4, #4]
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003896:	3a01      	subs	r2, #1
 8003898:	3301      	adds	r3, #1
 800389a:	6062      	str	r2, [r4, #4]
 800389c:	9345      	str	r3, [sp, #276]	; 0x114
 800389e:	e757      	b.n	8003750 <__svfiscanf_r+0x60>
 80038a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80038a2:	4621      	mov	r1, r4
 80038a4:	4630      	mov	r0, r6
 80038a6:	4798      	blx	r3
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0ec      	beq.n	8003886 <__svfiscanf_r+0x196>
 80038ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d159      	bne.n	8003966 <__svfiscanf_r+0x276>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	e05c      	b.n	8003972 <__svfiscanf_r+0x282>
 80038b8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80038ba:	f042 0220 	orr.w	r2, r2, #32
 80038be:	9241      	str	r2, [sp, #260]	; 0x104
 80038c0:	e79b      	b.n	80037fa <__svfiscanf_r+0x10a>
 80038c2:	2308      	movs	r3, #8
 80038c4:	9342      	str	r3, [sp, #264]	; 0x108
 80038c6:	2304      	movs	r3, #4
 80038c8:	e7b3      	b.n	8003832 <__svfiscanf_r+0x142>
 80038ca:	4629      	mov	r1, r5
 80038cc:	4640      	mov	r0, r8
 80038ce:	f000 fa85 	bl	8003ddc <__sccl>
 80038d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80038d4:	4605      	mov	r5, r0
 80038d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038da:	9341      	str	r3, [sp, #260]	; 0x104
 80038dc:	2301      	movs	r3, #1
 80038de:	e7a8      	b.n	8003832 <__svfiscanf_r+0x142>
 80038e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80038e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e6:	9341      	str	r3, [sp, #260]	; 0x104
 80038e8:	2300      	movs	r3, #0
 80038ea:	e7a2      	b.n	8003832 <__svfiscanf_r+0x142>
 80038ec:	9841      	ldr	r0, [sp, #260]	; 0x104
 80038ee:	06c3      	lsls	r3, r0, #27
 80038f0:	f53f af2e 	bmi.w	8003750 <__svfiscanf_r+0x60>
 80038f4:	9b00      	ldr	r3, [sp, #0]
 80038f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80038f8:	1d19      	adds	r1, r3, #4
 80038fa:	9100      	str	r1, [sp, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	07c0      	lsls	r0, r0, #31
 8003900:	bf4c      	ite	mi
 8003902:	801a      	strhmi	r2, [r3, #0]
 8003904:	601a      	strpl	r2, [r3, #0]
 8003906:	e723      	b.n	8003750 <__svfiscanf_r+0x60>
 8003908:	2305      	movs	r3, #5
 800390a:	e792      	b.n	8003832 <__svfiscanf_r+0x142>
 800390c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800390e:	4621      	mov	r1, r4
 8003910:	4630      	mov	r0, r6
 8003912:	4798      	blx	r3
 8003914:	2800      	cmp	r0, #0
 8003916:	d090      	beq.n	800383a <__svfiscanf_r+0x14a>
 8003918:	e7c8      	b.n	80038ac <__svfiscanf_r+0x1bc>
 800391a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800391c:	3201      	adds	r2, #1
 800391e:	9245      	str	r2, [sp, #276]	; 0x114
 8003920:	6862      	ldr	r2, [r4, #4]
 8003922:	3a01      	subs	r2, #1
 8003924:	2a00      	cmp	r2, #0
 8003926:	6062      	str	r2, [r4, #4]
 8003928:	dd02      	ble.n	8003930 <__svfiscanf_r+0x240>
 800392a:	3301      	adds	r3, #1
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	e787      	b.n	8003840 <__svfiscanf_r+0x150>
 8003930:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003932:	4621      	mov	r1, r4
 8003934:	4630      	mov	r0, r6
 8003936:	4798      	blx	r3
 8003938:	2800      	cmp	r0, #0
 800393a:	d081      	beq.n	8003840 <__svfiscanf_r+0x150>
 800393c:	e7b6      	b.n	80038ac <__svfiscanf_r+0x1bc>
 800393e:	2b04      	cmp	r3, #4
 8003940:	dc06      	bgt.n	8003950 <__svfiscanf_r+0x260>
 8003942:	466b      	mov	r3, sp
 8003944:	4622      	mov	r2, r4
 8003946:	a941      	add	r1, sp, #260	; 0x104
 8003948:	4630      	mov	r0, r6
 800394a:	f000 f8ab 	bl	8003aa4 <_scanf_i>
 800394e:	e788      	b.n	8003862 <__svfiscanf_r+0x172>
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <__svfiscanf_r+0x29c>)
 8003952:	2b00      	cmp	r3, #0
 8003954:	f43f aefc 	beq.w	8003750 <__svfiscanf_r+0x60>
 8003958:	466b      	mov	r3, sp
 800395a:	4622      	mov	r2, r4
 800395c:	a941      	add	r1, sp, #260	; 0x104
 800395e:	4630      	mov	r0, r6
 8003960:	f3af 8000 	nop.w
 8003964:	e77d      	b.n	8003862 <__svfiscanf_r+0x172>
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f013 0f40 	tst.w	r3, #64	; 0x40
 800396c:	bf18      	it	ne
 800396e:	f04f 30ff 	movne.w	r0, #4294967295
 8003972:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800397c:	e7f9      	b.n	8003972 <__svfiscanf_r+0x282>
 800397e:	bf00      	nop
 8003980:	08004169 	.word	0x08004169
 8003984:	08003ca5 	.word	0x08003ca5
 8003988:	080047a4 	.word	0x080047a4
 800398c:	00000000 	.word	0x00000000

08003990 <_vfiscanf_r>:
 8003990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003994:	460c      	mov	r4, r1
 8003996:	4616      	mov	r6, r2
 8003998:	461f      	mov	r7, r3
 800399a:	4605      	mov	r5, r0
 800399c:	b118      	cbz	r0, 80039a6 <_vfiscanf_r+0x16>
 800399e:	6983      	ldr	r3, [r0, #24]
 80039a0:	b90b      	cbnz	r3, 80039a6 <_vfiscanf_r+0x16>
 80039a2:	f7ff fda5 	bl	80034f0 <__sinit>
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <_vfiscanf_r+0x44>)
 80039a8:	429c      	cmp	r4, r3
 80039aa:	d108      	bne.n	80039be <_vfiscanf_r+0x2e>
 80039ac:	686c      	ldr	r4, [r5, #4]
 80039ae:	463b      	mov	r3, r7
 80039b0:	4632      	mov	r2, r6
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ba:	f7ff be99 	b.w	80036f0 <__svfiscanf_r>
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <_vfiscanf_r+0x48>)
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d101      	bne.n	80039c8 <_vfiscanf_r+0x38>
 80039c4:	68ac      	ldr	r4, [r5, #8]
 80039c6:	e7f2      	b.n	80039ae <_vfiscanf_r+0x1e>
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <_vfiscanf_r+0x4c>)
 80039ca:	429c      	cmp	r4, r3
 80039cc:	bf08      	it	eq
 80039ce:	68ec      	ldreq	r4, [r5, #12]
 80039d0:	e7ed      	b.n	80039ae <_vfiscanf_r+0x1e>
 80039d2:	bf00      	nop
 80039d4:	08004764 	.word	0x08004764
 80039d8:	08004784 	.word	0x08004784
 80039dc:	08004744 	.word	0x08004744

080039e0 <_scanf_chars>:
 80039e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e4:	4615      	mov	r5, r2
 80039e6:	688a      	ldr	r2, [r1, #8]
 80039e8:	4680      	mov	r8, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	b932      	cbnz	r2, 80039fc <_scanf_chars+0x1c>
 80039ee:	698a      	ldr	r2, [r1, #24]
 80039f0:	2a00      	cmp	r2, #0
 80039f2:	bf14      	ite	ne
 80039f4:	f04f 32ff 	movne.w	r2, #4294967295
 80039f8:	2201      	moveq	r2, #1
 80039fa:	608a      	str	r2, [r1, #8]
 80039fc:	2600      	movs	r6, #0
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	06d1      	lsls	r1, r2, #27
 8003a02:	bf5f      	itttt	pl
 8003a04:	681a      	ldrpl	r2, [r3, #0]
 8003a06:	1d11      	addpl	r1, r2, #4
 8003a08:	6019      	strpl	r1, [r3, #0]
 8003a0a:	6817      	ldrpl	r7, [r2, #0]
 8003a0c:	69a3      	ldr	r3, [r4, #24]
 8003a0e:	b1db      	cbz	r3, 8003a48 <_scanf_chars+0x68>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <_scanf_chars+0x44>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	6962      	ldr	r2, [r4, #20]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	b9a3      	cbnz	r3, 8003a48 <_scanf_chars+0x68>
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d131      	bne.n	8003a86 <_scanf_chars+0xa6>
 8003a22:	e006      	b.n	8003a32 <_scanf_chars+0x52>
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d007      	beq.n	8003a38 <_scanf_chars+0x58>
 8003a28:	2e00      	cmp	r6, #0
 8003a2a:	d12c      	bne.n	8003a86 <_scanf_chars+0xa6>
 8003a2c:	69a3      	ldr	r3, [r4, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d129      	bne.n	8003a86 <_scanf_chars+0xa6>
 8003a32:	2001      	movs	r0, #1
 8003a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a38:	f000 fcf0 	bl	800441c <__locale_ctype_ptr>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4418      	add	r0, r3
 8003a42:	7843      	ldrb	r3, [r0, #1]
 8003a44:	071b      	lsls	r3, r3, #28
 8003a46:	d4ef      	bmi.n	8003a28 <_scanf_chars+0x48>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	06da      	lsls	r2, r3, #27
 8003a4e:	bf5e      	ittt	pl
 8003a50:	682b      	ldrpl	r3, [r5, #0]
 8003a52:	781b      	ldrbpl	r3, [r3, #0]
 8003a54:	703b      	strbpl	r3, [r7, #0]
 8003a56:	682a      	ldr	r2, [r5, #0]
 8003a58:	686b      	ldr	r3, [r5, #4]
 8003a5a:	f102 0201 	add.w	r2, r2, #1
 8003a5e:	602a      	str	r2, [r5, #0]
 8003a60:	68a2      	ldr	r2, [r4, #8]
 8003a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a66:	f102 32ff 	add.w	r2, r2, #4294967295
 8003a6a:	606b      	str	r3, [r5, #4]
 8003a6c:	bf58      	it	pl
 8003a6e:	3701      	addpl	r7, #1
 8003a70:	60a2      	str	r2, [r4, #8]
 8003a72:	b142      	cbz	r2, 8003a86 <_scanf_chars+0xa6>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dcc9      	bgt.n	8003a0c <_scanf_chars+0x2c>
 8003a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4798      	blx	r3
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d0c2      	beq.n	8003a0c <_scanf_chars+0x2c>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f013 0310 	ands.w	r3, r3, #16
 8003a8c:	d105      	bne.n	8003a9a <_scanf_chars+0xba>
 8003a8e:	68e2      	ldr	r2, [r4, #12]
 8003a90:	3201      	adds	r2, #1
 8003a92:	60e2      	str	r2, [r4, #12]
 8003a94:	69a2      	ldr	r2, [r4, #24]
 8003a96:	b102      	cbz	r2, 8003a9a <_scanf_chars+0xba>
 8003a98:	703b      	strb	r3, [r7, #0]
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	441e      	add	r6, r3
 8003aa0:	6126      	str	r6, [r4, #16]
 8003aa2:	e7c7      	b.n	8003a34 <_scanf_chars+0x54>

08003aa4 <_scanf_i>:
 8003aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	469a      	mov	sl, r3
 8003aac:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <_scanf_i+0x1dc>)
 8003aae:	b087      	sub	sp, #28
 8003ab0:	4683      	mov	fp, r0
 8003ab2:	4616      	mov	r6, r2
 8003ab4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	68a7      	ldr	r7, [r4, #8]
 8003abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ac0:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <_scanf_i+0x1e0>)
 8003ac2:	69a1      	ldr	r1, [r4, #24]
 8003ac4:	4a70      	ldr	r2, [pc, #448]	; (8003c88 <_scanf_i+0x1e4>)
 8003ac6:	f104 091c 	add.w	r9, r4, #28
 8003aca:	2903      	cmp	r1, #3
 8003acc:	bf08      	it	eq
 8003ace:	461a      	moveq	r2, r3
 8003ad0:	1e7b      	subs	r3, r7, #1
 8003ad2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003ad6:	bf84      	itt	hi
 8003ad8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003adc:	60a3      	strhi	r3, [r4, #8]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	bf88      	it	hi
 8003ae2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003ae6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	bf98      	it	ls
 8003aee:	2700      	movls	r7, #0
 8003af0:	464b      	mov	r3, r9
 8003af2:	f04f 0800 	mov.w	r8, #0
 8003af6:	9200      	str	r2, [sp, #0]
 8003af8:	bf88      	it	hi
 8003afa:	197f      	addhi	r7, r7, r5
 8003afc:	6831      	ldr	r1, [r6, #0]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003b06:	2202      	movs	r2, #2
 8003b08:	7809      	ldrb	r1, [r1, #0]
 8003b0a:	f000 fd1d 	bl	8004548 <memchr>
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	b330      	cbz	r0, 8003b60 <_scanf_i+0xbc>
 8003b12:	f1b8 0f01 	cmp.w	r8, #1
 8003b16:	d15a      	bne.n	8003bce <_scanf_i+0x12a>
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	b92a      	cbnz	r2, 8003b28 <_scanf_i+0x84>
 8003b1c:	2108      	movs	r1, #8
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	6061      	str	r1, [r4, #4]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	6022      	str	r2, [r4, #0]
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003b2e:	6022      	str	r2, [r4, #0]
 8003b30:	68a2      	ldr	r2, [r4, #8]
 8003b32:	1e51      	subs	r1, r2, #1
 8003b34:	60a1      	str	r1, [r4, #8]
 8003b36:	b19a      	cbz	r2, 8003b60 <_scanf_i+0xbc>
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1c5d      	adds	r5, r3, #1
 8003b3c:	1c51      	adds	r1, r2, #1
 8003b3e:	6031      	str	r1, [r6, #0]
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	6873      	ldr	r3, [r6, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	6073      	str	r3, [r6, #4]
 8003b4c:	dc07      	bgt.n	8003b5e <_scanf_i+0xba>
 8003b4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b52:	4631      	mov	r1, r6
 8003b54:	4658      	mov	r0, fp
 8003b56:	4798      	blx	r3
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	f040 8087 	bne.w	8003c6c <_scanf_i+0x1c8>
 8003b5e:	462b      	mov	r3, r5
 8003b60:	f108 0801 	add.w	r8, r8, #1
 8003b64:	f1b8 0f03 	cmp.w	r8, #3
 8003b68:	d1c8      	bne.n	8003afc <_scanf_i+0x58>
 8003b6a:	6862      	ldr	r2, [r4, #4]
 8003b6c:	b90a      	cbnz	r2, 8003b72 <_scanf_i+0xce>
 8003b6e:	220a      	movs	r2, #10
 8003b70:	6062      	str	r2, [r4, #4]
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	4945      	ldr	r1, [pc, #276]	; (8003c8c <_scanf_i+0x1e8>)
 8003b76:	6960      	ldr	r0, [r4, #20]
 8003b78:	1a89      	subs	r1, r1, r2
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	f000 f92e 	bl	8003ddc <__sccl>
 8003b80:	9b01      	ldr	r3, [sp, #4]
 8003b82:	f04f 0800 	mov.w	r8, #0
 8003b86:	461d      	mov	r5, r3
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03b      	beq.n	8003c08 <_scanf_i+0x164>
 8003b90:	6831      	ldr	r1, [r6, #0]
 8003b92:	6960      	ldr	r0, [r4, #20]
 8003b94:	f891 c000 	ldrb.w	ip, [r1]
 8003b98:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d033      	beq.n	8003c08 <_scanf_i+0x164>
 8003ba0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003ba4:	d121      	bne.n	8003bea <_scanf_i+0x146>
 8003ba6:	0510      	lsls	r0, r2, #20
 8003ba8:	d51f      	bpl.n	8003bea <_scanf_i+0x146>
 8003baa:	f108 0801 	add.w	r8, r8, #1
 8003bae:	b117      	cbz	r7, 8003bb6 <_scanf_i+0x112>
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	3f01      	subs	r7, #1
 8003bb4:	60a3      	str	r3, [r4, #8]
 8003bb6:	6873      	ldr	r3, [r6, #4]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	6073      	str	r3, [r6, #4]
 8003bbe:	dd1c      	ble.n	8003bfa <_scanf_i+0x156>
 8003bc0:	6833      	ldr	r3, [r6, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	68a3      	ldr	r3, [r4, #8]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60a3      	str	r3, [r4, #8]
 8003bcc:	e7dc      	b.n	8003b88 <_scanf_i+0xe4>
 8003bce:	f1b8 0f02 	cmp.w	r8, #2
 8003bd2:	d1ad      	bne.n	8003b30 <_scanf_i+0x8c>
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003bda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003bde:	d1bf      	bne.n	8003b60 <_scanf_i+0xbc>
 8003be0:	2110      	movs	r1, #16
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	6061      	str	r1, [r4, #4]
 8003be8:	e7a1      	b.n	8003b2e <_scanf_i+0x8a>
 8003bea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003bee:	6022      	str	r2, [r4, #0]
 8003bf0:	780b      	ldrb	r3, [r1, #0]
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	f805 3c01 	strb.w	r3, [r5, #-1]
 8003bf8:	e7dd      	b.n	8003bb6 <_scanf_i+0x112>
 8003bfa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4658      	mov	r0, fp
 8003c02:	4798      	blx	r3
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d0de      	beq.n	8003bc6 <_scanf_i+0x122>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	05d9      	lsls	r1, r3, #23
 8003c0c:	d50c      	bpl.n	8003c28 <_scanf_i+0x184>
 8003c0e:	454d      	cmp	r5, r9
 8003c10:	d908      	bls.n	8003c24 <_scanf_i+0x180>
 8003c12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c16:	1e6f      	subs	r7, r5, #1
 8003c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	4658      	mov	r0, fp
 8003c20:	4798      	blx	r3
 8003c22:	463d      	mov	r5, r7
 8003c24:	454d      	cmp	r5, r9
 8003c26:	d029      	beq.n	8003c7c <_scanf_i+0x1d8>
 8003c28:	6822      	ldr	r2, [r4, #0]
 8003c2a:	f012 0210 	ands.w	r2, r2, #16
 8003c2e:	d113      	bne.n	8003c58 <_scanf_i+0x1b4>
 8003c30:	702a      	strb	r2, [r5, #0]
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	4649      	mov	r1, r9
 8003c36:	4658      	mov	r0, fp
 8003c38:	9e00      	ldr	r6, [sp, #0]
 8003c3a:	47b0      	blx	r6
 8003c3c:	f8da 3000 	ldr.w	r3, [sl]
 8003c40:	6821      	ldr	r1, [r4, #0]
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	f8ca 2000 	str.w	r2, [sl]
 8003c48:	f011 0f20 	tst.w	r1, #32
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	d010      	beq.n	8003c72 <_scanf_i+0x1ce>
 8003c50:	6018      	str	r0, [r3, #0]
 8003c52:	68e3      	ldr	r3, [r4, #12]
 8003c54:	3301      	adds	r3, #1
 8003c56:	60e3      	str	r3, [r4, #12]
 8003c58:	2000      	movs	r0, #0
 8003c5a:	eba5 0509 	sub.w	r5, r5, r9
 8003c5e:	44a8      	add	r8, r5
 8003c60:	6925      	ldr	r5, [r4, #16]
 8003c62:	4445      	add	r5, r8
 8003c64:	6125      	str	r5, [r4, #16]
 8003c66:	b007      	add	sp, #28
 8003c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6c:	f04f 0800 	mov.w	r8, #0
 8003c70:	e7ca      	b.n	8003c08 <_scanf_i+0x164>
 8003c72:	07ca      	lsls	r2, r1, #31
 8003c74:	bf4c      	ite	mi
 8003c76:	8018      	strhmi	r0, [r3, #0]
 8003c78:	6018      	strpl	r0, [r3, #0]
 8003c7a:	e7ea      	b.n	8003c52 <_scanf_i+0x1ae>
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	e7f2      	b.n	8003c66 <_scanf_i+0x1c2>
 8003c80:	08004710 	.word	0x08004710
 8003c84:	08003fbd 	.word	0x08003fbd
 8003c88:	080040d5 	.word	0x080040d5
 8003c8c:	080047b8 	.word	0x080047b8

08003c90 <lflush>:
 8003c90:	8983      	ldrh	r3, [r0, #12]
 8003c92:	f003 0309 	and.w	r3, r3, #9
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	d101      	bne.n	8003c9e <lflush+0xe>
 8003c9a:	f000 bba9 	b.w	80043f0 <fflush>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	4770      	bx	lr
	...

08003ca4 <__srefill_r>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b118      	cbz	r0, 8003cb4 <__srefill_r+0x10>
 8003cac:	6983      	ldr	r3, [r0, #24]
 8003cae:	b90b      	cbnz	r3, 8003cb4 <__srefill_r+0x10>
 8003cb0:	f7ff fc1e 	bl	80034f0 <__sinit>
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <__srefill_r+0x104>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d10a      	bne.n	8003cd0 <__srefill_r+0x2c>
 8003cba:	686c      	ldr	r4, [r5, #4]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	b293      	uxth	r3, r2
 8003cc6:	069e      	lsls	r6, r3, #26
 8003cc8:	d50c      	bpl.n	8003ce4 <__srefill_r+0x40>
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	e068      	b.n	8003da2 <__srefill_r+0xfe>
 8003cd0:	4b36      	ldr	r3, [pc, #216]	; (8003dac <__srefill_r+0x108>)
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d101      	bne.n	8003cda <__srefill_r+0x36>
 8003cd6:	68ac      	ldr	r4, [r5, #8]
 8003cd8:	e7f0      	b.n	8003cbc <__srefill_r+0x18>
 8003cda:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <__srefill_r+0x10c>)
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	bf08      	it	eq
 8003ce0:	68ec      	ldreq	r4, [r5, #12]
 8003ce2:	e7eb      	b.n	8003cbc <__srefill_r+0x18>
 8003ce4:	0758      	lsls	r0, r3, #29
 8003ce6:	d44a      	bmi.n	8003d7e <__srefill_r+0xda>
 8003ce8:	06d9      	lsls	r1, r3, #27
 8003cea:	d405      	bmi.n	8003cf8 <__srefill_r+0x54>
 8003cec:	2309      	movs	r3, #9
 8003cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	81a2      	strh	r2, [r4, #12]
 8003cf6:	e7e8      	b.n	8003cca <__srefill_r+0x26>
 8003cf8:	071a      	lsls	r2, r3, #28
 8003cfa:	d50b      	bpl.n	8003d14 <__srefill_r+0x70>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 fb4c 	bl	800439c <_fflush_r>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d1e0      	bne.n	8003cca <__srefill_r+0x26>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	60a0      	str	r0, [r4, #8]
 8003d0c:	f023 0308 	bic.w	r3, r3, #8
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	61a0      	str	r0, [r4, #24]
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	b91b      	cbnz	r3, 8003d28 <__srefill_r+0x84>
 8003d20:	4621      	mov	r1, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 fbbe 	bl	80044a4 <__smakebuf_r>
 8003d28:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003d2c:	b2be      	uxth	r6, r7
 8003d2e:	07b3      	lsls	r3, r6, #30
 8003d30:	d00f      	beq.n	8003d52 <__srefill_r+0xae>
 8003d32:	2301      	movs	r3, #1
 8003d34:	81a3      	strh	r3, [r4, #12]
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <__srefill_r+0x110>)
 8003d38:	491f      	ldr	r1, [pc, #124]	; (8003db8 <__srefill_r+0x114>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	f006 0609 	and.w	r6, r6, #9
 8003d40:	f7ff fc42 	bl	80035c8 <_fwalk>
 8003d44:	2e09      	cmp	r6, #9
 8003d46:	81a7      	strh	r7, [r4, #12]
 8003d48:	d103      	bne.n	8003d52 <__srefill_r+0xae>
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f000 fa9f 	bl	8004290 <__sflush_r>
 8003d52:	6922      	ldr	r2, [r4, #16]
 8003d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003d56:	6022      	str	r2, [r4, #0]
 8003d58:	6963      	ldr	r3, [r4, #20]
 8003d5a:	6a21      	ldr	r1, [r4, #32]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	47b0      	blx	r6
 8003d60:	2800      	cmp	r0, #0
 8003d62:	6060      	str	r0, [r4, #4]
 8003d64:	dc1e      	bgt.n	8003da4 <__srefill_r+0x100>
 8003d66:	bf18      	it	ne
 8003d68:	2200      	movne	r2, #0
 8003d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d6e:	bf16      	itet	ne
 8003d70:	6062      	strne	r2, [r4, #4]
 8003d72:	f043 0320 	orreq.w	r3, r3, #32
 8003d76:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	e7a5      	b.n	8003cca <__srefill_r+0x26>
 8003d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d0cb      	beq.n	8003d1c <__srefill_r+0x78>
 8003d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d002      	beq.n	8003d92 <__srefill_r+0xee>
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 fbf7 	bl	8004580 <_free_r>
 8003d92:	2000      	movs	r0, #0
 8003d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d96:	6360      	str	r0, [r4, #52]	; 0x34
 8003d98:	6063      	str	r3, [r4, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0be      	beq.n	8003d1c <__srefill_r+0x78>
 8003d9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da4:	2000      	movs	r0, #0
 8003da6:	e7fc      	b.n	8003da2 <__srefill_r+0xfe>
 8003da8:	08004764 	.word	0x08004764
 8003dac:	08004784 	.word	0x08004784
 8003db0:	08004744 	.word	0x08004744
 8003db4:	08004740 	.word	0x08004740
 8003db8:	08003c91 	.word	0x08003c91

08003dbc <_sbrk_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4c05      	ldr	r4, [pc, #20]	; (8003dd8 <_sbrk_r+0x1c>)
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	f7fc fe82 	bl	8000ad0 <_sbrk>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_sbrk_r+0x1a>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_sbrk_r+0x1a>
 8003dd4:	602b      	str	r3, [r5, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000344 	.word	0x20000344

08003ddc <__sccl>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	780b      	ldrb	r3, [r1, #0]
 8003de0:	1e44      	subs	r4, r0, #1
 8003de2:	2b5e      	cmp	r3, #94	; 0x5e
 8003de4:	bf13      	iteet	ne
 8003de6:	1c4a      	addne	r2, r1, #1
 8003de8:	1c8a      	addeq	r2, r1, #2
 8003dea:	784b      	ldrbeq	r3, [r1, #1]
 8003dec:	2100      	movne	r1, #0
 8003dee:	bf08      	it	eq
 8003df0:	2101      	moveq	r1, #1
 8003df2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003df6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8003dfa:	42ac      	cmp	r4, r5
 8003dfc:	d1fb      	bne.n	8003df6 <__sccl+0x1a>
 8003dfe:	b913      	cbnz	r3, 8003e06 <__sccl+0x2a>
 8003e00:	3a01      	subs	r2, #1
 8003e02:	4610      	mov	r0, r2
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	f081 0401 	eor.w	r4, r1, #1
 8003e0a:	54c4      	strb	r4, [r0, r3]
 8003e0c:	1c51      	adds	r1, r2, #1
 8003e0e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8003e12:	1e4e      	subs	r6, r1, #1
 8003e14:	2d2d      	cmp	r5, #45	; 0x2d
 8003e16:	460a      	mov	r2, r1
 8003e18:	d006      	beq.n	8003e28 <__sccl+0x4c>
 8003e1a:	2d5d      	cmp	r5, #93	; 0x5d
 8003e1c:	d0f1      	beq.n	8003e02 <__sccl+0x26>
 8003e1e:	b90d      	cbnz	r5, 8003e24 <__sccl+0x48>
 8003e20:	4632      	mov	r2, r6
 8003e22:	e7ee      	b.n	8003e02 <__sccl+0x26>
 8003e24:	462b      	mov	r3, r5
 8003e26:	e7f0      	b.n	8003e0a <__sccl+0x2e>
 8003e28:	780e      	ldrb	r6, [r1, #0]
 8003e2a:	2e5d      	cmp	r6, #93	; 0x5d
 8003e2c:	d0fa      	beq.n	8003e24 <__sccl+0x48>
 8003e2e:	42b3      	cmp	r3, r6
 8003e30:	dcf8      	bgt.n	8003e24 <__sccl+0x48>
 8003e32:	3301      	adds	r3, #1
 8003e34:	429e      	cmp	r6, r3
 8003e36:	54c4      	strb	r4, [r0, r3]
 8003e38:	dcfb      	bgt.n	8003e32 <__sccl+0x56>
 8003e3a:	3102      	adds	r1, #2
 8003e3c:	e7e7      	b.n	8003e0e <__sccl+0x32>

08003e3e <__sread>:
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	460c      	mov	r4, r1
 8003e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e46:	f000 fc0d 	bl	8004664 <_read_r>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	bfab      	itete	ge
 8003e4e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e50:	89a3      	ldrhlt	r3, [r4, #12]
 8003e52:	181b      	addge	r3, r3, r0
 8003e54:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e58:	bfac      	ite	ge
 8003e5a:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e5c:	81a3      	strhlt	r3, [r4, #12]
 8003e5e:	bd10      	pop	{r4, pc}

08003e60 <__swrite>:
 8003e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e64:	461f      	mov	r7, r3
 8003e66:	898b      	ldrh	r3, [r1, #12]
 8003e68:	4605      	mov	r5, r0
 8003e6a:	05db      	lsls	r3, r3, #23
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	4616      	mov	r6, r2
 8003e70:	d505      	bpl.n	8003e7e <__swrite+0x1e>
 8003e72:	2302      	movs	r3, #2
 8003e74:	2200      	movs	r2, #0
 8003e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7a:	f000 fadd 	bl	8004438 <_lseek_r>
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	4632      	mov	r2, r6
 8003e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	4628      	mov	r0, r5
 8003e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	f000 b9da 	b.w	800424c <_write_r>

08003e98 <__sseek>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea0:	f000 faca 	bl	8004438 <_lseek_r>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	bf15      	itete	ne
 8003eaa:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eac:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eb0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eb4:	81a3      	strheq	r3, [r4, #12]
 8003eb6:	bf18      	it	ne
 8003eb8:	81a3      	strhne	r3, [r4, #12]
 8003eba:	bd10      	pop	{r4, pc}

08003ebc <__sclose>:
 8003ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec0:	f000 b9d6 	b.w	8004270 <_close_r>

08003ec4 <_strtol_l.isra.0>:
 8003ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	4680      	mov	r8, r0
 8003eca:	4689      	mov	r9, r1
 8003ecc:	4692      	mov	sl, r2
 8003ece:	461e      	mov	r6, r3
 8003ed0:	460f      	mov	r7, r1
 8003ed2:	463d      	mov	r5, r7
 8003ed4:	9808      	ldr	r0, [sp, #32]
 8003ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003eda:	f000 fa9b 	bl	8004414 <__locale_ctype_ptr_l>
 8003ede:	4420      	add	r0, r4
 8003ee0:	7843      	ldrb	r3, [r0, #1]
 8003ee2:	f013 0308 	ands.w	r3, r3, #8
 8003ee6:	d132      	bne.n	8003f4e <_strtol_l.isra.0+0x8a>
 8003ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8003eea:	d132      	bne.n	8003f52 <_strtol_l.isra.0+0x8e>
 8003eec:	2201      	movs	r2, #1
 8003eee:	787c      	ldrb	r4, [r7, #1]
 8003ef0:	1cbd      	adds	r5, r7, #2
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d05d      	beq.n	8003fb2 <_strtol_l.isra.0+0xee>
 8003ef6:	2e10      	cmp	r6, #16
 8003ef8:	d109      	bne.n	8003f0e <_strtol_l.isra.0+0x4a>
 8003efa:	2c30      	cmp	r4, #48	; 0x30
 8003efc:	d107      	bne.n	8003f0e <_strtol_l.isra.0+0x4a>
 8003efe:	782b      	ldrb	r3, [r5, #0]
 8003f00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f04:	2b58      	cmp	r3, #88	; 0x58
 8003f06:	d14f      	bne.n	8003fa8 <_strtol_l.isra.0+0xe4>
 8003f08:	2610      	movs	r6, #16
 8003f0a:	786c      	ldrb	r4, [r5, #1]
 8003f0c:	3502      	adds	r5, #2
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	bf14      	ite	ne
 8003f12:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f16:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f1a:	2700      	movs	r7, #0
 8003f1c:	fbb1 fcf6 	udiv	ip, r1, r6
 8003f20:	4638      	mov	r0, r7
 8003f22:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003f26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	d817      	bhi.n	8003f5e <_strtol_l.isra.0+0x9a>
 8003f2e:	461c      	mov	r4, r3
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	dd23      	ble.n	8003f7c <_strtol_l.isra.0+0xb8>
 8003f34:	1c7b      	adds	r3, r7, #1
 8003f36:	d007      	beq.n	8003f48 <_strtol_l.isra.0+0x84>
 8003f38:	4584      	cmp	ip, r0
 8003f3a:	d31c      	bcc.n	8003f76 <_strtol_l.isra.0+0xb2>
 8003f3c:	d101      	bne.n	8003f42 <_strtol_l.isra.0+0x7e>
 8003f3e:	45a6      	cmp	lr, r4
 8003f40:	db19      	blt.n	8003f76 <_strtol_l.isra.0+0xb2>
 8003f42:	2701      	movs	r7, #1
 8003f44:	fb00 4006 	mla	r0, r0, r6, r4
 8003f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f4c:	e7eb      	b.n	8003f26 <_strtol_l.isra.0+0x62>
 8003f4e:	462f      	mov	r7, r5
 8003f50:	e7bf      	b.n	8003ed2 <_strtol_l.isra.0+0xe>
 8003f52:	2c2b      	cmp	r4, #43	; 0x2b
 8003f54:	bf04      	itt	eq
 8003f56:	1cbd      	addeq	r5, r7, #2
 8003f58:	787c      	ldrbeq	r4, [r7, #1]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	e7c9      	b.n	8003ef2 <_strtol_l.isra.0+0x2e>
 8003f5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003f62:	2b19      	cmp	r3, #25
 8003f64:	d801      	bhi.n	8003f6a <_strtol_l.isra.0+0xa6>
 8003f66:	3c37      	subs	r4, #55	; 0x37
 8003f68:	e7e2      	b.n	8003f30 <_strtol_l.isra.0+0x6c>
 8003f6a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003f6e:	2b19      	cmp	r3, #25
 8003f70:	d804      	bhi.n	8003f7c <_strtol_l.isra.0+0xb8>
 8003f72:	3c57      	subs	r4, #87	; 0x57
 8003f74:	e7dc      	b.n	8003f30 <_strtol_l.isra.0+0x6c>
 8003f76:	f04f 37ff 	mov.w	r7, #4294967295
 8003f7a:	e7e5      	b.n	8003f48 <_strtol_l.isra.0+0x84>
 8003f7c:	1c7b      	adds	r3, r7, #1
 8003f7e:	d108      	bne.n	8003f92 <_strtol_l.isra.0+0xce>
 8003f80:	2322      	movs	r3, #34	; 0x22
 8003f82:	4608      	mov	r0, r1
 8003f84:	f8c8 3000 	str.w	r3, [r8]
 8003f88:	f1ba 0f00 	cmp.w	sl, #0
 8003f8c:	d107      	bne.n	8003f9e <_strtol_l.isra.0+0xda>
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f92:	b102      	cbz	r2, 8003f96 <_strtol_l.isra.0+0xd2>
 8003f94:	4240      	negs	r0, r0
 8003f96:	f1ba 0f00 	cmp.w	sl, #0
 8003f9a:	d0f8      	beq.n	8003f8e <_strtol_l.isra.0+0xca>
 8003f9c:	b10f      	cbz	r7, 8003fa2 <_strtol_l.isra.0+0xde>
 8003f9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003fa2:	f8ca 9000 	str.w	r9, [sl]
 8003fa6:	e7f2      	b.n	8003f8e <_strtol_l.isra.0+0xca>
 8003fa8:	2430      	movs	r4, #48	; 0x30
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d1af      	bne.n	8003f0e <_strtol_l.isra.0+0x4a>
 8003fae:	2608      	movs	r6, #8
 8003fb0:	e7ad      	b.n	8003f0e <_strtol_l.isra.0+0x4a>
 8003fb2:	2c30      	cmp	r4, #48	; 0x30
 8003fb4:	d0a3      	beq.n	8003efe <_strtol_l.isra.0+0x3a>
 8003fb6:	260a      	movs	r6, #10
 8003fb8:	e7a9      	b.n	8003f0e <_strtol_l.isra.0+0x4a>
	...

08003fbc <_strtol_r>:
 8003fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fbe:	4c06      	ldr	r4, [pc, #24]	; (8003fd8 <_strtol_r+0x1c>)
 8003fc0:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_strtol_r+0x20>)
 8003fc2:	6824      	ldr	r4, [r4, #0]
 8003fc4:	6a24      	ldr	r4, [r4, #32]
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	bf08      	it	eq
 8003fca:	462c      	moveq	r4, r5
 8003fcc:	9400      	str	r4, [sp, #0]
 8003fce:	f7ff ff79 	bl	8003ec4 <_strtol_l.isra.0>
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bd30      	pop	{r4, r5, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	20000074 	.word	0x20000074

08003fe0 <_strtoul_l.isra.0>:
 8003fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	4689      	mov	r9, r1
 8003fe8:	4692      	mov	sl, r2
 8003fea:	461e      	mov	r6, r3
 8003fec:	460f      	mov	r7, r1
 8003fee:	463d      	mov	r5, r7
 8003ff0:	9808      	ldr	r0, [sp, #32]
 8003ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ff6:	f000 fa0d 	bl	8004414 <__locale_ctype_ptr_l>
 8003ffa:	4420      	add	r0, r4
 8003ffc:	7843      	ldrb	r3, [r0, #1]
 8003ffe:	f013 0308 	ands.w	r3, r3, #8
 8004002:	d130      	bne.n	8004066 <_strtoul_l.isra.0+0x86>
 8004004:	2c2d      	cmp	r4, #45	; 0x2d
 8004006:	d130      	bne.n	800406a <_strtoul_l.isra.0+0x8a>
 8004008:	2101      	movs	r1, #1
 800400a:	787c      	ldrb	r4, [r7, #1]
 800400c:	1cbd      	adds	r5, r7, #2
 800400e:	2e00      	cmp	r6, #0
 8004010:	d05c      	beq.n	80040cc <_strtoul_l.isra.0+0xec>
 8004012:	2e10      	cmp	r6, #16
 8004014:	d109      	bne.n	800402a <_strtoul_l.isra.0+0x4a>
 8004016:	2c30      	cmp	r4, #48	; 0x30
 8004018:	d107      	bne.n	800402a <_strtoul_l.isra.0+0x4a>
 800401a:	782b      	ldrb	r3, [r5, #0]
 800401c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004020:	2b58      	cmp	r3, #88	; 0x58
 8004022:	d14e      	bne.n	80040c2 <_strtoul_l.isra.0+0xe2>
 8004024:	2610      	movs	r6, #16
 8004026:	786c      	ldrb	r4, [r5, #1]
 8004028:	3502      	adds	r5, #2
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	fbb2 f2f6 	udiv	r2, r2, r6
 8004032:	2300      	movs	r3, #0
 8004034:	fb06 fc02 	mul.w	ip, r6, r2
 8004038:	4618      	mov	r0, r3
 800403a:	ea6f 0c0c 	mvn.w	ip, ip
 800403e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004042:	2f09      	cmp	r7, #9
 8004044:	d817      	bhi.n	8004076 <_strtoul_l.isra.0+0x96>
 8004046:	463c      	mov	r4, r7
 8004048:	42a6      	cmp	r6, r4
 800404a:	dd23      	ble.n	8004094 <_strtoul_l.isra.0+0xb4>
 800404c:	2b00      	cmp	r3, #0
 800404e:	db1e      	blt.n	800408e <_strtoul_l.isra.0+0xae>
 8004050:	4282      	cmp	r2, r0
 8004052:	d31c      	bcc.n	800408e <_strtoul_l.isra.0+0xae>
 8004054:	d101      	bne.n	800405a <_strtoul_l.isra.0+0x7a>
 8004056:	45a4      	cmp	ip, r4
 8004058:	db19      	blt.n	800408e <_strtoul_l.isra.0+0xae>
 800405a:	2301      	movs	r3, #1
 800405c:	fb00 4006 	mla	r0, r0, r6, r4
 8004060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004064:	e7eb      	b.n	800403e <_strtoul_l.isra.0+0x5e>
 8004066:	462f      	mov	r7, r5
 8004068:	e7c1      	b.n	8003fee <_strtoul_l.isra.0+0xe>
 800406a:	2c2b      	cmp	r4, #43	; 0x2b
 800406c:	bf04      	itt	eq
 800406e:	1cbd      	addeq	r5, r7, #2
 8004070:	787c      	ldrbeq	r4, [r7, #1]
 8004072:	4619      	mov	r1, r3
 8004074:	e7cb      	b.n	800400e <_strtoul_l.isra.0+0x2e>
 8004076:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800407a:	2f19      	cmp	r7, #25
 800407c:	d801      	bhi.n	8004082 <_strtoul_l.isra.0+0xa2>
 800407e:	3c37      	subs	r4, #55	; 0x37
 8004080:	e7e2      	b.n	8004048 <_strtoul_l.isra.0+0x68>
 8004082:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004086:	2f19      	cmp	r7, #25
 8004088:	d804      	bhi.n	8004094 <_strtoul_l.isra.0+0xb4>
 800408a:	3c57      	subs	r4, #87	; 0x57
 800408c:	e7dc      	b.n	8004048 <_strtoul_l.isra.0+0x68>
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e7e5      	b.n	8004060 <_strtoul_l.isra.0+0x80>
 8004094:	2b00      	cmp	r3, #0
 8004096:	da09      	bge.n	80040ac <_strtoul_l.isra.0+0xcc>
 8004098:	2322      	movs	r3, #34	; 0x22
 800409a:	f04f 30ff 	mov.w	r0, #4294967295
 800409e:	f8c8 3000 	str.w	r3, [r8]
 80040a2:	f1ba 0f00 	cmp.w	sl, #0
 80040a6:	d107      	bne.n	80040b8 <_strtoul_l.isra.0+0xd8>
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	b101      	cbz	r1, 80040b0 <_strtoul_l.isra.0+0xd0>
 80040ae:	4240      	negs	r0, r0
 80040b0:	f1ba 0f00 	cmp.w	sl, #0
 80040b4:	d0f8      	beq.n	80040a8 <_strtoul_l.isra.0+0xc8>
 80040b6:	b10b      	cbz	r3, 80040bc <_strtoul_l.isra.0+0xdc>
 80040b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80040bc:	f8ca 9000 	str.w	r9, [sl]
 80040c0:	e7f2      	b.n	80040a8 <_strtoul_l.isra.0+0xc8>
 80040c2:	2430      	movs	r4, #48	; 0x30
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	d1b0      	bne.n	800402a <_strtoul_l.isra.0+0x4a>
 80040c8:	2608      	movs	r6, #8
 80040ca:	e7ae      	b.n	800402a <_strtoul_l.isra.0+0x4a>
 80040cc:	2c30      	cmp	r4, #48	; 0x30
 80040ce:	d0a4      	beq.n	800401a <_strtoul_l.isra.0+0x3a>
 80040d0:	260a      	movs	r6, #10
 80040d2:	e7aa      	b.n	800402a <_strtoul_l.isra.0+0x4a>

080040d4 <_strtoul_r>:
 80040d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040d6:	4c06      	ldr	r4, [pc, #24]	; (80040f0 <_strtoul_r+0x1c>)
 80040d8:	4d06      	ldr	r5, [pc, #24]	; (80040f4 <_strtoul_r+0x20>)
 80040da:	6824      	ldr	r4, [r4, #0]
 80040dc:	6a24      	ldr	r4, [r4, #32]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	bf08      	it	eq
 80040e2:	462c      	moveq	r4, r5
 80040e4:	9400      	str	r4, [sp, #0]
 80040e6:	f7ff ff7b 	bl	8003fe0 <_strtoul_l.isra.0>
 80040ea:	b003      	add	sp, #12
 80040ec:	bd30      	pop	{r4, r5, pc}
 80040ee:	bf00      	nop
 80040f0:	20000010 	.word	0x20000010
 80040f4:	20000074 	.word	0x20000074

080040f8 <__submore>:
 80040f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fc:	460c      	mov	r4, r1
 80040fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004104:	4299      	cmp	r1, r3
 8004106:	d11b      	bne.n	8004140 <__submore+0x48>
 8004108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800410c:	f7ff fa96 	bl	800363c <_malloc_r>
 8004110:	b918      	cbnz	r0, 800411a <__submore+0x22>
 8004112:	f04f 30ff 	mov.w	r0, #4294967295
 8004116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004120:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004124:	6360      	str	r0, [r4, #52]	; 0x34
 8004126:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800412a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800412e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004132:	7043      	strb	r3, [r0, #1]
 8004134:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004138:	7003      	strb	r3, [r0, #0]
 800413a:	6020      	str	r0, [r4, #0]
 800413c:	2000      	movs	r0, #0
 800413e:	e7ea      	b.n	8004116 <__submore+0x1e>
 8004140:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004142:	0077      	lsls	r7, r6, #1
 8004144:	463a      	mov	r2, r7
 8004146:	f000 fa67 	bl	8004618 <_realloc_r>
 800414a:	4605      	mov	r5, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d0e0      	beq.n	8004112 <__submore+0x1a>
 8004150:	eb00 0806 	add.w	r8, r0, r6
 8004154:	4601      	mov	r1, r0
 8004156:	4632      	mov	r2, r6
 8004158:	4640      	mov	r0, r8
 800415a:	f000 fa03 	bl	8004564 <memcpy>
 800415e:	f8c4 8000 	str.w	r8, [r4]
 8004162:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004166:	e7e9      	b.n	800413c <__submore+0x44>

08004168 <_ungetc_r>:
 8004168:	1c4b      	adds	r3, r1, #1
 800416a:	b570      	push	{r4, r5, r6, lr}
 800416c:	4606      	mov	r6, r0
 800416e:	460d      	mov	r5, r1
 8004170:	4614      	mov	r4, r2
 8004172:	d103      	bne.n	800417c <_ungetc_r+0x14>
 8004174:	f04f 35ff 	mov.w	r5, #4294967295
 8004178:	4628      	mov	r0, r5
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	b118      	cbz	r0, 8004186 <_ungetc_r+0x1e>
 800417e:	6983      	ldr	r3, [r0, #24]
 8004180:	b90b      	cbnz	r3, 8004186 <_ungetc_r+0x1e>
 8004182:	f7ff f9b5 	bl	80034f0 <__sinit>
 8004186:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <_ungetc_r+0xd8>)
 8004188:	429c      	cmp	r4, r3
 800418a:	d12c      	bne.n	80041e6 <_ungetc_r+0x7e>
 800418c:	6874      	ldr	r4, [r6, #4]
 800418e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004192:	f023 0320 	bic.w	r3, r3, #32
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	b29b      	uxth	r3, r3
 800419a:	0759      	lsls	r1, r3, #29
 800419c:	d413      	bmi.n	80041c6 <_ungetc_r+0x5e>
 800419e:	06da      	lsls	r2, r3, #27
 80041a0:	d5e8      	bpl.n	8004174 <_ungetc_r+0xc>
 80041a2:	071b      	lsls	r3, r3, #28
 80041a4:	d50b      	bpl.n	80041be <_ungetc_r+0x56>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f8f7 	bl	800439c <_fflush_r>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d1e0      	bne.n	8004174 <_ungetc_r+0xc>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	60a0      	str	r0, [r4, #8]
 80041b6:	f023 0308 	bic.w	r3, r3, #8
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	61a0      	str	r0, [r4, #24]
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041c8:	b2ed      	uxtb	r5, r5
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	b1e3      	cbz	r3, 8004208 <_ungetc_r+0xa0>
 80041ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041d0:	4293      	cmp	r3, r2
 80041d2:	dd12      	ble.n	80041fa <_ungetc_r+0x92>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	f803 5c01 	strb.w	r5, [r3, #-1]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	3301      	adds	r3, #1
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	e7c8      	b.n	8004178 <_ungetc_r+0x10>
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <_ungetc_r+0xdc>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	d101      	bne.n	80041f0 <_ungetc_r+0x88>
 80041ec:	68b4      	ldr	r4, [r6, #8]
 80041ee:	e7ce      	b.n	800418e <_ungetc_r+0x26>
 80041f0:	4b15      	ldr	r3, [pc, #84]	; (8004248 <_ungetc_r+0xe0>)
 80041f2:	429c      	cmp	r4, r3
 80041f4:	bf08      	it	eq
 80041f6:	68f4      	ldreq	r4, [r6, #12]
 80041f8:	e7c9      	b.n	800418e <_ungetc_r+0x26>
 80041fa:	4621      	mov	r1, r4
 80041fc:	4630      	mov	r0, r6
 80041fe:	f7ff ff7b 	bl	80040f8 <__submore>
 8004202:	2800      	cmp	r0, #0
 8004204:	d0e6      	beq.n	80041d4 <_ungetc_r+0x6c>
 8004206:	e7b5      	b.n	8004174 <_ungetc_r+0xc>
 8004208:	6921      	ldr	r1, [r4, #16]
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	b151      	cbz	r1, 8004224 <_ungetc_r+0xbc>
 800420e:	4299      	cmp	r1, r3
 8004210:	d208      	bcs.n	8004224 <_ungetc_r+0xbc>
 8004212:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004216:	42a9      	cmp	r1, r5
 8004218:	d104      	bne.n	8004224 <_ungetc_r+0xbc>
 800421a:	3b01      	subs	r3, #1
 800421c:	3201      	adds	r2, #1
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	6062      	str	r2, [r4, #4]
 8004222:	e7a9      	b.n	8004178 <_ungetc_r+0x10>
 8004224:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800422c:	6363      	str	r3, [r4, #52]	; 0x34
 800422e:	2303      	movs	r3, #3
 8004230:	63a3      	str	r3, [r4, #56]	; 0x38
 8004232:	4623      	mov	r3, r4
 8004234:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	e7d1      	b.n	80041e2 <_ungetc_r+0x7a>
 800423e:	bf00      	nop
 8004240:	08004764 	.word	0x08004764
 8004244:	08004784 	.word	0x08004784
 8004248:	08004744 	.word	0x08004744

0800424c <_write_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	2200      	movs	r2, #0
 8004256:	4c05      	ldr	r4, [pc, #20]	; (800426c <_write_r+0x20>)
 8004258:	6022      	str	r2, [r4, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f7fc fbeb 	bl	8000a36 <_write>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_write_r+0x1e>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	b103      	cbz	r3, 800426a <_write_r+0x1e>
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20000344 	.word	0x20000344

08004270 <_close_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	2300      	movs	r3, #0
 8004274:	4c05      	ldr	r4, [pc, #20]	; (800428c <_close_r+0x1c>)
 8004276:	4605      	mov	r5, r0
 8004278:	4608      	mov	r0, r1
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	f7fc fbf7 	bl	8000a6e <_close>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d102      	bne.n	800428a <_close_r+0x1a>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	b103      	cbz	r3, 800428a <_close_r+0x1a>
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	bd38      	pop	{r3, r4, r5, pc}
 800428c:	20000344 	.word	0x20000344

08004290 <__sflush_r>:
 8004290:	898a      	ldrh	r2, [r1, #12]
 8004292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004296:	4605      	mov	r5, r0
 8004298:	0710      	lsls	r0, r2, #28
 800429a:	460c      	mov	r4, r1
 800429c:	d458      	bmi.n	8004350 <__sflush_r+0xc0>
 800429e:	684b      	ldr	r3, [r1, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	dc05      	bgt.n	80042b0 <__sflush_r+0x20>
 80042a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	dc02      	bgt.n	80042b0 <__sflush_r+0x20>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042b2:	2e00      	cmp	r6, #0
 80042b4:	d0f9      	beq.n	80042aa <__sflush_r+0x1a>
 80042b6:	2300      	movs	r3, #0
 80042b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042bc:	682f      	ldr	r7, [r5, #0]
 80042be:	6a21      	ldr	r1, [r4, #32]
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	d032      	beq.n	800432a <__sflush_r+0x9a>
 80042c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	075a      	lsls	r2, r3, #29
 80042ca:	d505      	bpl.n	80042d8 <__sflush_r+0x48>
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	1ac0      	subs	r0, r0, r3
 80042d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d2:	b10b      	cbz	r3, 80042d8 <__sflush_r+0x48>
 80042d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d6:	1ac0      	subs	r0, r0, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	4602      	mov	r2, r0
 80042dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042de:	6a21      	ldr	r1, [r4, #32]
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b0      	blx	r6
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	d106      	bne.n	80042f8 <__sflush_r+0x68>
 80042ea:	6829      	ldr	r1, [r5, #0]
 80042ec:	291d      	cmp	r1, #29
 80042ee:	d848      	bhi.n	8004382 <__sflush_r+0xf2>
 80042f0:	4a29      	ldr	r2, [pc, #164]	; (8004398 <__sflush_r+0x108>)
 80042f2:	40ca      	lsrs	r2, r1
 80042f4:	07d6      	lsls	r6, r2, #31
 80042f6:	d544      	bpl.n	8004382 <__sflush_r+0xf2>
 80042f8:	2200      	movs	r2, #0
 80042fa:	6062      	str	r2, [r4, #4]
 80042fc:	6922      	ldr	r2, [r4, #16]
 80042fe:	04d9      	lsls	r1, r3, #19
 8004300:	6022      	str	r2, [r4, #0]
 8004302:	d504      	bpl.n	800430e <__sflush_r+0x7e>
 8004304:	1c42      	adds	r2, r0, #1
 8004306:	d101      	bne.n	800430c <__sflush_r+0x7c>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b903      	cbnz	r3, 800430e <__sflush_r+0x7e>
 800430c:	6560      	str	r0, [r4, #84]	; 0x54
 800430e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004310:	602f      	str	r7, [r5, #0]
 8004312:	2900      	cmp	r1, #0
 8004314:	d0c9      	beq.n	80042aa <__sflush_r+0x1a>
 8004316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431a:	4299      	cmp	r1, r3
 800431c:	d002      	beq.n	8004324 <__sflush_r+0x94>
 800431e:	4628      	mov	r0, r5
 8004320:	f000 f92e 	bl	8004580 <_free_r>
 8004324:	2000      	movs	r0, #0
 8004326:	6360      	str	r0, [r4, #52]	; 0x34
 8004328:	e7c0      	b.n	80042ac <__sflush_r+0x1c>
 800432a:	2301      	movs	r3, #1
 800432c:	4628      	mov	r0, r5
 800432e:	47b0      	blx	r6
 8004330:	1c41      	adds	r1, r0, #1
 8004332:	d1c8      	bne.n	80042c6 <__sflush_r+0x36>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0c5      	beq.n	80042c6 <__sflush_r+0x36>
 800433a:	2b1d      	cmp	r3, #29
 800433c:	d001      	beq.n	8004342 <__sflush_r+0xb2>
 800433e:	2b16      	cmp	r3, #22
 8004340:	d101      	bne.n	8004346 <__sflush_r+0xb6>
 8004342:	602f      	str	r7, [r5, #0]
 8004344:	e7b1      	b.n	80042aa <__sflush_r+0x1a>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	e7ad      	b.n	80042ac <__sflush_r+0x1c>
 8004350:	690f      	ldr	r7, [r1, #16]
 8004352:	2f00      	cmp	r7, #0
 8004354:	d0a9      	beq.n	80042aa <__sflush_r+0x1a>
 8004356:	0793      	lsls	r3, r2, #30
 8004358:	bf18      	it	ne
 800435a:	2300      	movne	r3, #0
 800435c:	680e      	ldr	r6, [r1, #0]
 800435e:	bf08      	it	eq
 8004360:	694b      	ldreq	r3, [r1, #20]
 8004362:	eba6 0807 	sub.w	r8, r6, r7
 8004366:	600f      	str	r7, [r1, #0]
 8004368:	608b      	str	r3, [r1, #8]
 800436a:	f1b8 0f00 	cmp.w	r8, #0
 800436e:	dd9c      	ble.n	80042aa <__sflush_r+0x1a>
 8004370:	4643      	mov	r3, r8
 8004372:	463a      	mov	r2, r7
 8004374:	6a21      	ldr	r1, [r4, #32]
 8004376:	4628      	mov	r0, r5
 8004378:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800437a:	47b0      	blx	r6
 800437c:	2800      	cmp	r0, #0
 800437e:	dc06      	bgt.n	800438e <__sflush_r+0xfe>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e78e      	b.n	80042ac <__sflush_r+0x1c>
 800438e:	4407      	add	r7, r0
 8004390:	eba8 0800 	sub.w	r8, r8, r0
 8004394:	e7e9      	b.n	800436a <__sflush_r+0xda>
 8004396:	bf00      	nop
 8004398:	20400001 	.word	0x20400001

0800439c <_fflush_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	690b      	ldr	r3, [r1, #16]
 80043a0:	4605      	mov	r5, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	b1db      	cbz	r3, 80043de <_fflush_r+0x42>
 80043a6:	b118      	cbz	r0, 80043b0 <_fflush_r+0x14>
 80043a8:	6983      	ldr	r3, [r0, #24]
 80043aa:	b90b      	cbnz	r3, 80043b0 <_fflush_r+0x14>
 80043ac:	f7ff f8a0 	bl	80034f0 <__sinit>
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <_fflush_r+0x48>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	d109      	bne.n	80043ca <_fflush_r+0x2e>
 80043b6:	686c      	ldr	r4, [r5, #4]
 80043b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043bc:	b17b      	cbz	r3, 80043de <_fflush_r+0x42>
 80043be:	4621      	mov	r1, r4
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043c6:	f7ff bf63 	b.w	8004290 <__sflush_r>
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_fflush_r+0x4c>)
 80043cc:	429c      	cmp	r4, r3
 80043ce:	d101      	bne.n	80043d4 <_fflush_r+0x38>
 80043d0:	68ac      	ldr	r4, [r5, #8]
 80043d2:	e7f1      	b.n	80043b8 <_fflush_r+0x1c>
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <_fflush_r+0x50>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	bf08      	it	eq
 80043da:	68ec      	ldreq	r4, [r5, #12]
 80043dc:	e7ec      	b.n	80043b8 <_fflush_r+0x1c>
 80043de:	2000      	movs	r0, #0
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	08004764 	.word	0x08004764
 80043e8:	08004784 	.word	0x08004784
 80043ec:	08004744 	.word	0x08004744

080043f0 <fflush>:
 80043f0:	4601      	mov	r1, r0
 80043f2:	b920      	cbnz	r0, 80043fe <fflush+0xe>
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <fflush+0x18>)
 80043f6:	4905      	ldr	r1, [pc, #20]	; (800440c <fflush+0x1c>)
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f7ff b901 	b.w	8003600 <_fwalk_reent>
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <fflush+0x20>)
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f7ff bfcb 	b.w	800439c <_fflush_r>
 8004406:	bf00      	nop
 8004408:	08004740 	.word	0x08004740
 800440c:	0800439d 	.word	0x0800439d
 8004410:	20000010 	.word	0x20000010

08004414 <__locale_ctype_ptr_l>:
 8004414:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004418:	4770      	bx	lr
	...

0800441c <__locale_ctype_ptr>:
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <__locale_ctype_ptr+0x14>)
 800441e:	4a05      	ldr	r2, [pc, #20]	; (8004434 <__locale_ctype_ptr+0x18>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf08      	it	eq
 8004428:	4613      	moveq	r3, r2
 800442a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800442e:	4770      	bx	lr
 8004430:	20000010 	.word	0x20000010
 8004434:	20000074 	.word	0x20000074

08004438 <_lseek_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4605      	mov	r5, r0
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	2200      	movs	r2, #0
 8004442:	4c05      	ldr	r4, [pc, #20]	; (8004458 <_lseek_r+0x20>)
 8004444:	6022      	str	r2, [r4, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f7fc fb35 	bl	8000ab6 <_lseek>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_lseek_r+0x1e>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	b103      	cbz	r3, 8004456 <_lseek_r+0x1e>
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	20000344 	.word	0x20000344

0800445c <__swhatbuf_r>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	460e      	mov	r6, r1
 8004460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004464:	b096      	sub	sp, #88	; 0x58
 8004466:	2900      	cmp	r1, #0
 8004468:	4614      	mov	r4, r2
 800446a:	461d      	mov	r5, r3
 800446c:	da07      	bge.n	800447e <__swhatbuf_r+0x22>
 800446e:	2300      	movs	r3, #0
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	89b3      	ldrh	r3, [r6, #12]
 8004474:	061a      	lsls	r2, r3, #24
 8004476:	d410      	bmi.n	800449a <__swhatbuf_r+0x3e>
 8004478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447c:	e00e      	b.n	800449c <__swhatbuf_r+0x40>
 800447e:	466a      	mov	r2, sp
 8004480:	f000 f910 	bl	80046a4 <_fstat_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	dbf2      	blt.n	800446e <__swhatbuf_r+0x12>
 8004488:	9a01      	ldr	r2, [sp, #4]
 800448a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800448e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004492:	425a      	negs	r2, r3
 8004494:	415a      	adcs	r2, r3
 8004496:	602a      	str	r2, [r5, #0]
 8004498:	e7ee      	b.n	8004478 <__swhatbuf_r+0x1c>
 800449a:	2340      	movs	r3, #64	; 0x40
 800449c:	2000      	movs	r0, #0
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	b016      	add	sp, #88	; 0x58
 80044a2:	bd70      	pop	{r4, r5, r6, pc}

080044a4 <__smakebuf_r>:
 80044a4:	898b      	ldrh	r3, [r1, #12]
 80044a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044a8:	079d      	lsls	r5, r3, #30
 80044aa:	4606      	mov	r6, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	d507      	bpl.n	80044c0 <__smakebuf_r+0x1c>
 80044b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	2301      	movs	r3, #1
 80044ba:	6163      	str	r3, [r4, #20]
 80044bc:	b002      	add	sp, #8
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	ab01      	add	r3, sp, #4
 80044c2:	466a      	mov	r2, sp
 80044c4:	f7ff ffca 	bl	800445c <__swhatbuf_r>
 80044c8:	9900      	ldr	r1, [sp, #0]
 80044ca:	4605      	mov	r5, r0
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7ff f8b5 	bl	800363c <_malloc_r>
 80044d2:	b948      	cbnz	r0, 80044e8 <__smakebuf_r+0x44>
 80044d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d8:	059a      	lsls	r2, r3, #22
 80044da:	d4ef      	bmi.n	80044bc <__smakebuf_r+0x18>
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	e7e3      	b.n	80044b0 <__smakebuf_r+0xc>
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <__smakebuf_r+0x7c>)
 80044ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	6020      	str	r0, [r4, #0]
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	9b00      	ldr	r3, [sp, #0]
 80044f8:	6120      	str	r0, [r4, #16]
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	b15b      	cbz	r3, 8004518 <__smakebuf_r+0x74>
 8004500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004504:	4630      	mov	r0, r6
 8004506:	f000 f8df 	bl	80046c8 <_isatty_r>
 800450a:	b128      	cbz	r0, 8004518 <__smakebuf_r+0x74>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	81a3      	strh	r3, [r4, #12]
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	431d      	orrs	r5, r3
 800451c:	81a5      	strh	r5, [r4, #12]
 800451e:	e7cd      	b.n	80044bc <__smakebuf_r+0x18>
 8004520:	080034b9 	.word	0x080034b9

08004524 <__ascii_mbtowc>:
 8004524:	b082      	sub	sp, #8
 8004526:	b901      	cbnz	r1, 800452a <__ascii_mbtowc+0x6>
 8004528:	a901      	add	r1, sp, #4
 800452a:	b142      	cbz	r2, 800453e <__ascii_mbtowc+0x1a>
 800452c:	b14b      	cbz	r3, 8004542 <__ascii_mbtowc+0x1e>
 800452e:	7813      	ldrb	r3, [r2, #0]
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	7812      	ldrb	r2, [r2, #0]
 8004534:	1c10      	adds	r0, r2, #0
 8004536:	bf18      	it	ne
 8004538:	2001      	movne	r0, #1
 800453a:	b002      	add	sp, #8
 800453c:	4770      	bx	lr
 800453e:	4610      	mov	r0, r2
 8004540:	e7fb      	b.n	800453a <__ascii_mbtowc+0x16>
 8004542:	f06f 0001 	mvn.w	r0, #1
 8004546:	e7f8      	b.n	800453a <__ascii_mbtowc+0x16>

08004548 <memchr>:
 8004548:	b510      	push	{r4, lr}
 800454a:	b2c9      	uxtb	r1, r1
 800454c:	4402      	add	r2, r0
 800454e:	4290      	cmp	r0, r2
 8004550:	4603      	mov	r3, r0
 8004552:	d101      	bne.n	8004558 <memchr+0x10>
 8004554:	2300      	movs	r3, #0
 8004556:	e003      	b.n	8004560 <memchr+0x18>
 8004558:	781c      	ldrb	r4, [r3, #0]
 800455a:	3001      	adds	r0, #1
 800455c:	428c      	cmp	r4, r1
 800455e:	d1f6      	bne.n	800454e <memchr+0x6>
 8004560:	4618      	mov	r0, r3
 8004562:	bd10      	pop	{r4, pc}

08004564 <memcpy>:
 8004564:	b510      	push	{r4, lr}
 8004566:	1e43      	subs	r3, r0, #1
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	bd10      	pop	{r4, pc}
 8004570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004578:	e7f7      	b.n	800456a <memcpy+0x6>

0800457a <__malloc_lock>:
 800457a:	4770      	bx	lr

0800457c <__malloc_unlock>:
 800457c:	4770      	bx	lr
	...

08004580 <_free_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4605      	mov	r5, r0
 8004584:	2900      	cmp	r1, #0
 8004586:	d043      	beq.n	8004610 <_free_r+0x90>
 8004588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800458c:	1f0c      	subs	r4, r1, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfb8      	it	lt
 8004592:	18e4      	addlt	r4, r4, r3
 8004594:	f7ff fff1 	bl	800457a <__malloc_lock>
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <_free_r+0x94>)
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	4610      	mov	r0, r2
 800459e:	b933      	cbnz	r3, 80045ae <_free_r+0x2e>
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	6014      	str	r4, [r2, #0]
 80045a4:	4628      	mov	r0, r5
 80045a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045aa:	f7ff bfe7 	b.w	800457c <__malloc_unlock>
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d90b      	bls.n	80045ca <_free_r+0x4a>
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	1862      	adds	r2, r4, r1
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bf01      	itttt	eq
 80045ba:	681a      	ldreq	r2, [r3, #0]
 80045bc:	685b      	ldreq	r3, [r3, #4]
 80045be:	1852      	addeq	r2, r2, r1
 80045c0:	6022      	streq	r2, [r4, #0]
 80045c2:	6063      	str	r3, [r4, #4]
 80045c4:	6004      	str	r4, [r0, #0]
 80045c6:	e7ed      	b.n	80045a4 <_free_r+0x24>
 80045c8:	4613      	mov	r3, r2
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	b10a      	cbz	r2, 80045d2 <_free_r+0x52>
 80045ce:	42a2      	cmp	r2, r4
 80045d0:	d9fa      	bls.n	80045c8 <_free_r+0x48>
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	1858      	adds	r0, r3, r1
 80045d6:	42a0      	cmp	r0, r4
 80045d8:	d10b      	bne.n	80045f2 <_free_r+0x72>
 80045da:	6820      	ldr	r0, [r4, #0]
 80045dc:	4401      	add	r1, r0
 80045de:	1858      	adds	r0, r3, r1
 80045e0:	4282      	cmp	r2, r0
 80045e2:	6019      	str	r1, [r3, #0]
 80045e4:	d1de      	bne.n	80045a4 <_free_r+0x24>
 80045e6:	6810      	ldr	r0, [r2, #0]
 80045e8:	6852      	ldr	r2, [r2, #4]
 80045ea:	4401      	add	r1, r0
 80045ec:	6019      	str	r1, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	e7d8      	b.n	80045a4 <_free_r+0x24>
 80045f2:	d902      	bls.n	80045fa <_free_r+0x7a>
 80045f4:	230c      	movs	r3, #12
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	e7d4      	b.n	80045a4 <_free_r+0x24>
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	1821      	adds	r1, r4, r0
 80045fe:	428a      	cmp	r2, r1
 8004600:	bf01      	itttt	eq
 8004602:	6811      	ldreq	r1, [r2, #0]
 8004604:	6852      	ldreq	r2, [r2, #4]
 8004606:	1809      	addeq	r1, r1, r0
 8004608:	6021      	streq	r1, [r4, #0]
 800460a:	6062      	str	r2, [r4, #4]
 800460c:	605c      	str	r4, [r3, #4]
 800460e:	e7c9      	b.n	80045a4 <_free_r+0x24>
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	bf00      	nop
 8004614:	20000204 	.word	0x20000204

08004618 <_realloc_r>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	4607      	mov	r7, r0
 800461c:	4614      	mov	r4, r2
 800461e:	460e      	mov	r6, r1
 8004620:	b921      	cbnz	r1, 800462c <_realloc_r+0x14>
 8004622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004626:	4611      	mov	r1, r2
 8004628:	f7ff b808 	b.w	800363c <_malloc_r>
 800462c:	b922      	cbnz	r2, 8004638 <_realloc_r+0x20>
 800462e:	f7ff ffa7 	bl	8004580 <_free_r>
 8004632:	4625      	mov	r5, r4
 8004634:	4628      	mov	r0, r5
 8004636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004638:	f000 f856 	bl	80046e8 <_malloc_usable_size_r>
 800463c:	42a0      	cmp	r0, r4
 800463e:	d20f      	bcs.n	8004660 <_realloc_r+0x48>
 8004640:	4621      	mov	r1, r4
 8004642:	4638      	mov	r0, r7
 8004644:	f7fe fffa 	bl	800363c <_malloc_r>
 8004648:	4605      	mov	r5, r0
 800464a:	2800      	cmp	r0, #0
 800464c:	d0f2      	beq.n	8004634 <_realloc_r+0x1c>
 800464e:	4631      	mov	r1, r6
 8004650:	4622      	mov	r2, r4
 8004652:	f7ff ff87 	bl	8004564 <memcpy>
 8004656:	4631      	mov	r1, r6
 8004658:	4638      	mov	r0, r7
 800465a:	f7ff ff91 	bl	8004580 <_free_r>
 800465e:	e7e9      	b.n	8004634 <_realloc_r+0x1c>
 8004660:	4635      	mov	r5, r6
 8004662:	e7e7      	b.n	8004634 <_realloc_r+0x1c>

08004664 <_read_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4605      	mov	r5, r0
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	2200      	movs	r2, #0
 800466e:	4c05      	ldr	r4, [pc, #20]	; (8004684 <_read_r+0x20>)
 8004670:	6022      	str	r2, [r4, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fc f9c2 	bl	80009fc <_read>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_read_r+0x1e>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	b103      	cbz	r3, 8004682 <_read_r+0x1e>
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000344 	.word	0x20000344

08004688 <__ascii_wctomb>:
 8004688:	b149      	cbz	r1, 800469e <__ascii_wctomb+0x16>
 800468a:	2aff      	cmp	r2, #255	; 0xff
 800468c:	bf8b      	itete	hi
 800468e:	238a      	movhi	r3, #138	; 0x8a
 8004690:	700a      	strbls	r2, [r1, #0]
 8004692:	6003      	strhi	r3, [r0, #0]
 8004694:	2001      	movls	r0, #1
 8004696:	bf88      	it	hi
 8004698:	f04f 30ff 	movhi.w	r0, #4294967295
 800469c:	4770      	bx	lr
 800469e:	4608      	mov	r0, r1
 80046a0:	4770      	bx	lr
	...

080046a4 <_fstat_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	2300      	movs	r3, #0
 80046a8:	4c06      	ldr	r4, [pc, #24]	; (80046c4 <_fstat_r+0x20>)
 80046aa:	4605      	mov	r5, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	f7fc f9e7 	bl	8000a84 <_fstat>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d102      	bne.n	80046c0 <_fstat_r+0x1c>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	b103      	cbz	r3, 80046c0 <_fstat_r+0x1c>
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	20000344 	.word	0x20000344

080046c8 <_isatty_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4c05      	ldr	r4, [pc, #20]	; (80046e4 <_isatty_r+0x1c>)
 80046ce:	4605      	mov	r5, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	f7fc f9e5 	bl	8000aa2 <_isatty>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_isatty_r+0x1a>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_isatty_r+0x1a>
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000344 	.word	0x20000344

080046e8 <_malloc_usable_size_r>:
 80046e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ec:	1f18      	subs	r0, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfbc      	itt	lt
 80046f2:	580b      	ldrlt	r3, [r1, r0]
 80046f4:	18c0      	addlt	r0, r0, r3
 80046f6:	4770      	bx	lr

080046f8 <_init>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr

08004704 <_fini>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr
