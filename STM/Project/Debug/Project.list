
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ea8  08002ea8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ea8  08002ea8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002ebc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002ebc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008918  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c12  00000000  00000000  0002894d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002ad98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001616d  00000000  00000000  0002b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085df  00000000  00000000  00041635  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000898e6  00000000  00000000  00049c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d34fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb4  00000000  00000000  000d3578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e6c 	.word	0x08002e6c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002e6c 	.word	0x08002e6c

0800017c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <MX_ADC_Init+0xac>)
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <MX_ADC_Init+0xb0>)
 8000190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000192:	4b25      	ldr	r3, [pc, #148]	; (8000228 <MX_ADC_Init+0xac>)
 8000194:	2200      	movs	r2, #0
 8000196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000198:	4b23      	ldr	r3, [pc, #140]	; (8000228 <MX_ADC_Init+0xac>)
 800019a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800019e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <MX_ADC_Init+0xac>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001a6:	4b20      	ldr	r3, [pc, #128]	; (8000228 <MX_ADC_Init+0xac>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_ADC_Init+0xac>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80001b2:	4b1d      	ldr	r3, [pc, #116]	; (8000228 <MX_ADC_Init+0xac>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80001b8:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_ADC_Init+0xac>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80001be:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <MX_ADC_Init+0xac>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_ADC_Init+0xac>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80001cc:	4b16      	ldr	r3, [pc, #88]	; (8000228 <MX_ADC_Init+0xac>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80001d2:	4b15      	ldr	r3, [pc, #84]	; (8000228 <MX_ADC_Init+0xac>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001da:	4b13      	ldr	r3, [pc, #76]	; (8000228 <MX_ADC_Init+0xac>)
 80001dc:	2210      	movs	r2, #16
 80001de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001e0:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_ADC_Init+0xac>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <MX_ADC_Init+0xac>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <MX_ADC_Init+0xac>)
 80001f0:	f000 fd60 	bl	8000cb4 <HAL_ADC_Init>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <MX_ADC_Init+0x82>
  {
    Error_Handler();
 80001fa:	f000 f9b3 	bl	8000564 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000202:	2301      	movs	r3, #1
 8000204:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4806      	ldr	r0, [pc, #24]	; (8000228 <MX_ADC_Init+0xac>)
 8000210:	f000 ff8c 	bl	800112c <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 800021a:	f000 f9a3 	bl	8000564 <Error_Handler>
  }

}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	2000002c 	.word	0x2000002c
 800022c:	40012400 	.word	0x40012400

08000230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <HAL_ADC_MspInit+0x74>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d123      	bne.n	800029a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 8000258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800025c:	6213      	str	r3, [r2, #32]
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 8000260:	6a1b      	ldr	r3, [r3, #32]
 8000262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	61d3      	str	r3, [r2, #28]
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <HAL_ADC_MspInit+0x78>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000282:	2301      	movs	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000286:	2303      	movs	r3, #3
 8000288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <HAL_ADC_MspInit+0x7c>)
 8000296:	f001 fa59 	bl	800174c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800029a:	bf00      	nop
 800029c:	3728      	adds	r7, #40	; 0x28
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40012400 	.word	0x40012400
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000

080002b0 <get_value_fotodetector>:
#include "fotodetector.h"


uint8_t get_value_fotodetector()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc);
 80002b4:	4809      	ldr	r0, [pc, #36]	; (80002dc <get_value_fotodetector+0x2c>)
 80002b6:	f000 fe43 	bl	8000f40 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002ba:	f04f 31ff 	mov.w	r1, #4294967295
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <get_value_fotodetector+0x2c>)
 80002c0:	f000 fe9e 	bl	8001000 <HAL_ADC_PollForConversion>
		fotodetector_value = HAL_ADC_GetValue(&hadc);
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <get_value_fotodetector+0x2c>)
 80002c6:	f000 ff24 	bl	8001112 <HAL_ADC_GetValue>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <get_value_fotodetector+0x30>)
 80002d0:	701a      	strb	r2, [r3, #0]

		 return fotodetector_value;
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <get_value_fotodetector+0x30>)
 80002d4:	781b      	ldrb	r3, [r3, #0]

}
 80002d6:	4618      	mov	r0, r3
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	20000080 	.word	0x20000080

080002e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fa:	4b4d      	ldr	r3, [pc, #308]	; (8000430 <MX_GPIO_Init+0x14c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	4a4c      	ldr	r2, [pc, #304]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	61d3      	str	r3, [r2, #28]
 8000306:	4b4a      	ldr	r3, [pc, #296]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000312:	4b47      	ldr	r3, [pc, #284]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	4a46      	ldr	r2, [pc, #280]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	61d3      	str	r3, [r2, #28]
 800031e:	4b44      	ldr	r3, [pc, #272]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b41      	ldr	r3, [pc, #260]	; (8000430 <MX_GPIO_Init+0x14c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a40      	ldr	r2, [pc, #256]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b3e      	ldr	r3, [pc, #248]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000342:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a3a      	ldr	r2, [pc, #232]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <MX_GPIO_Init+0x14c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 0302 	and.w	r3, r3, #2
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2120      	movs	r1, #32
 800035e:	4835      	ldr	r0, [pc, #212]	; (8000434 <MX_GPIO_Init+0x150>)
 8000360:	f001 fb82 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036a:	4833      	ldr	r0, [pc, #204]	; (8000438 <MX_GPIO_Init+0x154>)
 800036c:	f001 fb7c 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000376:	4831      	ldr	r0, [pc, #196]	; (800043c <MX_GPIO_Init+0x158>)
 8000378:	f001 fb76 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000382:	4b2f      	ldr	r3, [pc, #188]	; (8000440 <MX_GPIO_Init+0x15c>)
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	482a      	ldr	r0, [pc, #168]	; (800043c <MX_GPIO_Init+0x158>)
 8000392:	f001 f9db 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000396:	2320      	movs	r3, #32
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2300      	movs	r3, #0
 80003a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	4821      	ldr	r0, [pc, #132]	; (8000434 <MX_GPIO_Init+0x150>)
 80003ae:	f001 f9cd 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80003b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4619      	mov	r1, r3
 80003ca:	481b      	ldr	r0, [pc, #108]	; (8000438 <MX_GPIO_Init+0x154>)
 80003cc:	f001 f9be 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = END_DOWN_Pin|END_HIGH_Pin;
 80003d0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003d6:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_GPIO_Init+0x160>)
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	4619      	mov	r1, r3
 80003e4:	4815      	ldr	r0, [pc, #84]	; (800043c <MX_GPIO_Init+0x158>)
 80003e6:	f001 f9b1 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin;
 80003ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	2301      	movs	r3, #1
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2300      	movs	r3, #0
 80003fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	480e      	ldr	r0, [pc, #56]	; (800043c <MX_GPIO_Init+0x158>)
 8000404:	f001 f9a2 	bl	800174c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2100      	movs	r1, #0
 800040c:	2017      	movs	r0, #23
 800040e:	f001 f926 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000412:	2017      	movs	r0, #23
 8000414:	f001 f93f 	bl	8001696 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2028      	movs	r0, #40	; 0x28
 800041e:	f001 f91e 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000422:	2028      	movs	r0, #40	; 0x28
 8000424:	f001 f937 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000428:	bf00      	nop
 800042a:	3728      	adds	r7, #40	; 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	10110000 	.word	0x10110000
 8000444:	10210000 	.word	0x10210000

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fba1 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f820 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f7ff ff46 	bl	80002e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 fac8 	bl	80009ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800045c:	f000 fa9c 	bl	8000998 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000460:	f7ff fe8c 	bl	800017c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &data, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	4908      	ldr	r1, [pc, #32]	; (8000488 <main+0x40>)
 8000468:	4808      	ldr	r0, [pc, #32]	; (800048c <main+0x44>)
 800046a:	f002 f8c8 	bl	80025fe <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc);
 800046e:	4808      	ldr	r0, [pc, #32]	; (8000490 <main+0x48>)
 8000470:	f000 fd66 	bl	8000f40 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 auto_fotodetector(get_value_fotodetector());
 8000474:	f7ff ff1c 	bl	80002b0 <get_value_fotodetector>
 8000478:	4603      	mov	r3, r0
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f9b0 	bl	80007e0 <auto_fotodetector>
	 move_motor();
 8000480:	f000 f8fa 	bl	8000678 <move_motor>
  {
 8000484:	e7f6      	b.n	8000474 <main+0x2c>
 8000486:	bf00      	nop
 8000488:	20000081 	.word	0x20000081
 800048c:	2000009c 	.word	0x2000009c
 8000490:	2000002c 	.word	0x2000002c

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b092      	sub	sp, #72	; 0x48
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2234      	movs	r2, #52	; 0x34
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fcda 	bl	8002e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <SystemClock_Config+0x98>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <SystemClock_Config+0x98>)
 80004c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	2310      	movs	r3, #16
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 faec 	bl	8001ac8 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f6:	f000 f835 	bl	8000564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	230f      	movs	r3, #15
 80004fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fe08 	bl	8002128 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800051e:	f000 f821 	bl	8000564 <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3748      	adds	r7, #72	; 0x48
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40007000 	.word	0x40007000

08000530 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if(huart->Instance)
	{

	}

	new_data(data);
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_UART_RxCpltCallback+0x2c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f857 	bl	80005f0 <new_data>
	data = 0;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_UART_RxCpltCallback+0x2c>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &data, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	4904      	ldr	r1, [pc, #16]	; (800055c <HAL_UART_RxCpltCallback+0x2c>)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <HAL_UART_RxCpltCallback+0x30>)
 800054e:	f002 f856 	bl	80025fe <HAL_UART_Receive_IT>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000081 	.word	0x20000081
 8000560:	2000009c 	.word	0x2000009c

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <HAL_GPIO_EXTI_Callback>:
#include "motor.h"



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_DOWN_Pin)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b40      	cmp	r3, #64	; 0x40
 800057e:	d112      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0x36>
	{

		set_position = position = 0;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 800058c:	701a      	strb	r2, [r3, #0]
		set_position = set_position + 5;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3305      	adds	r3, #5
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000598:	701a      	strb	r2, [r3, #0]
		auto_down = 1;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x78>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
		auto_up = 0;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_GPIO_EXTI_Callback+0x7c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]

	}
	if(GPIO_Pin == END_HIGH_Pin)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005ac:	d112      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0x64>
		{
			set_position = position = 255;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80005b0:	22ff      	movs	r2, #255	; 0xff
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005ba:	701a      	strb	r2, [r3, #0]
			set_position = set_position - 5;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3b05      	subs	r3, #5
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005c6:	701a      	strb	r2, [r3, #0]
			auto_down = 0;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x78>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
			auto_up = 1;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_GPIO_EXTI_Callback+0x7c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
		}
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	20000098 	.word	0x20000098
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000090 	.word	0x20000090

080005f0 <new_data>:

void new_data(uint8_t new)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	set_position = position = 100;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <new_data+0x7c>)
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <new_data+0x7c>)
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <new_data+0x80>)
 8000606:	701a      	strb	r2, [r3, #0]
	if(new == '1')
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b31      	cmp	r3, #49	; 0x31
 800060c:	d106      	bne.n	800061c <new_data+0x2c>
	{
		set_position += 5;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <new_data+0x80>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3305      	adds	r3, #5
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <new_data+0x80>)
 8000618:	701a      	strb	r2, [r3, #0]
	else if(new == '5')
		{

			control = 1;
		}
}
 800061a:	e022      	b.n	8000662 <new_data+0x72>
	else if(new == '2')
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b32      	cmp	r3, #50	; 0x32
 8000620:	d106      	bne.n	8000630 <new_data+0x40>
		set_position -= 5;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <new_data+0x80>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b05      	subs	r3, #5
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <new_data+0x80>)
 800062c:	701a      	strb	r2, [r3, #0]
}
 800062e:	e018      	b.n	8000662 <new_data+0x72>
	else if(new == '3')
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b33      	cmp	r3, #51	; 0x33
 8000634:	d102      	bne.n	800063c <new_data+0x4c>
			home_up();
 8000636:	f000 f8a3 	bl	8000780 <home_up>
}
 800063a:	e012      	b.n	8000662 <new_data+0x72>
	else if(new == '4')
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b34      	cmp	r3, #52	; 0x34
 8000640:	d102      	bne.n	8000648 <new_data+0x58>
			home_down();
 8000642:	f000 f8b5 	bl	80007b0 <home_down>
}
 8000646:	e00c      	b.n	8000662 <new_data+0x72>
	else if(new == '6')
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b36      	cmp	r3, #54	; 0x36
 800064c:	d103      	bne.n	8000656 <new_data+0x66>
			control = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <new_data+0x84>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	e005      	b.n	8000662 <new_data+0x72>
	else if(new == '5')
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b35      	cmp	r3, #53	; 0x35
 800065a:	d102      	bne.n	8000662 <new_data+0x72>
			control = 1;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <new_data+0x84>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000098 	.word	0x20000098
 8000674:	20000084 	.word	0x20000084

08000678 <move_motor>:




void move_motor()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	if(set_position > position)
 800067c:	4b3b      	ldr	r3, [pc, #236]	; (800076c <move_motor+0xf4>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <move_motor+0xf8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d931      	bls.n	80006ec <move_motor+0x74>
	{

		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	4839      	ldr	r0, [pc, #228]	; (8000774 <move_motor+0xfc>)
 8000690:	f001 f9ea 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	4837      	ldr	r0, [pc, #220]	; (8000778 <move_motor+0x100>)
 800069c:	f001 f9e4 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fae5 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <move_motor+0x100>)
 80006ac:	f001 f9dc 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fadd 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	482f      	ldr	r0, [pc, #188]	; (8000778 <move_motor+0x100>)
 80006bc:	f001 f9d4 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fad5 	bl	8000c70 <HAL_Delay>
		++count_position;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <move_motor+0x104>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a2b      	ldr	r2, [pc, #172]	; (800077c <move_motor+0x104>)
 80006ce:	6013      	str	r3, [r2, #0]
		if(count_position == 20)
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <move_motor+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b14      	cmp	r3, #20
 80006d6:	d147      	bne.n	8000768 <move_motor+0xf0>
		{
			++position;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <move_motor+0xf8>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <move_motor+0xf8>)
 80006e2:	701a      	strb	r2, [r3, #0]
			count_position = 0;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <move_motor+0x104>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	else
	{
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
	}

}
 80006ea:	e03d      	b.n	8000768 <move_motor+0xf0>
	 else if(set_position < position)
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <move_motor+0xf4>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <move_motor+0xf8>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d231      	bcs.n	800075c <move_motor+0xe4>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <move_motor+0xfc>)
 8000700:	f001 f9b2 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <move_motor+0x100>)
 800070c:	f001 f9ac 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 faad 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <move_motor+0x100>)
 800071c:	f001 f9a4 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 faa5 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <move_motor+0x100>)
 800072c:	f001 f99c 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fa9d 	bl	8000c70 <HAL_Delay>
		++count_position;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <move_motor+0x104>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a0f      	ldr	r2, [pc, #60]	; (800077c <move_motor+0x104>)
 800073e:	6013      	str	r3, [r2, #0]
		if(count_position == 20)
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <move_motor+0x104>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b14      	cmp	r3, #20
 8000746:	d10f      	bne.n	8000768 <move_motor+0xf0>
			--position;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <move_motor+0xf8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <move_motor+0xf8>)
 8000752:	701a      	strb	r2, [r3, #0]
			count_position = 0;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <move_motor+0x104>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	e005      	b.n	8000768 <move_motor+0xf0>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <move_motor+0xfc>)
 8000764:	f001 f980 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000098 	.word	0x20000098
 8000770:	2000008c 	.word	0x2000008c
 8000774:	40020400 	.word	0x40020400
 8000778:	40020800 	.word	0x40020800
 800077c:	20000028 	.word	0x20000028

08000780 <home_up>:


void home_up()
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	set_position = position = 0;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <home_up+0x28>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <home_up+0x28>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <home_up+0x2c>)
 8000790:	701a      	strb	r2, [r3, #0]
	set_position += 255;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <home_up+0x2c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <home_up+0x2c>)
 800079c:	701a      	strb	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	20000098 	.word	0x20000098

080007b0 <home_down>:



void home_down()
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	set_position = position = 255;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <home_down+0x28>)
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <home_down+0x28>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <home_down+0x2c>)
 80007c0:	701a      	strb	r2, [r3, #0]
	set_position -= 255;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <home_down+0x2c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <home_down+0x2c>)
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	20000098 	.word	0x20000098

080007e0 <auto_fotodetector>:

void auto_fotodetector(uint8_t auto_foto)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]

	if(control == 1)
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <auto_fotodetector+0x40>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d111      	bne.n	8000816 <auto_fotodetector+0x36>
	{
		if(auto_down == 0)
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <auto_fotodetector+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d104      	bne.n	8000804 <auto_fotodetector+0x24>
		{
			if(auto_foto < 190)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2bbd      	cmp	r3, #189	; 0xbd
 80007fe:	d801      	bhi.n	8000804 <auto_fotodetector+0x24>
			{
				home_down();
 8000800:	f7ff ffd6 	bl	80007b0 <home_down>
			}
		}
		if(auto_up == 0)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <auto_fotodetector+0x48>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <auto_fotodetector+0x36>
		{
			if(auto_foto > 220)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2bdc      	cmp	r3, #220	; 0xdc
 8000810:	d901      	bls.n	8000816 <auto_fotodetector+0x36>
			{
					home_up();
 8000812:	f7ff ffb5 	bl	8000780 <home_up>
			}
		}
	}
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000084 	.word	0x20000084
 8000824:	20000088 	.word	0x20000088
 8000828:	20000090 	.word	0x20000090

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_MspInit+0x5c>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_MspInit+0x5c>)
 8000838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800083c:	6253      	str	r3, [r2, #36]	; 0x24
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x5c>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x5c>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x5c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6213      	str	r3, [r2, #32]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x5c>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x5c>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x5c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6253      	str	r3, [r2, #36]	; 0x24
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x5c>)
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fee4 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <HardFault_Handler+0x4>

0800089e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <BusFault_Handler+0x4>

080008aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f9ae 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008e4:	2040      	movs	r0, #64	; 0x40
 80008e6:	f001 f8d7 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80008ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ee:	f001 f8d3 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <USART1_IRQHandler+0x10>)
 80008fe:	f001 fed3 	bl	80026a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000009c 	.word	0x2000009c

0800090c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <USART2_IRQHandler+0x10>)
 8000912:	f001 fec9 	bl	80026a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000dc 	.word	0x200000dc

08000920 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000924:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000928:	f001 f8b6 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <SystemInit+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <SystemInit+0x5c>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x5c>)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	4911      	ldr	r1, [pc, #68]	; (800098c <SystemInit+0x5c>)
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <SystemInit+0x60>)
 8000948:	4013      	ands	r3, r2
 800094a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SystemInit+0x5c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <SystemInit+0x5c>)
 8000952:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000956:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800095a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SystemInit+0x5c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SystemInit+0x5c>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <SystemInit+0x5c>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <SystemInit+0x5c>)
 800096e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000972:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SystemInit+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x64>)
 800097c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000980:	609a      	str	r2, [r3, #8]
#endif
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	88ffc00c 	.word	0x88ffc00c
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART1_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f001 fdc8 	bl	8002564 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f7ff fdc3 	bl	8000564 <Error_Handler>
  }

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	40013800 	.word	0x40013800

080009ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f001 fd9e 	bl	8002564 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f7ff fd99 	bl	8000564 <Error_Handler>
  }

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000dc 	.word	0x200000dc
 8000a3c:	40004400 	.word	0x40004400

08000a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <HAL_UART_MspInit+0xf8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d131      	bne.n	8000ac6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6213      	str	r3, [r2, #32]
 8000a6e:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4824      	ldr	r0, [pc, #144]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000ab0:	f000 fe4c 	bl	800174c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 fdd0 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000abe:	2025      	movs	r0, #37	; 0x25
 8000ac0:	f000 fde9 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac4:	e034      	b.n	8000b30 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_UART_MspInit+0x104>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d12f      	bne.n	8000b30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ada:	6253      	str	r3, [r2, #36]	; 0x24
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	61d3      	str	r3, [r2, #28]
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0xfc>)
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b00:	230c      	movs	r3, #12
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <HAL_UART_MspInit+0x100>)
 8000b1c:	f000 fe16 	bl	800174c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2026      	movs	r0, #38	; 0x26
 8000b26:	f000 fd9a 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2a:	2026      	movs	r0, #38	; 0x26
 8000b2c:	f000 fdb3 	bl	8001696 <HAL_NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400

08000b48 <Reset_Handler>:
 8000b48:	2100      	movs	r1, #0
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopFillZerobss+0x14>)
 8000b4e:	585b      	ldr	r3, [r3, r1]
 8000b50:	5043      	str	r3, [r0, r1]
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:
 8000b54:	480a      	ldr	r0, [pc, #40]	; (8000b80 <LoopFillZerobss+0x18>)
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <LoopFillZerobss+0x1c>)
 8000b58:	1842      	adds	r2, r0, r1
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopFillZerobss+0x20>)
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
 8000b62:	2300      	movs	r3, #0
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <LoopFillZerobss+0x24>)
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>
 8000b6e:	f7ff fedf 	bl	8000930 <SystemInit>
 8000b72:	f002 f94f 	bl	8002e14 <__libc_init_array>
 8000b76:	f7ff fc67 	bl	8000448 <main>
 8000b7a:	4770      	bx	lr
 8000b7c:	08002eb0 	.word	0x08002eb0
 8000b80:	20000000 	.word	0x20000000
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	20000120 	.word	0x20000120

08000b90 <ADC1_IRQHandler>:
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>

08000b92 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fd53 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff fe3a 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_InitTick+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d022      	beq.n	8000c1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_InitTick+0x68>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fd60 	bl	80016b2 <HAL_SYSTICK_Config>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10f      	bne.n	8000c18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d809      	bhi.n	8000c12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 fd2a 	bl	800165e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x70>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e004      	b.n	8000c22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <HAL_GetTick+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	2000011c 	.word	0x2000011c

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff fff0 	bl	8000c5c <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d004      	beq.n	8000c94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_Delay+0x40>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c94:	bf00      	nop
 8000c96:	f7ff ffe1 	bl	8000c5c <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d8f7      	bhi.n	8000c96 <HAL_Delay+0x26>
  {
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e127      	b.n	8000f24 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d115      	bne.n	8000d0e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b8e      	ldr	r3, [pc, #568]	; (8000f2c <HAL_ADC_Init+0x278>)
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	4a8d      	ldr	r2, [pc, #564]	; (8000f2c <HAL_ADC_Init+0x278>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6213      	str	r3, [r2, #32]
 8000cfc:	4b8b      	ldr	r3, [pc, #556]	; (8000f2c <HAL_ADC_Init+0x278>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fa91 	bl	8000230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 80ff 	bne.w	8000f1a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d24:	f023 0302 	bic.w	r3, r3, #2
 8000d28:	f043 0202 	orr.w	r2, r3, #2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000d30:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <HAL_ADC_Init+0x27c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	497c      	ldr	r1, [pc, #496]	; (8000f30 <HAL_ADC_Init+0x27c>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d4a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000d6e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000d96:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d007      	beq.n	8000db6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000db2:	4313      	orrs	r3, r2
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	2b40      	cmp	r3, #64	; 0x40
 8000dc2:	d04f      	beq.n	8000e64 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000dd6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6912      	ldr	r2, [r2, #16]
 8000ddc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000de0:	d003      	beq.n	8000dea <HAL_ADC_Init+0x136>
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6912      	ldr	r2, [r2, #16]
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_ADC_Init+0x13c>
 8000dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dee:	e000      	b.n	8000df2 <HAL_ADC_Init+0x13e>
 8000df0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000df2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000df6:	4313      	orrs	r3, r2
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d125      	bne.n	8000e50 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d114      	bne.n	8000e38 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000e18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	fa92 f2a2 	rbit	r2, r2
 8000e20:	617a      	str	r2, [r7, #20]
  return result;
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e32:	4313      	orrs	r3, r2
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
 8000e36:	e00b      	b.n	8000e50 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f043 0220 	orr.w	r2, r3, #32
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_ADC_Init+0x280>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_ADC_Init+0x284>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e74:	430b      	orrs	r3, r1
 8000e76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e80:	d003      	beq.n	8000e8a <HAL_ADC_Init+0x1d6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d119      	bne.n	8000ebe <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000e9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	fa92 f2a2 	rbit	r2, r2
 8000ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	fab2 f282 	clz	r2, r2
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	fa03 f202 	lsl.w	r2, r3, r2
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
 8000ebc:	e007      	b.n	8000ece <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_ADC_Init+0x288>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d10b      	bne.n	8000ef6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ef4:	e014      	b.n	8000f20 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f023 0312 	bic.w	r3, r3, #18
 8000efe:	f043 0210 	orr.w	r2, r3, #16
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40012700 	.word	0x40012700
 8000f34:	fcfc16ff 	.word	0xfcfc16ff
 8000f38:	c0fff189 	.word	0xc0fff189
 8000f3c:	bf80fffe 	.word	0xbf80fffe

08000f40 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Start+0x1a>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e04e      	b.n	8000ff8 <HAL_ADC_Start+0xb8>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fa4e 	bl	8001404 <ADC_Enable>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d141      	bne.n	8000ff6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb0:	d106      	bne.n	8000fc0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fb6:	f023 0206 	bic.w	r2, r3, #6
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8000fbe:	e002      	b.n	8000fc6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fd6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d107      	bne.n	8000ff6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ff4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101c:	d113      	bne.n	8001046 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102c:	d10b      	bne.n	8001046 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f043 0220 	orr.w	r2, r3, #32
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e061      	b.n	800110a <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001046:	f7ff fe09 	bl	8000c5c <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800104c:	e01a      	b.n	8001084 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d016      	beq.n	8001084 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <HAL_ADC_PollForConversion+0x6c>
 800105c:	f7ff fdfe 	bl	8000c5c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d20b      	bcs.n	8001084 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e042      	b.n	800110a <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0dd      	beq.n	800104e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f06f 0212 	mvn.w	r2, #18
 80010a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d124      	bne.n	8001108 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11f      	bne.n	8001108 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d111      	bne.n	8001108 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x20>
 8001148:	2302      	movs	r3, #2
 800114a:	e14f      	b.n	80013ec <HAL_ADC_ConfigChannel+0x2c0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d81c      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b05      	subs	r3, #5
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
 8001194:	e07e      	b.n	8001294 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d81c      	bhi.n	80011d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b23      	subs	r3, #35	; 0x23
 80011b0:	221f      	movs	r2, #31
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4019      	ands	r1, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b23      	subs	r3, #35	; 0x23
 80011ca:	fa00 f203 	lsl.w	r2, r0, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011d6:	e05d      	b.n	8001294 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d81c      	bhi.n	800121a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b41      	subs	r3, #65	; 0x41
 80011f2:	221f      	movs	r2, #31
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4019      	ands	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b41      	subs	r3, #65	; 0x41
 800120c:	fa00 f203 	lsl.w	r2, r0, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
 8001218:	e03c      	b.n	8001294 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b18      	cmp	r3, #24
 8001220:	d81c      	bhi.n	800125c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b5f      	subs	r3, #95	; 0x5f
 8001234:	221f      	movs	r2, #31
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	4019      	ands	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b5f      	subs	r3, #95	; 0x5f
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01b      	b.n	8001294 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b7d      	subs	r3, #125	; 0x7d
 800126e:	221f      	movs	r2, #31
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	4019      	ands	r1, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	3b7d      	subs	r3, #125	; 0x7d
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d81a      	bhi.n	80012d2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6959      	ldr	r1, [r3, #20]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	2207      	movs	r2, #7
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4019      	ands	r1, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6898      	ldr	r0, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	fa00 f203 	lsl.w	r2, r0, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	e05d      	b.n	800138e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b13      	cmp	r3, #19
 80012d8:	d81c      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	2207      	movs	r2, #7
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	4019      	ands	r1, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6898      	ldr	r0, [r3, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	3b1e      	subs	r3, #30
 8001306:	fa00 f203 	lsl.w	r2, r0, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	e03c      	b.n	800138e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b1d      	cmp	r3, #29
 800131a:	d81c      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68d9      	ldr	r1, [r3, #12]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	3b3c      	subs	r3, #60	; 0x3c
 800132e:	2207      	movs	r2, #7
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	4019      	ands	r1, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	3b3c      	subs	r3, #60	; 0x3c
 8001348:	fa00 f203 	lsl.w	r2, r0, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	e01b      	b.n	800138e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	3b5a      	subs	r3, #90	; 0x5a
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	4019      	ands	r1, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6898      	ldr	r0, [r3, #8]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	3b5a      	subs	r3, #90	; 0x5a
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	2b11      	cmp	r3, #17
 800139c:	d121      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_ADC_ConfigChannel+0x2cc>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11b      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_ADC_ConfigChannel+0x2cc>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_ADC_ConfigChannel+0x2cc>)
 80013b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b4:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d111      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_ADC_ConfigChannel+0x2d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_ADC_ConfigChannel+0x2d4>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9a      	lsrs	r2, r3, #18
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40012700 	.word	0x40012700
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	2b40      	cmp	r3, #64	; 0x40
 8001420:	d03c      	beq.n	800149c <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <ADC_Enable+0xa4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <ADC_Enable+0xa8>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	0c9a      	lsrs	r2, r3, #18
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001446:	e002      	b.n	800144e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001454:	f7ff fc02 	bl	8000c5c <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800145a:	e018      	b.n	800148e <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800145c:	f7ff fbfe 	bl	8000c5c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d911      	bls.n	800148e <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f043 0210 	orr.w	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b40      	cmp	r3, #64	; 0x40
 800149a:	d1df      	bne.n	800145c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000
 80014ac:	431bde83 	.word	0x431bde83

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff90 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff2d 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff42 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff90 	bl	80015a0 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5f 	bl	800154c <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff35 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d005      	beq.n	80016ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2204      	movs	r2, #4
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e029      	b.n	8001742 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020e 	bic.w	r2, r2, #14
 80016fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 021c 	and.w	r2, r3, #28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
    }
  }
  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001762:	e160      	b.n	8001a26 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8152 	beq.w	8001a20 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x40>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d00b      	beq.n	8001828 <HAL_GPIO_Init+0xdc>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800181c:	2b11      	cmp	r3, #17
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80ac 	beq.w	8001a20 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_GPIO_Init+0x2f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a5c      	ldr	r2, [pc, #368]	; (8001a40 <HAL_GPIO_Init+0x2f4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_GPIO_Init+0x2f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_GPIO_Init+0x2f8>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d025      	beq.n	8001958 <HAL_GPIO_Init+0x20c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x300>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d01f      	beq.n	8001954 <HAL_GPIO_Init+0x208>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x304>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d019      	beq.n	8001950 <HAL_GPIO_Init+0x204>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x308>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x200>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x30c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1fc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x310>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1f8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x314>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1f4>
 800193c:	2306      	movs	r3, #6
 800193e:	e00c      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001940:	2307      	movs	r3, #7
 8001942:	e00a      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001944:	2305      	movs	r3, #5
 8001946:	e008      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001948:	2304      	movs	r3, #4
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x20e>
 800194c:	2303      	movs	r3, #3
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001950:	2302      	movs	r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x20e>
 8001958:	2300      	movs	r3, #0
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800196a:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_GPIO_Init+0x2f8>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_GPIO_Init+0x318>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800199c:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <HAL_GPIO_Init+0x318>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_GPIO_Init+0x318>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019c6:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_GPIO_Init+0x318>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_GPIO_Init+0x318>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_GPIO_Init+0x318>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_GPIO_Init+0x318>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_GPIO_Init+0x318>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f ae97 	bne.w	8001764 <HAL_GPIO_Init+0x18>
  } 
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd5a 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e31d      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ada:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	4b91      	ldr	r3, [pc, #580]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d07b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d006      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d10f      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06a      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x128>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d166      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e2f7      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x74>
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e02d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x96>
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0xd0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xb8>
 8001b66:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd0>
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f85c 	bl	8000c5c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff f858 	bl	8000c5c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e2ad      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe0>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f848 	bl	8000c5c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f844 	bl	8000c5c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e299      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x108>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d05a      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x160>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e276      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	493d      	ldr	r1, [pc, #244]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3c:	e03a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d020      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x268>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f806 	bl	8000c5c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f802 	bl	8000c5c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e257      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	492a      	ldr	r1, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
 8001c86:	e015      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x268>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ffe5 	bl	8000c5c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7fe ffe1 	bl	8000c5c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e236      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80b8 	beq.w	8001e32 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d170      	bne.n	8001daa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x218>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e21a      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d921      	bls.n	8001d34 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fbd5 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e208      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4906      	ldr	r1, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	4901      	ldr	r1, [pc, #4]	; (8001d2c <HAL_RCC_OscConfig+0x264>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	e020      	b.n	8001d6e <HAL_RCC_OscConfig+0x2a6>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d34:	4ba4      	ldr	r3, [pc, #656]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	49a1      	ldr	r1, [pc, #644]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d46:	4ba0      	ldr	r3, [pc, #640]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	061b      	lsls	r3, r3, #24
 8001d54:	499c      	ldr	r1, [pc, #624]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fba0 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1d3      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	3301      	adds	r3, #1
 8001d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d7e:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001d80:	6892      	ldr	r2, [r2, #8]
 8001d82:	0912      	lsrs	r2, r2, #4
 8001d84:	f002 020f 	and.w	r2, r2, #15
 8001d88:	4990      	ldr	r1, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x504>)
 8001d8a:	5c8a      	ldrb	r2, [r1, r2]
 8001d8c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d8e:	4a90      	ldr	r2, [pc, #576]	; (8001fd0 <HAL_RCC_OscConfig+0x508>)
 8001d90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d92:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <HAL_RCC_OscConfig+0x50c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe ff14 	bl	8000bc4 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d045      	beq.n	8001e32 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	e1b5      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d029      	beq.n	8001e06 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_OscConfig+0x510>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff50 	bl	8000c5c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7fe ff4c 	bl	8000c5c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1a1      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4977      	ldr	r1, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	4972      	ldr	r1, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e06:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x510>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff26 	bl	8000c5c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e14:	f7fe ff22 	bl	8000c5c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e177      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e26:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <HAL_RCC_OscConfig+0x514>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ff06 	bl	8000c5c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7fe ff02 	bl	8000c5c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e157      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e66:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x38c>
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x514>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe feef 	bl	8000c5c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7fe feeb 	bl	8000c5c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e140      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80b5 	beq.w	8002018 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x518>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x518>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <HAL_RCC_OscConfig+0x518>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe feb3 	bl	8000c5c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7fe feaf 	bl	8000c5c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e104      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x518>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x466>
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f24:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6353      	str	r3, [r2, #52]	; 0x34
 8001f2c:	e02d      	b.n	8001f8a <HAL_RCC_OscConfig+0x4c2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x488>
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f40:	6353      	str	r3, [r2, #52]	; 0x34
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f4c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f4e:	e01c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4c2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f62:	6353      	str	r3, [r2, #52]	; 0x34
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x4c2>
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f88:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7fe fe63 	bl	8000c5c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fe5f 	bl	8000c5c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0b2      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4d2>
 8001fbc:	e023      	b.n	8002006 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fe4d 	bl	8000c5c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc4:	e019      	b.n	8001ffa <HAL_RCC_OscConfig+0x532>
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08002e90 	.word	0x08002e90
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	42470020 	.word	0x42470020
 8001fdc:	42470680 	.word	0x42470680
 8001fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe3a 	bl	8000c5c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e08d      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d079      	beq.n	8002114 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d056      	beq.n	80020d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2b02      	cmp	r3, #2
 800202c:	d13b      	bne.n	80020a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x65c>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fe12 	bl	8000c5c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fe0e 	bl	8000c5c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e063      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	4319      	orrs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	430b      	orrs	r3, r1
 8002072:	492b      	ldr	r1, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x65c>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fded 	bl	8000c5c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe fde9 	bl	8000c5c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03e      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x5be>
 80020a4:	e036      	b.n	8002114 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <HAL_RCC_OscConfig+0x65c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fdd6 	bl	8000c5c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fdd2 	bl	8000c5c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e027      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5ec>
 80020d2:	e01f      	b.n	8002114 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01a      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCC_OscConfig+0x658>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	42470060 	.word	0x42470060

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e11a      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b8f      	ldr	r3, [pc, #572]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d919      	bls.n	800217e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_ClockConfig+0x34>
 8002150:	4b8a      	ldr	r3, [pc, #552]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a89      	ldr	r2, [pc, #548]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0201 	bic.w	r2, r3, #1
 8002164:	4985      	ldr	r1, [pc, #532]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216c:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0f9      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	497a      	ldr	r1, [pc, #488]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 808e 	beq.w	80022c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0d7      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0cb      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0bf      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0b7      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe fd22 	bl	8000c5c <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d112      	bne.n	8002248 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fd1a 	bl	8000c5c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e09b      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_ClockConfig+0xfc>
 8002246:	e03e      	b.n	80022c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d112      	bne.n	8002276 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f7fe fd03 	bl	8000c5c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e084      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_ClockConfig+0x12a>
 8002274:	e027      	b.n	80022c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11d      	bne.n	80022ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fcec 	bl	8000c5c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e06d      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d1ee      	bne.n	8002280 <HAL_RCC_ClockConfig+0x158>
 80022a2:	e010      	b.n	80022c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe fcda 	bl	8000c5c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e05b      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ee      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d219      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_ClockConfig+0x1be>
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0201 	bic.w	r2, r3, #1
 80022ee:	4923      	ldr	r1, [pc, #140]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_ClockConfig+0x254>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e034      	b.n	8002372 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490f      	ldr	r1, [pc, #60]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f823 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234a:	4601      	mov	r1, r0
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_ClockConfig+0x258>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	fa21 f303 	lsr.w	r3, r1, r3
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x264>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fc2c 	bl	8000bc4 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002370:	7afb      	ldrb	r3, [r7, #11]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00
 8002380:	40023800 	.word	0x40023800
 8002384:	08002e90 	.word	0x08002e90
 8002388:	20000000 	.word	0x20000000
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d006      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x24>
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x2a>
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d12c      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b0:	613b      	str	r3, [r7, #16]
      break;
 80023b2:	e037      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023b6:	613b      	str	r3, [r7, #16]
      break;
 80023b8:	e034      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_RCC_GetSysClockFreq+0xac>)
 80023c4:	5cd3      	ldrb	r3, [r2, r3]
 80023c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0d9b      	lsrs	r3, r3, #22
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	3301      	adds	r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023e4:	fb02 f203 	mul.w	r2, r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e007      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023f6:	fb02 f203 	mul.w	r2, r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	613b      	str	r3, [r7, #16]
      break;
 8002406:	e00d      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa0>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0b5b      	lsrs	r3, r3, #13
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	613b      	str	r3, [r7, #16]
      break;
 8002422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002424:	693b      	ldr	r3, [r7, #16]
}
 8002426:	4618      	mov	r0, r3
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200
 800243c:	08002e84 	.word	0x08002e84

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <HAL_RCC_GetHCLKFreq+0x10>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff2 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 800245c:	4601      	mov	r1, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	08002ea0 	.word	0x08002ea0

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002480:	f7ff ffde 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002484:	4601      	mov	r1, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0adb      	lsrs	r3, r3, #11
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	08002ea0 	.word	0x08002ea0

080024a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d12c      	bne.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e016      	b.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6253      	str	r3, [r2, #36]	; 0x24
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002508:	d105      	bne.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002510:	d101      	bne.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002512:	2301      	movs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 0201 	bic.w	r2, r3, #1
 8002530:	490b      	ldr	r1, [pc, #44]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000
 8002560:	40023c00 	.word	0x40023c00

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03f      	b.n	80025f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fa58 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 faab 	bl	8002b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	d140      	bne.n	800269a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_UART_Receive_IT+0x26>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e039      	b.n	800269c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Receive_IT+0x38>
 8002632:	2302      	movs	r3, #2
 8002634:	e032      	b.n	800269c <HAL_UART_Receive_IT+0x9e>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2222      	movs	r2, #34	; 0x22
 800265a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_UART_IRQHandler+0x52>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f984 	bl	8002a00 <UART_Receive_IT>
      return;
 80026f8:	e0cc      	b.n	8002894 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80ab 	beq.w	8002858 <HAL_UART_IRQHandler+0x1b0>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_UART_IRQHandler+0x70>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a0 	beq.w	8002858 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_UART_IRQHandler+0x90>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_UART_IRQHandler+0xb0>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_UART_IRQHandler+0xd0>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_UART_IRQHandler+0xf0>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	f043 0208 	orr.w	r2, r3, #8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d078      	beq.n	8002892 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_UART_IRQHandler+0x112>
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f923 	bl	8002a00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_UART_IRQHandler+0x13a>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d031      	beq.n	8002846 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f86e 	bl	80028c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d123      	bne.n	800283e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002804:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d013      	beq.n	8002836 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_UART_IRQHandler+0x1f4>)
 8002814:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe ff55 	bl	80016ca <HAL_DMA_Abort_IT>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002830:	4610      	mov	r0, r2
 8002832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	e00e      	b.n	8002854 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f83b 	bl	80028b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	e00a      	b.n	8002854 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f837 	bl	80028b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	e006      	b.n	8002854 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f833 	bl	80028b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002852:	e01e      	b.n	8002892 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	bf00      	nop
    return;
 8002856:	e01c      	b.n	8002892 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_UART_IRQHandler+0x1cc>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f85a 	bl	8002926 <UART_Transmit_IT>
    return;
 8002872:	e00f      	b.n	8002894 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_UART_IRQHandler+0x1ec>
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8a1 	bl	80029d0 <UART_EndTransmit_IT>
    return;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002892:	bf00      	nop
  }
}
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	080028ff 	.word	0x080028ff

080028a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ffca 	bl	80028b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b21      	cmp	r3, #33	; 0x21
 8002938:	d144      	bne.n	80029c4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002942:	d11a      	bne.n	800297a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	1c9a      	adds	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	621a      	str	r2, [r3, #32]
 800296c:	e00e      	b.n	800298c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	621a      	str	r2, [r3, #32]
 8002978:	e008      	b.n	800298c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6211      	str	r1, [r2, #32]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4619      	mov	r1, r3
 800299a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10f      	bne.n	80029c0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff55 	bl	80028a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b22      	cmp	r3, #34	; 0x22
 8002a12:	d171      	bne.n	8002af8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d123      	bne.n	8002a66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10e      	bne.n	8002a4a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
 8002a48:	e029      	b.n	8002a9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
 8002a64:	e01b      	b.n	8002a9e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6858      	ldr	r0, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6291      	str	r1, [r2, #40]	; 0x28
 8002a7e:	b2c2      	uxtb	r2, r0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e00c      	b.n	8002a9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	1c58      	adds	r0, r3, #1
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6288      	str	r0, [r1, #40]	; 0x28
 8002a96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d120      	bne.n	8002af4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0220 	bic.w	r2, r2, #32
 8002ac0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fd20 	bl	8000530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e002      	b.n	8002afa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b44:	f023 030c 	bic.w	r3, r3, #12
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b70:	f040 80a5 	bne.w	8002cbe <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4aa4      	ldr	r2, [pc, #656]	; (8002e0c <UART_SetConfig+0x308>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d14f      	bne.n	8002c1e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b7e:	f7ff fc7d 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8002b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009a      	lsls	r2, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4a9d      	ldr	r2, [pc, #628]	; (8002e10 <UART_SetConfig+0x30c>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	0119      	lsls	r1, r3, #4
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bba:	4b95      	ldr	r3, [pc, #596]	; (8002e10 <UART_SetConfig+0x30c>)
 8002bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2064      	movs	r0, #100	; 0x64
 8002bc4:	fb00 f303 	mul.w	r3, r0, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a90      	ldr	r2, [pc, #576]	; (8002e10 <UART_SetConfig+0x30c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bdc:	4419      	add	r1, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	4b86      	ldr	r3, [pc, #536]	; (8002e10 <UART_SetConfig+0x30c>)
 8002bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a81      	ldr	r2, [pc, #516]	; (8002e10 <UART_SetConfig+0x30c>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 0207 	and.w	r2, r3, #7
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c1c:	e0f1      	b.n	8002e02 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7ff fc19 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002c22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <UART_SetConfig+0x30c>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	0119      	lsls	r1, r3, #4
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <UART_SetConfig+0x30c>)
 8002c5c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2064      	movs	r0, #100	; 0x64
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a68      	ldr	r2, [pc, #416]	; (8002e10 <UART_SetConfig+0x30c>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c7c:	4419      	add	r1, r3
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c94:	4b5e      	ldr	r3, [pc, #376]	; (8002e10 <UART_SetConfig+0x30c>)
 8002c96:	fba3 0302 	umull	r0, r3, r3, r2
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2064      	movs	r0, #100	; 0x64
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	3332      	adds	r3, #50	; 0x32
 8002ca8:	4a59      	ldr	r2, [pc, #356]	; (8002e10 <UART_SetConfig+0x30c>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	f003 0207 	and.w	r2, r3, #7
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	440a      	add	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	e0a1      	b.n	8002e02 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <UART_SetConfig+0x308>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d14e      	bne.n	8002d66 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cc8:	f7ff fbd8 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8002ccc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <UART_SetConfig+0x30c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	0119      	lsls	r1, r3, #4
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <UART_SetConfig+0x30c>)
 8002d06:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a3d      	ldr	r2, [pc, #244]	; (8002e10 <UART_SetConfig+0x30c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d24:	4419      	add	r1, r3
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <UART_SetConfig+0x30c>)
 8002d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2064      	movs	r0, #100	; 0x64
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <UART_SetConfig+0x30c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	440a      	add	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	e04d      	b.n	8002e02 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d66:	f7ff fb75 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002d6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <UART_SetConfig+0x30c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	0119      	lsls	r1, r3, #4
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009a      	lsls	r2, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <UART_SetConfig+0x30c>)
 8002da4:	fba3 0302 	umull	r0, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	2064      	movs	r0, #100	; 0x64
 8002dac:	fb00 f303 	mul.w	r3, r0, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	3332      	adds	r3, #50	; 0x32
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <UART_SetConfig+0x30c>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc2:	4419      	add	r1, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <UART_SetConfig+0x30c>)
 8002ddc:	fba3 0302 	umull	r0, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2064      	movs	r0, #100	; 0x64
 8002de4:	fb00 f303 	mul.w	r3, r0, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <UART_SetConfig+0x30c>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	440a      	add	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	51eb851f 	.word	0x51eb851f

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2500      	movs	r5, #0
 8002e18:	4e0c      	ldr	r6, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1ba4      	subs	r4, r4, r6
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a5      	cmp	r5, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 f822 	bl	8002e6c <_init>
 8002e28:	2500      	movs	r5, #0
 8002e2a:	4e0a      	ldr	r6, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1ba4      	subs	r4, r4, r6
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a5      	cmp	r5, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3c:	4798      	blx	r3
 8002e3e:	3501      	adds	r5, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e46:	4798      	blx	r3
 8002e48:	3501      	adds	r5, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08002ea8 	.word	0x08002ea8
 8002e50:	08002ea8 	.word	0x08002ea8
 8002e54:	08002ea8 	.word	0x08002ea8
 8002e58:	08002eac 	.word	0x08002eac

08002e5c <memset>:
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <memset+0xa>
 8002e64:	4770      	bx	lr
 8002e66:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6a:	e7f9      	b.n	8002e60 <memset+0x4>

08002e6c <_init>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr

08002e78 <_fini>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr
